<?php
/**************************************************************************************************************

    NAME
        Variables.phpclass

    DESCRIPTION
        Implements a vaariable store, which can be accessed either as an object or an associative array.

    AUTHOR
        Christian Vigh, 07/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/07/15]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace	Thrak\Database\Tables ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;


// Used namespaces & objects
use	Thrak\System\Object ;
use     Thrak\IO\Path ;
use	Thrak\Types\String ;
use	Thrak\Database\Table ;


/*==============================================================================================================

    Variables class -
        Implements a variable store.

  ==============================================================================================================*/
class   Variables		extends		Table
				implements	\ArrayAccess, \Countable, \Iterator
    {
	const		VARIABLE_TYPE_STRING		=  0 ;
	const		VARIABLE_TYPE_INTEGER		=  1 ;
	const		VARIABLE_TYPE_FLOAT		=  2 ;
	const		VARIABLE_TYPE_BOOLEAN		=  3 ;
	const		VARIABLE_TYPE_TIMESTAMP		=  4 ;
	const		VARIABLE_TYPE_SERIALIZED	=  5 ;


	public		$NameLength ;

	
	/*==============================================================================================================
	
	    Constructor -
	        Instanciates a ResolvedDomains object, and creates the underlying tables if necessary.
	
	  ==============================================================================================================*/
	public function  __construct ( $table_name		=  'thrak_variables', 
				       $comment			=  'Variable store',
				       $name_length		=  128,
				       $database		=  null, 
				       $recreate		=  false )
	   {
		parent::__construct ( $table_name, $comment, $database, $recreate ) ;
		$this -> NameLength	=  $name_length ;
	    }
	

	public function  __set ( $member, $value )
	   {
		$row	=  $this -> GetVariable ( $member ) ;

		if  ( $row )
			$this -> UpdateVariable ( $row [ 'id' ], $value, $row [ 'type' ] ) ;
		else
			$this -> CreateVariable ( $member, $value ) ;

	    }


	public function  CreateVariable ( $name, $value, $type = self::VARIABLE_TYPE_STRING, $date = 0 )
	   {
		$escaped_name	=  $this -> Database -> Escape ( $name ) ;
		$escaped_value	=  $this -> Database -> Escape ( $value ) ;
		$timestamp	=  $this -> GetTimestamp ( $date ) ;
		$query		=  "
					INSERT INTO {$this -> Name}
					SET
						name		=  '$escaped_name',
						value		=  '$escaped_value',
						'date'		=  $timestamp
				   " ;
	    }


	protected function  GetTimestamp ( $date )
	   {
		if  ( is_string ( $date ) )
			return ( strtotime ( $date ) ) ;
		else if  ( ! $date )
			return ( 0 ) ;
		else
			return ( $date ) ;
	    }


	protected function  GetVariable ( $member, $date = null )
	   {
		$escaped_member	=  $this -> Database -> Escape ( $member ) ;

		if  ( $date )
		   {
			$timestamp	=  $this -> GetTimestamp ( $date ) ;
			$query		=  "
						SELECT *
						FROM {$this -> Name}
						WHERE
							name	 = '$escaped_member' AND
							date	>= '$date' 
						ORDER BY date
						LIMIT 1
					   " ;
		    }
		else
			$query		=  "
						SELECT *
						FROM {$this -> Name}
						WHERE
							name	= '$escaped_member' AND
							date	=  
							   (
								SELECT MAX(date)
								FROM {$this -> Name}
								WHERE
									name = '$escaped_member'
							    )
					   " ;

		$this -> Database -> SetQuery ( $query ) ;
		$row		=  $this -> Database -> LoadRow ( $member ) ;

		return ( $row ) ;
	    }


	protected function  UpdateVariable ( $id, $value, $type = self::VARIABLE_TYPE_STRING )
	   {
		$value		=  $this -> GetRepresentation ( $value, $type ) ;
		$escaped_value	=  $this -> Database -> Escape ( $value ) ;
		$query		=  "
					UPDATE {$this -> Name}
					SET
						
				   " ;
	    }



	/*==============================================================================================================
	
	    Create -
	        Creates the underlying table.
	
	  ==============================================================================================================*/
	public function  Create ( )
	   {
		$query	=<<<END
CREATE TABLE IF NOT EXISTS  {$this -> Name}
   (
	id		INT UNSIGNED				NOT NULL AUTO_INCREMENT
								COMMENT 'Unique id for this entry',
	name		VARCHAR({$this -> NameLength})		NOT NULL DEFAULT ''
								COMMENT 'Variable name',
	value		LONGTEXT				NOT NULL
								COMMENT 'Variable value',
	type		TINYINT UNSIGNED			NOT NULL DEFAULT 0
								COMMENT 'Variable type (one of the Variable::VARIABLE_TYPE_* constants)',
	date		TIMESTAMP				NOT NULL DEFAULT 0
								COMMENT 'Application date/time',

	PRIMARY KEY	( id ),
	UNIQUE KEY	( date, name ),
	UNIQUE KEY	( name, date )
    ) ENGINE = MyISAM CHARSET latin1 COMMENT '{$this -> Comment}' ;

END;
		
		$this -> Database -> Execute ( $query ) ;
	    }
    }