<?php
/**************************************************************************************************************

    NAME
        BufferedOperation.php

    DESCRIPTION
        Base class for buffered database table operations.

    AUTHOR
        Christian Vigh, 07/2015.

    HISTORY
    [Version : 1.0]	[Date : 2015/07/26]     [Author : CV]
        Initial version.

    [Version : 1.0.1]   [Date : 2015/07/28]     [Author : CV]
	. Added the ValidateFieldNames() method.

 **************************************************************************************************************/
namespace	Thrak\Database ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;


// Used namespaces & objects
use	Thrak\System\Object ;
use     Thrak\IO\Path ;
use	Thrak\Types\String ;
use     Thrak\Types\ArrayHelpers ;


/*==============================================================================================================

    BufferedOperation -
        Base class for buffered database table operations.
	The idea is to issue one big SQL statement instead of several ones.

  ==============================================================================================================*/
abstract class  BufferedOperation	extends  Object
   {
	// Related database table
	public		$TableName ;
	// Number of rows to be buffered before being flushed through an INSERT statement
	public		$BufferSize ;
	// Database object
	public		$Database ;
	// Buffered rows
	public		$Rows		=  [] ;


	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        Constructor - Builds a BufferedOperation object
	
	    PROTOTYPE
	        $inserter	=  new BufferedOperation ( $table_name, $buffer_size = 1024, $database = null ) ;
	
	    DESCRIPTION
	        Builds a BufferedInsert object.
	
	    PARAMETERS
	        $table_name (string) -
	                Name of the underlying table.
	  
	 	$buffer_size (integer) -
	 		Number of rows to be buffered before an INSERT statement is issued.
	  
	 	$database (Database) -
	 		Database object. If not specified, the global $Database object will be used.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $table_name, $buffer_size = 100, $database = null )
	   {
		global		$Database ;
		
		
		parent::__construct ( ) ;
		
		$this -> TableName	=  $table_name ;
		$this -> BufferSize	=  $buffer_size ;
		$this -> Database	=  ( $database ) ?  $database : $Database ;
	    }
	

	/*--------------------------------------------------------------------------------------------------------------
	
	    Destructor -
	        Flushes potentially buffered records.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __destruct ( )
	   {
		$this -> Flush ( ) ;
	    }
	
	
	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        Add - Adds a record to the buffer
	
	    PROTOTYPE
	        $object -> Add ( $values ) ;
	
	    DESCRIPTION
	        Adds a new record to the buffer. The buffer will be flushed (ie, an INSERT statement will be issued)
		if the current row count is greater than the $BufferSize property.
	
	    PARAMETERS
	        $values (array) -
	                Array of record values to be added to the buffer.

	    RETURN VALUE 
		Returns true if the buffer has been flushed (before adding the current row), false otherwise.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Add ( $values ) 
	   {
		if  ( count ( $this -> Rows )  >=  $this -> BufferSize )
		   {
			$this -> Flush ( ) ;
			$flush_status		=  true ;
		    }
		else 
			$flush_status		=  false ;

		if  ( $this -> CanAddToQuery ( $values ) ) 
			$this -> Rows []	=  $values ;
		

		return ( $flush_status ) ;
	    }
	

	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        Flush - Flushes the currently buffered records.
	
	    PROTOTYPE
	        $buffer -> Flush ( ) ;
	
	    DESCRIPTION
	        Flushes the currently buffered records.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Flush ( )
	   {
		if  ( count ( $this -> Rows ) )
		   {
			$query		=  $this -> BuildQuery ( ) ;

			if  ( $query )
				$this -> Database -> Execute ( $query ) ;

			$this -> Rows	=  [] ;

			return ( true ) ;
		    }
		else
			return ( false ) ;
	    }


	// Checks if an item can be added to the final query. Values can be modified on the fly by the derived class.
	abstract protected function  CanAddToQuery ( &$values ) ;

	// Builds the final query
	abstract protected function  BuildQuery ( ) ;


	/*--------------------------------------------------------------------------------------------------------------
	 
	    ValidateFieldNames -
		A helper function for derived classes that accept a field name list in their constructor.
		It checks that the field names specified when calling the Add() method exactly match the ones specified
		in the constructor.

	 *-------------------------------------------------------------------------------------------------------------*/
	protected function  ValidateFieldNames ( $names, $values )
	   {
		if  ( ! is_array ( $values )  ||  count ( $values )  !=  count ( $this -> FieldNames ) )
			error ( new \Thrak\System\RuntimeException ( "Supplied value must be an array of " . count ( $this -> FieldNames ) . " values" ) ) ;

		$status		=  ArrayHelpers::CrossReference ( $names, $values, $missing, $extra ) ;
		
		if  ( ! $status )
		   {
			$parts		=  [] ;
			
			if  ( count ( $missing ) )
				$parts []	=  "The following fields are missing from the supplied values : " .	
							implode ( ', ', $missing ) . '.' ;
			
			if  ( count ( $extra ) )
				$parts []	=  "The following fields do not belong to the list of authorized fields : " .
							implode ( ', ', array_keys ( $extra ) ) . '.' ;
			
			$message	=  implode ( "\n", $parts ) ;
			
			error ( new \Thrak\System\RuntimeException ( $message ) ) ;
		    }
	    }

    }