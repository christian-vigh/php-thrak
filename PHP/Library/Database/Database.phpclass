<?php
/***************************************************************************************************

    NAME
	Database.phpclass

    DESCRIPTION
	Generic database access.

    AUTHOR
	Christian Vigh, 02/2010.

    HISTORY
    [Version : 1.0]		[Date : 2010/02/23]		[Author : CV]
	Initial release.

   [Version : 2.0]	[Date : 2012/10/13]		[Author : CV]
	Migrated to the Thrak library version 2.

   [Version : 2.0.1]	[Date : 2015/06/08]		[Author : CV]
	. Renamed the QuoteValue() method to Escape().

   [Version : 2.0.2]	[Date : 2015/06/24]		[Author : CV]
	. Added the Truncate() method.

   [Version : 2.0.3]	[Date : 2015/07/20]		[Author : CV]
	. Added the SetSimpleQuery() method.

   [Version : 2.0.4]	[Date : 2015/07/27]		[Author : CV]
	. Added the LoadValues() method.

   [Version : 2.0.5]	[Date : 2015/08/05]		[Author : CV]
	. Added the GetDatabases() and GetTables() methods.
	. Moved DatabaseDriver abstract class to DatabaseDriver.phpclass.

   [Version : 2.0.6]	[Date : 2015/08/30]		[Author : CV]
	. Added the GetNextRow() method.

   [Version : 2.0.7]	[Date : 2015/11/15]		[Author : CV]
	. Added the __EnsureConnected() method, and the Database/* /connect boolean value. When false,
	  database connection is only established upon the first query, not at script start.

   [Version : 2.0.9]	[Date : 2015/11/23]		[Author : CV]
	. Added the 'persistent' entry in database configuration.

 ***************************************************************************************************/
namespace 	Thrak\Database ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;


// Used namespaces and objects
use  	Thrak\System\Object ;
use  	Thrak\System\Exception ;
use  	Thrak\System\Timer ;
use  	Thrak\Database\Table ;
use 	Thrak\IO\Log ;


/*===========================================================================================

    Database class -
	A class for generic database access.

  ===========================================================================================*/
class	Database  extends  Object
   {
	//======================================================================  Database specific settings
	//
	// $DatabaseDriverName -
	//	Database driver name.
	public	$DatabaseDriverName			=  "" ;
	// $DatabaseDriver -
	//	A IDatabase object implementing the specified driver.
	public  $DatabaseDriver 			=  null ;
	// $DatabaseVersion -
	//	Database server version.
	public	$DatabaseVersion		=  "" ;

	//======================================================================  Thrak library specific settings
	// $DatabaseTablePrefix -
	//	Prefix to be prepended to table names.
	public	$DatabaseTablePrefix		=  "" ;


	//======================================================================  Connection settings
	// $DatabaseHost -
	//	Host that holds the database. This value is usually set to "localhost".
	public $DatabaseHost			=  "localhost" ;

	// $DatabasePort -
	//	Port number to be used for database connection. You can set this entry to the empty
	//	string if you want the default MySQL port to be used (3306) or specify a different
	//	value if you configured your database server differently.
	public $DatabasePort			=  3306 ;

	// $DatabaseUser, $DatabasePassword -
	//	User and password to be used for database connection.
	public $DatabaseUser			=  null ;
	public $DatabasePassword		=  null ;

	// $DatabaseName -
	//	Name of the database.
	public $DatabaseName			=  null ;


	//======================================================================  Database runtime settings
	// $Connection -
	//	Resource allocated for the database connection.
	public		$Connection		=  null ;
	public		$AutoConnect		=  true ;
	// $SQLQuery -
	//	Last defined SQL query.
	public		$SQLQuery		=  "" ;
	// $QueryLimit -
	//	Maximum number of rows to be returned by an SQL query.
	public		$QueryLimit		=  0 ;
	// $QueryOffset -
	//	Start row to be returned by an SQL query.
	public 		$QueryOffset		=  0 ;
	// $PersistentConnection -
	//	True if the connection to establish is to be persistent.
	public		$PersistentConnection	=  false ;

	//======================================================================  Log & debugging settings
	// $LastErrorNumber, $LastErrorMessage -
	//	Last error number & message generated by an SQL query.
	public 		$LastErrorNumber	=  0 ;
	public 		$LastErrorMessage	=  "" ;

	// $DatabaseLoggingEnabled -
	//	When true, every SQL operation is logged in $DatabaseLogFile.
	public		$EnableDatabaseLogging	=  false ;
	// $DatabaseLogFile -
	//	Name of the file where the messages are to be logged.
	public 		$DatabaseLogFile	=  "home://Database.log" ;
	// $DatabaseLogMessages -
	//	Logged messages.
	public		$DatabaseLogMessages	=  array ( ) ;

	// $EnableDatabaseDebug -
	//	When true, SQL errors will generate an exception.
	public		$EnableDatabaseDebug	=  false ;


	//======================================================================  Statistics
	// $QueryCount -
	//	Number of executed queries.
	public 		$QueryCount		=  0 ;
	// $EnableQueryTimings -
	//	When true, all queries will be timed.
	public		$EnableQueryTimings	=  false ;
	// $QueryTimings -
	//	When $EnableQueryTimings is true, each query will be stored in this associative array,
	//	together with start/end times and elapsed time. Each array element has the following entries :
	//	'query' (string) -
	//		Text of the SQL query.
	//	'start-time' (Unix time) -
	//		Start execution time.
	//	'end-time' (Unix time) -
	//		End execution time.
	//	'elapsed' ((float) -
	//		Elapsed time.
	public		$QueryTimings		=  array ( ) ;

	// Log object
	public 	$Log 			=  null ;


	/********************************************************************************************
	 ********************************************************************************************
	 ********************************************************************************************
	 ******                                                                                ******
	 ******                                MAGIC FUNCTIONS                                 ******
	 ******                                                                                ******
	 ********************************************************************************************
	 ********************************************************************************************
	 ********************************************************************************************/

	/*-------------------------------------------------------------------------------------------

	    NAME
	  	Class constructor - Initializes the Thrak Database object.

	    PROTOTYPE
		$Database = new Database ( $parameters = null ) ;

	    DESCRIPTION
		Initializes a Thrak database object.

	    PARAMETERS
	    	$parameters (associative array or connection name) -

	 --------------------------------------------------------------------------------------------*/
	public function  __construct ( $parameters = null )
	   {
	   	global 		$Configuration ;

		
		parent::__construct ( ) ;
		
	   	// Get the default configuration options
	   	$options 	=  $Configuration -> Get ( 'Database/default' ) ;

	   	// If $parameters is a string, then this string references an associative array value in the 'Database'
	   	// configuration parameter (ie, connection information)
	   	if  ( is_string ( $parameters ) )
	   		$extra 	=  $Configuration -> Get ( "Database/$parameters" ) ;
	   	else if  ( is_array ( $parameters ) )
	   		$extra  =  $parameters ;
	   	else if  ( $parameters  ==  null )
	   		$extra 	=  $Configuration -> Get ( "Database/default" ) ;
	   	else
	   		error ( new \Thrak\System\InvalidArgumentException 
			          ( 
					"The parameter specified to build a Database object must be either a string which references an item " .
	   		   		"in the Database section of the Configuration object, or an associative array giving connection parameters." 
				   )
				) ;

	   	if  ( $extra  !=  null )
	   		$options 	=  array_replace_recursive ( $options, $extra ) ;


		// Get connection information. Try to provide default values when it makes sense
		array_change_key_case ( $options, CASE_LOWER ) ;

		if  ( array_key_exists ( 'host', $options ) )			// Host name defaults to localhost
			$this -> DatabaseHost 		=  $options [ 'host' ] ;
		else
			$this -> DatabaseHost 		=  'localhost' ;

		if  ( array_key_exists ( 'port', $options ) ) 			// Port number defaults to 3306
			$this -> DatabasePort 		=  $options [ 'port' ] ;
		else
			$this -> DatabasePort  		=  3306 ;

		if  ( array_key_exists ( 'user', $options ) ) 			// User name defaults to root
			$this -> DatabaseUser 		=  $options [ 'user' ] ;
		else
			$this -> DatabaseUser 		=  'root' ;

		if  ( array_key_exists ( 'password', $options ) ) 		// User password defaults to empty string
			$this -> DatabasePassword 	=  $options [ 'password' ] ;
		else
			$this -> DatabasePassword 	=  '' ;

		if  ( array_key_exists ( 'database', $options ) )		// Current database defaults to nothing
			$this -> DatabaseName 		=  $options [ 'database' ] ;
		else
			$this -> DatabaseName 		=  null ;

		if  ( array_key_exists ( 'driver', $options ) )			// Current drivers defaults to mysqli
			$this -> DatabaseDriverName 	=  $options [ 'driver' ] ;
		else
			$this -> DatabaseDriverName 	=  'mysqli' ;

		if  ( array_key_exists ( 'table-prefix', $options ) )		// Table prefix default to nothing
			$this -> DatabaseTablePrefix 	=  $options [ 'table-prefix' ] ;
		else
			$this -> DatabaseTablePrefix 	=  '' ;

		if  ( array_key_exists ( 'log-file', $options ) )		// Default logfile is : tmp://database.log
			$this -> DatabaseLogFile 	=  $options [ 'log-file' ] ;
		else
			$this -> DatabaseLogFile 	=  "tmp://database.log" ;

		if  ( array_key_exists ( 'log', $options ) ) 			// Logging default to false
			$this -> EnableDatabaseLogging 	=  $options [ 'log' ] ;
		else
			$this -> EnableDatabaseLogging 	=  false ;

		if  ( array_key_exists ( 'debug', $options ) ) 			// Debugging defaults to false
			$this -> EnableDatabaseDebug 	=  $options [ 'debug' ] ;
		else
			$this -> EnableDatabaseDebug 	=  false ;

		if  ( array_key_exists ( 'profile', $options ) ) 		// Profiling defaults to false
			$this -> EnableQueryTimings 	=  $options [ 'profile' ] ;
		else
			$this -> EnableQueryTimings 	=  false ;

		if  ( isset ( $options [ 'connect' ] ) )			// Automatic connection at startup ?
			$this -> AutoConnect		=  $options [ 'connect' ] ;

		if  ( isset ( $options [ 'persistent' ] ) )			// Persistent connections
			$this -> PersistentConnection	=  $options [ 'persistent' ] ;

		// Load the driver
		$driver_file		=  "thrak://PHP/Library/Database/Drivers/" . $this -> DatabaseDriverName . ".phpclass" ;

		if  ( file_exists ( $driver_file ) )
		   {
			$fullname 	=  __NAMESPACE__ . "\\Drivers\\" . $this -> DatabaseDriverName ;

			if  ( ! class_exists ( $fullname ) )
				error ( new \Thrak\System\RuntimeException ( "Database driver \"" . $this -> DatabaseDriverName . "\" not found." ) ) ;

			$this -> DatabaseDriver 	=  new $fullname ( $this ) ;
		    }
		else
			error ( new \Thrak\System\RuntimeException ( "Driver class file \"$driver_file\" does not exist." ) ) ;

		// Check if the appropriate driver is installed
		if  ( ! $this -> DatabaseDriver -> db_is_driver_installed ( ) )
		   {
			error ( new \Thrak\System\RuntimeException ( "The {$this -> DatabaseDriverName} driver is not currently loaded in your PHP configuration." ) ) ;
			exit ( ) ;
		    }

		// Connect to the database
		if  ( $this -> AutoConnect )
			$this -> __EnsureConnected ( ) ;
	    }


	/********************************************************************************************
	 ********************************************************************************************
	 ********************************************************************************************
	 ******                                                                                ******
	 ******                           INTERNAL SUPPORT FUNCTIONS.                          ******
	 ******                                                                                ******
	 ********************************************************************************************
	 ********************************************************************************************
	 ********************************************************************************************/

	/*-------------------------------------------------------------------------------------------

	    NAME
		__GetParameter - Retrieves a configuration parameter.

	    PROTOTYPE
	  	$value = $this -> __GetParameter ( $parameters, $name ) ;

	    DESCRIPTION
		Returns the specified value from $parameters, or from the configuration object if it
		does not exist.

	    PARAMETERS
	    	$default (a
	    	$parameters (associative array) -
			Specifies the parameters used for creating the database object and the
			establish the database connection.
			To establish a single connection to "localhost" (the default) on the default
			port (3306), with user 'myuser' and password 'mypassword', just include the
			following code :

			$parameters = array ( 'user' => 'myuser',
					      'password' => 'mypassword' ) ;
			$Database = Database ( $parameters ) ;

		$name (string) -
			Name of the parameter whose value is to be retrieved.

	    RETURNS
	    	The specified parameter value, or null if the value is not defined.

	 --------------------------------------------------------------------------------------------*/
	private static function  __GetParameter ( $parameters, $name )
	   {
		if  ( is_array ( $parameters ) )
		   {
			if  ( isset ( $parameters [ $name ] ) )
				return ( $parameters [ $name ] ) ;
		    }

    		if  ( isset ( $parameters -> $name ) )
			return ( $parameters -> $name ) ;

		return ( $conf -> $name ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		__CheckError - Checks for the last SQL server error.

	    PROTOTYPE
		$this -> __CheckError ( $display_query = false ) ;

	    DESCRIPTION
		Checks for the last database error status. Logs a message if an error occurs, outputs
		an error message then exits.

	    PARAMETERS
	    	$display_query (boolean) -
			If true, the last executed query will also be logged and displayed.

	 --------------------------------------------------------------------------------------------*/
	private function  __CheckError ( $display_query = false )
	   {

		if  ( $this -> LastErrorNumber )	// Do something only if an error occurred
		   {
			$message = "Database error #{$this -> LastErrorNumber}: {$this -> LastErrorMessage}" ;

			if  ( $display_query )
				$message .= "\nLast executed query :\n\t" . str_replace ( "\n", "\n\t", $this -> SQLQuery ) ;

			$this -> __LogMessage ( $message ) ;
			error ( new \Thrak\System\RuntimeException ( $message ) ) ;
		    }
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		__EnsureConnected - Ensures that a database connection has been established.

	    PROTOTYPE
		$this -> __EnsureConnected ( ) ;

	    DESCRIPTION
	    	Ensures that a database connection has been established.

	 --------------------------------------------------------------------------------------------*/
	private function  __EnsureConnected ( )
	   {
		if  ( ! $this -> Connection )
		   {
			$this -> Connect ( $this -> DatabaseUser, $this -> DatabasePassword,
					   $this -> DatabaseHost, $this -> DatabasePort,
					   $this -> DatabaseName ) ;
		    }
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		__ResetError - Resets error conditions.

	    PROTOTYPE
		$this -> __ResetError ( ) ;

	    DESCRIPTION
	    	Resets the internal fields used for holding the last error condition (LastErrorNumber
		and LastErrorMessage).

	 --------------------------------------------------------------------------------------------*/
	private function  __ResetError ( )
	   {
		$this -> LastErrorNumber	=  0 ;
		$this -> LastErrorMessage	=  "" ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
	    	__LogMessage - Logs a message to the database log.

	    PROTOTYPE
		$this -> __LogMessage ( $message ) ;

	    DESCRIPTION
	    	Logs the specified message to the database log.
		The following properties determine the logging behavior :
		. EnableDatabaseLogging (boolean) -
			When set to true, logging is enabled. This parameter has the same name in the
			Configuration.php file.
		. DatabaseLogFile (string) -
			Specifies the output file used for logging. This parameter has the same name in
			the Configuration.php file.
		. DatabaseLogMessages (array of strings) -
			Array of strings that holds the logged messages in memory.

	    PARAMETERS
	    	$message (string) -
			Message to be logged.

	 --------------------------------------------------------------------------------------------*/
	private function  __LogMessage ( $message )
	   {
		if  ( $this -> EnableDatabaseLogging )
		   {
		   	if  ( $this -> Log  ==  null )
		   		$this -> Log = new Log ( $this -> DatabaseLogFile ) ;

		   	$this -> Log -> Write ( $message ) ;
		   	$this -> DatabaseLogMessages [] = $message ;
		    }
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		__ReplacePrefix - Replaces table prefix strings.

	    PROTOTYPE
		$result = $this -> __ReplacePrefix ( $string, $prefix, $substitute ) ;

	    DESCRIPTION
	    	Takes an input SQL statement ($string) and replaces every prefix token with its
		equivalent, given by $prefix (the default is '##').

	    PARAMETERS
	    	$string (string) -
			String to be interpreted.

		$prefix (string) -
			Prefix token to be substituted. The default is '##'.

		$substitute (string) -
			String to substitute for every occurrence of the prefix token. The substitution
			value is given in the DatabaseTablePrefix value of the Configuration.php file.

	    RETURNS
	    	The input string, with all $prefix tokens replaced with $substitute.

	    NOTES
	    	Within an SQL statement, __ReplacePrefix does not replace prefix tokens that may
		appear between quote or doublequotes.

	 --------------------------------------------------------------------------------------------*/
	 function  __ReplacePrefix ( $string, $prefix, $substitute )
	   {
		$plength	=  strlen ( $prefix ) ;

		if  ( ! $plength ) 
			return ( $string ) ;

		$length		=  strlen ( $string ) ;
		$result		=  "" ;
		$quote		=  '' ;
		$i		=  0 ;

		// We will loop through the input string to replace $prefix with $substitute,
		// but we won't process prefix strings that are inside a quoted string
		while  ( $i  <  $length )
		   {
			$ch = substr ( $string, $i, 1 ) ;		// Get next character

			// If a quote is found, either start or close a string
			if  ( $ch  ==  '"'  ||  $ch  ==  "'" )
			   {
				if  ( $quote )
				   {
					if  ( $ch  ==  $quote )
						$quote = '' ;		// End of string
				    }
				else
					$quote = $ch ;			// Start of string

				$result .= $ch ;
			   }
			// Inside a quoted string, we may have to process escaped characters
			else if  ( $quote  )
			   {
				if  ( $ch  ==  '\\' )			// Escape character : simply process the next one
				   {
					$i ++ ;
					$result .= '\\' . $string{$i} ;
				    }
				else
					$result .= $ch ;
			    }
			// We are here outside a quote, so we may encounter and substitute the prefix string
			else
			   {
				if  ( $plength  &&  ! strncasecmp ( substr ( $string, $i, $plength ), $prefix, $plength ) )
				   {
					$result .= $substitute ;
					$i += $plength - 1 ;
				    }
				else
					$result .= $ch ;
			    }

			// Process next input character
			$i ++ ;
		    }

		// All done, return
		return ( $result ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
	    	__ExplodeStatements - Splits a series of SQL statements into individual ones.

	    PROTOTYPE
	    	$array = $this -> __ExplodeStatements ( $statements ) ;

	    DESCRIPTION
	    	The Query() method allows for execution of several SQL statements separated by a
		semicolon character. __ExplodeStatement() splits such a string into several individual
		statements.

	    PARAMETERS
	    	$statements (string) -
			List of SQL statements separated by a semicolon.
			Empty statements are removed (for example, when two semicolon characters
			follow) and semicolons inside a quote string are correctly handled.

	    RETURNS
	    	An array of string that contain the individual SQL statements.

	 --------------------------------------------------------------------------------------------*/
	 function  __ExplodeStatements ( $statements )
	   {
		$results 	= array ( ) ;
		$length		=  strlen ( $statements ) ;
		$result		=  "" ;
		$quote		=  '' ;
		$i		=  0 ;

		// Loop through input statements
		while  ( $i  <  $length )
		   {
			$ch = substr ( $statements, $i, 1 ) ;		// Get next character

			// If a quote is found, either start or close a string
			if  ( $ch  ==  '"'  ||  $ch  ==  "'" )
			   {
				if  ( $quote )
				   {
					if  ( $ch  ==  $quote )
						$quote = '' ;		// End of string
				    }
				else
					$quote = $ch ;			// Start of string

				$result .= $ch ;
			   }
			// Inside a quoted string, we may have to process escaped characters
			else if  ( $quote  )
			   {
				if  ( $ch  ==  '\\' )			// Escape character : simply process the next one
				   {
					$i ++ ;
					$result .= '\\' . $statements{$i} ;
				    }
				else
					$result .= $ch ;
			    }
			// We are here outside a quote, so we may encounter a semicolon that separates the statements
			else if  ( ! $quote )
			   {
				if  ( $ch  ==  ';' )
				   {
					$results [] = trim ( $result ) ;
					$result     = "" ;
				    }
				else
					$result .= $ch ;
			    }

			// Process next input character
			$i ++ ;
		    }

		// All done, return
		$result = trim ( $result ) ;

		if  ( $result )
			$results [] = $result ;

		return ( $results ) ;
	    }




	/********************************************************************************************
	 ********************************************************************************************
	 ********************************************************************************************
	 ******                                                                                ******
	 ******                               OFFICIAL FUNCTIONS                               ******
	 ******                                                                                ******
	 ********************************************************************************************
	 ********************************************************************************************
	 ********************************************************************************************/


	/*-------------------------------------------------------------------------------------------

	    NAME
		IsConnected - Checks whether a connection to the database has been established.

	    PROTOTYPE
		if  ( $database -> IsConnected ( ) )
			...

	    DESCRIPTION
	    	Checks whether a connection to the database has been establised.

	    RETURNS
	    	True if a database connection exists, false otherwise.

	 --------------------------------------------------------------------------------------------*/
	public function  IsConnected ( )
	   {
		return ( $this -> Connection  !==  null ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		Connect - Connects to the database.

	    PROTOTYPE
	    	$database -> Connect ( $user = null, $password = null, $host = null, $port = null,
				       $database = null ) ;

	    DESCRIPTION
	    	Connects to the database using the specified user, password and host.
		If a database name is also specified, then it will be automatically selected after
		connection.

	    PARAMETERS
	    	$user (string) -
			Username to be used for connection. If null, the username will be taken from
			the DatabaseUserName property (which is set to the equivalent value from the
			Configuration.php file).

		$password (string) -
			Password. If null, the password will be taken from the DatabasePassword
			property (which is set to the equivalent value from the Configuration.php file).

		$host (string) -
			Host name to connect to (usually, "localhost"). If null, the hostname will be
			taken from the DatabaseHost property (which is set to the equivalent value
			from the Configuration.php file).

		$port (integer) -
			Port number. If null, the port number will be taken from the DatabasePort
			property (which is set to the equivalent value from the Configuration.php file).

		$database (string) -
			Database name. If specified, the database will automatically be selected.
			If null, the database name will be taken from the DatabaseName property
			(which is set to the equivalent value from the Configuration.php file).

	    RETURNS
	    	This function issues a fatal error if the connection could not be established.

	 --------------------------------------------------------------------------------------------*/
	public function  Connect ( $user = null, $password = null, $host = null, $port = null, $database = null )
	   {
		$this -> __ResetError ( ) ;

		// Check that we are not already connected
		if  ( $this -> IsConnected ( ) )
		   {
			error ( new \Thrak\System\RuntimeException ( "A connection already exists to the database." ) ) ;
			return ;
		    }

		// Take parameters either from the function parameters themselves, or from the object properties
		if  ( $user  ==  null )
			$user = $this -> DatabaseUser ;

		if  ( $password  ==  null )
			$password = $this -> DatabasePassword ;

		if  ( $host  ==  null )
			$host = $this -> DatabaseHost ;

		if  ( $port  ==  null )
			$port = $this -> DatabasePort ;

		if  ( $database  ==  null )
			$database = $this -> DatabaseName ;

		// Connect, checking for error conditions
		$this -> __ResetError ( ) ;
		$this -> Connection = $this -> DatabaseDriver -> db_connect ( $user, $password, $host, $port, $this -> PersistentConnection ) ;
		$this -> __CheckError ( ) ;
		$this -> __LogMessage ( "Connected to host \"$host\" (port=$port) with user \"$user\"" ) ;

		// If a database has been specified (or is defined in the configuration parameters), select it
		if  ( $database )
			$this -> SelectDatabase ( $database ) ;

		$this -> DatabaseVersion  =  $this -> DatabaseDriver -> db_get_version ( $this -> Connection ) ;
	    }



	/*-------------------------------------------------------------------------------------------

	    NAME
		Disconnect - Disconnects from the database.

	    PROTOTYPE
	    	$database -> Disconnect ( ) ;

	    DESCRIPTION
	    	Disconnects from the current database.

	    RETURNS
	    	This function issues a fatal error if no connection was established.

	 --------------------------------------------------------------------------------------------*/
	public function  Disconnect ( )
	   {
		$this -> __ResetError ( ) ;

		if  ( $this -> IsConnected ( ) )
		   {
			$this -> DatabaseDriver -> db_disconnect ( $this -> Connection ) ;
			$this -> Connection = null ;
			$this -> __CheckError ( ) ;
			$this -> __LogMessage ( "Disconnected from host" ) ;
	            }
		else
			error ( \RuntimeException ( "A disconnection was requested while no active database connection was available." ) ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
	    	Escape - Escapes a string value.

	    PROTOTYPE
	    	$value = $database -> Escape ( $value ) ;

	    DESCRIPTION
	    	Escapes a string value.

	    PARAMETERS
	    	$value (string) -
			Value to be escaped.

	    RETURNS
	    	The escaped value.

	 --------------------------------------------------------------------------------------------*/
	public function  Escape ( $value )
	   {
		$this -> __EnsureConnected ( ) ;
		return ( $this -> DatabaseDriver -> db_escape_value ( $this -> Connection, $value ) ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		Execute - Calls SetQuery() then LoadRows().

	    PROTOTYPE
	    	$database -> Execute ( $query ) ;

	    DESCRIPTION
		A shortcut for most common querying purposes, that return a single recordset or when
		the results are to be discarded.

	 --------------------------------------------------------------------------------------------*/
	public function  Execute ( $query )
	   {
		$this -> __EnsureConnected ( ) ;

		$this -> SetSimpleQuery ( $query ) ;
		$result		=  $this -> Query ( ) ;
		
		return ( $result ) ;
	    }
	 
	 
	/*-------------------------------------------------------------------------------------------

	    NAME
	    	GetAffectedRows - Returns the number of rows affected by an UPDATE or INSERT query.

	    PROTOTYPE
		$count = $database -> GetAffectedRows ( ) ;

	    DESCRIPTION
		Gets the number of rows affected by the last INSERT or UPDATE query.

	    RETURNS
	    	false if the last query did not affect any rows at all, or the actual number of
		affected rows.

	 --------------------------------------------------------------------------------------------*/
	public function  GetAffectedRows ( )
	   {
		$this -> __EnsureConnected ( ) ;
		$this -> __ResetError ( ) ;

		$status = $this -> DatabaseDriver -> db_get_affected_rows ( $this -> Connection ) ;

		if  ( $status  ===  false )
		   {
			if  ( $this -> EnableDatabaseDebug )
				$this -> __CheckError ( ) ;
			else
				return ( false ) ;
		    }
		else
			return ( $status ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		GetDatabases - Returns the list of defined databases.

	    PROTOTYPE
	    	$id = $database -> GetDatabases ( $wildcard ) ;

	    DESCRIPTION
	    	Returns the list of defined databases.

	 --------------------------------------------------------------------------------------------*/
	public function  GetDatabases ( $wildcard = null )
	   {
		$this -> __EnsureConnected ( ) ;

		$result		=  $this -> DatabaseDriver -> db_get_databases ( $this -> Connection, $wildcard ) ;

		return ( $result ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		GetTables - Returns a list of defined tables.

	    PROTOTYPE
	    	$id = $database -> GetTables ( $wildcard ) ;

	    DESCRIPTION
	    	Returns a list of defined tables.

	 --------------------------------------------------------------------------------------------*/
	public function  GetTables ( $database = null, $wildcard = null )
	   {
		$this -> __EnsureConnected ( ) ;

		if  ( ! $database )
			$database	=  $this -> DatabaseName ;

		$result		=  $this -> DatabaseDriver -> db_get_tables ( $this -> Connection, $database, $wildcard ) ;

		return ( $result ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		GetLastInsertId - Returns the value of the last AUTO INCREMENT field.

	    PROTOTYPE
	    	$id = $database -> GetLastInsertId ( ) ;

	    DESCRIPTION
	    	Returns the value of an AUTO INCREMENT field that has been updated by the last
		INSERT statement.

	    RETURNS
	    	Value of the last AUTO INCREMENT field.

	 --------------------------------------------------------------------------------------------*/
	public function  GetLastInsertId ( )
	   {
		$this -> __EnsureConnected ( ) ;
		$this -> __ResetError ( ) ;

		$status = $this -> DatabaseDriver -> db_get_last_insert_id ( $this -> Connection ) ;

		if  ( $status  ===  false )
		   {
			if  ( $this -> EnableDatabaseDebug )
				$this -> __CheckError ( ) ;
			else
				return ( false ) ;
		    }
		else
			return ( $status ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		GetNextRow - Gets the next row from a recordset.

	    PROTOTYPE
	    	$row = $database -> GetNextRow ( $recordset ) ;

	    DESCRIPTION
		Sometimes, a query can bring back too many rows, so that the performance of the
		LoadRows() method will be catastrophic. In that case, it is preferable to iterate
		through the recordset returned by the query. This is what this method is intended for.

		Note that you'll have to call the SetQuery() or SetSimpleQuery() first, then call the
		Query() method before.

	    RETURNS
	    	An array containing the row data as associative array if the query was successful,
		false otherwise.

	 --------------------------------------------------------------------------------------------*/
	public function  GetNextRow ( $recordset )
	   {
		$this -> __EnsureConnected ( ) ;

		if  ( $recordset  ===  false )
			return ( false ) ;

		// Get resulting row
		$row	=  $this -> DatabaseDriver -> db_fetch_next ( $this -> Connection, $recordset ) ;

		// Free the recordset
		if  ( $row ) 
			return ( $row ) ;
		else
		   {
			$this -> DatabaseDriver -> db_free_query ( $this -> Connection, $recordset ) ;
			return ( false ) ;
		    }
	    }




	/*-------------------------------------------------------------------------------------------

	    NAME
		GetRowCount - Gets the number of rows retrieved by the last statement.

	    PROTOTYPE
	    	$count = $database -> GetRowCount ( ) ;

	    DESCRIPTION
	    	Gets the number of rows retrieved by the last SELECT or SHOW SQL statements.

	    RETURNS
		Number of retrieved rows.

	 --------------------------------------------------------------------------------------------*/
	public function  GetRowCount ( )
	   {
		$this -> __EnsureConnected ( ) ;
		$this -> __ResetError ( ) ;

		$status = $this -> DatabaseDriver -> db_get_num_rows ( $this -> Connection ) ;

		if  ( $status  ===  false )
		   {
			if  ( $this -> EnableDatabaseDebug )
				$this -> __CheckError ( ) ;
			else
				return ( false ) ;
		    }
		else
			return ( $status ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		LoadRows - Loads database rows.

	    PROTOTYPE
	    	$rows = $database -> LoadRows ( $query_params = null ) ;

	    DESCRIPTION
		Executes the SQL statement specified through the SetQuery() method and returns the
		results.

	    PARAMETERS
	    	$query_params (array or single value) -
			If the query contains parameters (represented by quotation marks), the
			$query_params parameter can be used to specify the substituted value for those
			parameters. It can either be an array if the query contains multiple params,
			or a single value.
			Note that this method implied calling the db_run_query() function several
			times :
			- For assigning values to variables that will be used during statement execution
			- For preparing the SQL statement
			- For executing the statement
			- For deallocating the statement

	    RETURNS
	    	An array containing the row data as associative arrays if the query was successful,
		false otherwise.

	    NOTES
	    	If the EnableDatabaseDebug configuration parameter is set to true, then an error
		message will be displayed in case of error, and execution will be stopped.
		In the case of a parameterized query, LoadRows correcctly returns the result set built
		by the query, and not the value of the last statement (DEALLOCATE PREPARE).

	 --------------------------------------------------------------------------------------------*/
	public function  LoadRows ( $query_params = null )
	   {
		$this -> __EnsureConnected ( ) ;

		// Run the query and check the results
		$recordset  =  $this -> Query ( $query_params ) ;

		if  ( $recordset  ===  false )
			return ( false ) ;	// $EnableDatabaseDebug has already been checked in Query()

		// Get resulting rows
		$result = array ( ) ;

		while  ( $row = $this -> DatabaseDriver -> db_fetch_next ( $this -> Connection, $recordset ) )
		   {
			$result [] = $row ;
		    }

		// Free the recordset
		$status = $this -> DatabaseDriver -> db_free_query ( $this -> Connection, $recordset ) ;

		if  ( $status )
			return ( $result ) ;
		else
			return ( false ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		LoadRow - Loads one database row.

	    PROTOTYPE
	    	$rows = $database -> LoadRow ( $query_params = null ) ;

	    DESCRIPTION
		Executes the SQL statement specified through the SetQuery() method and returns the
		first row.

	    PARAMETERS
	    	$query_params (array or single value) -
			If the query contains parameters (represented by quotation marks), the
			$query_params parameter can be used to specify the substituted value for those
			parameters. It can either be an array if the query contains multiple params,
			or a single value.
			Note that this method implied calling the db_run_query() function several
			times :
			- For assigning values to variables that will be used during statement execution
			- For preparing the SQL statement
			- For executing the statement
			- For deallocating the statement

	    RETURNS
	    	An associative array containing the row data if the query was successful, false otherwise.

	    NOTES
	    	If the EnableDatabaseDebug configuration parameter is set to true, then an error
		message will be displayed in case of error, and execution will be stopped.
		In the case of a parameterized query, LoadRows correcctly returns the result set built
		by the query, and not the value of the last statement (DEALLOCATE PREPARE).

	 --------------------------------------------------------------------------------------------*/
	public function  LoadRow ( $query_params = null )
	   {
		$this -> __EnsureConnected ( ) ;

		// Run the query and check the results
		$recordset = $this -> Query ( $query_params ) ;

		if  ( $recordset  ===  false )
			return ( false ) ;	// $EnableDatabaseDebug has already been checked in Query()

		// Get resulting rows
		$result = $this -> DatabaseDriver -> db_fetch_next ( $this -> Connection, $recordset ) ;

		// Free the recordset
		$status = $this -> DatabaseDriver -> db_free_query ( $this -> Connection, $recordset ) ;

		if  ( $status )
			return ( $result ) ;
		else
			return ( false ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		LoadValue - Loads one value.

	    PROTOTYPE
	    	$value = $database -> LoadValue ( $index = null, $query_params = null ) ;

	    DESCRIPTION
		Executes the SQL statement specified through the SetQuery() method and returns the
		a value in the first row. This can be useful for queries having COUNT(*) clauses.

	    PARAMETERS
	    	$index (integer or string) -
			If the value to be retrieved is not the first in the row, $index can either
			be :
			- A positive value indicating the value index in the row or
			- A string specifying the column name

	    	$query_params (array or single value) -
			If the query contains parameters (represented by quotation marks), the
			$query_params parameter can be used to specify the substituted value for those
			parameters. It can either be an array if the query contains multiple params,
			or a single value.
			Note that this method implied calling the db_run_query() function several
			times :
			- For assigning values to variables that will be used during statement execution
			- For preparing the SQL statement
			- For executing the statement
			- For deallocating the statement

	    RETURNS
	    	The value of the desired field, or false if no record found.

	    NOTES
	    	If the EnableDatabaseDebug configuration parameter is set to true, then an error
		message will be displayed in case of error, and execution will be stopped.
		In the case of a parameterized query, LoadRows correcctly returns the result set built
		by the query, and not the value of the last statement (DEALLOCATE PREPARE).

	 --------------------------------------------------------------------------------------------*/
	public function  LoadValue ( $index  =  null, $query_params = null )
	   {
		$this -> __EnsureConnected ( ) ;

		// Run the query and check the results
		$recordset  =  $this -> Query ( $query_params ) ;

		if  ( $recordset  ===  false )
			return ( false ) ;	// $EnableDatabaseDebug has already been checked in Query()

		// Get resulting rows
		$result = $this -> DatabaseDriver -> db_fetch_next ( $this -> Connection, $recordset ) ;


		// Free the recordset
		$status = $this -> DatabaseDriver -> db_free_query ( $this -> Connection, $recordset ) ;

		if  ( $status )
		   {
			if  ( ! $result )
				return ( false ) ;	// Query returned no data

			// Check if the index is numeric or string
			if  ( $index  ===  null  ||  is_numeric ( $index ) )
			   {
				if  ( $index  ==  null )
					$index = 0 ;

				$values = array_values ( $result ) ;

				return ( $values [ $index ] ) ;
			   }
			else // string index
				return ( $result [ $index ] ) ;
		    }
		else	// Problem occurred when freeing the query
			return ( false ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		LoadValues - Loads one value.

	    PROTOTYPE
	    	$values = $database -> LoadValues ( $index = null, $query_params = null ) ;

	    DESCRIPTION
		Executes the SQL statement specified through the SetQuery() method and returns an 
		array of values. This is useful for queries that returns only one field, an id for
		example.

	    PARAMETERS
	    	$index (integer or string) -
			If the value to be retrieved is not the first in the row, $index can either
			be :
			- A positive value indicating the value index in the row or
			- A string specifying the column name

	    	$query_params (array or single value) -
			If the query contains parameters (represented by quotation marks), the
			$query_params parameter can be used to specify the substituted value for those
			parameters. It can either be an array if the query contains multiple params,
			or a single value.
			Note that this method implied calling the db_run_query() function several
			times :
			- For assigning values to variables that will be used during statement execution
			- For preparing the SQL statement
			- For executing the statement
			- For deallocating the statement

	    RETURNS
	    	An array containing the specified field values, or false if no result found.

	    NOTES
	    	If the EnableDatabaseDebug configuration parameter is set to true, then an error
		message will be displayed in case of error, and execution will be stopped.
		In the case of a parameterized query, LoadRows correctly returns the result set built
		by the query, and not the value of the last statement (DEALLOCATE PREPARE).

	 --------------------------------------------------------------------------------------------*/
	public function  LoadValues ( $index  =  null, $query_params = null )
	   {
		$this -> __EnsureConnected ( ) ;

		// Run the query and check the results
		$recordset  =  $this -> Query ( $query_params ) ;

		if  ( $recordset  ===  false )
			return ( false ) ;	// $EnableDatabaseDebug has already been checked in Query()

		$values		=  [] ;

		// Get resulting rows
		while  ( $result = $this -> DatabaseDriver -> db_fetch_next ( $this -> Connection, $recordset ) )
		   {
			// Check if the index is numeric or string
			if  ( $index  ===  null  ||  is_numeric ( $index ) )
			   {
				if  ( $index  ==  null )
					$index = 0 ;

				$row_values	=  array_values ( $result ) ;
				$values []	=  $row_values [ $index ] ;
			   }
			else // string index
				$values []	=  $result [ $index ] ;
		    }


		// Free the recordset
		$status = $this -> DatabaseDriver -> db_free_query ( $this -> Connection, $recordset ) ;

		// Return array if values were found and query has been successfully freed
		if  ( $status )
		   {
			if  ( count ( $values ) )
				return ( $values ) ;
			else
				return ( false ) ;
		    }
		else	// Problem occurred when freeing the query
			return ( false ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
	    	Query - Executes a query.

	    PROTOTYPE
		$result = $database -> Query ( $query_params = null, $discard_results = false ) ;

	    DESCRIPTION
	    	Executes the SQL statement specified during the last call to SetQuery() and returns
		the results.

	    PARAMETERS
	    	$query_params (array or single value) -
			If the query contains parameters (represented by quotation marks), the
			$query_params parameter can be used to specify the substituted value for those
			parameters. It can either be an array if the query contains multiple params,
			or a single value.
			Note that this method implied calling the db_run_query() function several
			times :
			- For assigning values to variables that will be used during statement execution
			- For preparing the SQL statement
			- For executing the statement
			- For deallocating the statement

		$discard_results (boolean) -
			When true, the result sets returned by the query will be discarded.

	    RETURNS
	    	Either a status or a set of retrieved rows.

	    NOTES
	    	. The statement specified during the last SetQuery() call, and stored in the SQLQuery
		  property, is preprocessed before running ; any references to the '##' token is
		  replaced by the value specified in the DatabaseTablePrefix property of the
		  Database object, or in the Configuration.php file.
		. A statement can hold several SQL statements separated with a semicolon. If an error
		  occurs while executing one of those statements, the whole process stops and an error
		  is returned.
		. If no active connection is available, the function will issue a fatal error.
		. Each statement will be logged, if the EnableDatabaseLogging property is set to true.
		. If the EnableDatabaseDebug property is set to true, a fatal error will be issued if
		  an error occurs on one of the SQL statements.
		. If the EnableQueryTimings property is set to true, then :
		  . Execution times will be logged in the database log file (if the EnableDatabaseLogging
		    parameter is set to true)
		  . Execution times will be made available in the QueryTimings array ; Each entry in
		    this array has two keys :
		    'statement' (string) -
		    	SQL statement that has been measured.
		    'elapsed' (float) -
		    	Elapsed time. A human-readable form of this value can be obtained by using the
			Timer::AsString() function.
		. In the case of a parameterized query, LoadRows correcctly returns the result set built
		  by the query, and not the value of the last statement (DEALLOCATE PREPARE).
		. Parameterized queries will also try to use the THRAK_PARAMETERIZED_QUERY_x stored
		  procedure whenever possible, as long as 'x' is between 1 and 12.

	 --------------------------------------------------------------------------------------------*/
	public function  Query ( $query_params = null, $discard_results = false )
	   {
		$this -> __EnsureConnected ( ) ;
		$this -> __ResetError ( ) ;
		$recordset = false ;

		// Check if a connection exists
		if  ( ! $this -> IsConnected ( ) )
		   {
			error ( new \Thrak\System\RuntimeException ( "Tried to run a SQL query but no connection to the database currently exists. SQL code is :<br/>" .
			        $this -> SQLQuery ) ) ;
			return ( false ) ;
		    }

		// Since we are allowing for running several SQL statements, split them
		$statements = $this -> __ExplodeStatements ( $this -> SQLQuery ) ;

		// Process individual statements
		foreach ( $statements  as  $statement )
		   {
			// Preprocess the statement (to add a LIMIT clause for example)
			$sql = $this -> DatabaseDriver -> db_preprocess_statement ( $this -> Connection, $statement ) ;

			// If needed, activate a timer
			if  ( $this -> EnableQueryTimings )
				$timer = new Timer ( true ) ;

			// Run the query
			if   ( $query_params  )		// Parameterized query
			   {
				if  ( ! is_array ( $query_params ) )
					$query_params = array ( $query_params ) ;

				$count			=  count ( $query_params ) ;
				$pnames 		=  array ( ) ;		// Array of parameter names
				$assignments 		=  array ( ) ;		// Array of parameter assignments (in the form : name = value)
				$index  		= 0 ;

				// If the parameter count is <= 12, then use one of our stored procedures
				if  ( $count  <  12 )
				   {
					$call 		=  "CALL THRAK_PARAMETERIZED_QUERY_$count ( " ;
					$params		=  array ( ) ;
					$sql		=  "'" . $this -> DatabaseDriver -> db_escape_value ( $this -> Connection, $statement ) . "'" ;

					foreach  ( $query_params  as  $query_param )
						$array [] = "'" . $this -> DatabaseDriver -> db_escape_value ( $this -> Connection, $query_param ) . "'" ;

					$call .= "$sql, " . implode ( ', ', $array ) . ')' ;
					$recordset = $this -> DatabaseDriver -> db_run_query ( $this -> Connection, $call ) ;
				    }
				// Otherwise use a more expensive method
				else
				   {
					// Loop through each parameter, escaping special characters from values
					foreach  ( $query_params  as  $query_param )
					   {
						$pname  	=  "@QP$index" ;
						$pvalue 	=  $this -> DatabaseDriver -> db_escape_value ( $this -> Connection, $query_param ) ;
						$pnames [] 	=  $pname ;
						$assignments []	=  "$pname = '$pvalue'" ;

						$index ++ ;
					    }

					// Set parameter values
					$this -> DatabaseDriver -> db_run_query ( $this -> Connection, "SET " . implode ( ',', $assignments ) ) ;

					// Prepare the SQL statement
					$this -> DatabaseDriver -> db_run_query ( $this -> Connection, "PREPARE  QS  FROM  '$statement'" ) ;

					// Execute it ; this is the point where we get the resulting recordset
					$recordset = $this -> DatabaseDriver -> db_run_query ( $this -> Connection, "EXECUTE  QS  USING " . implode ( ',', $pnames ) ) ;

					// Then deallocate the statement
					$this -> DatabaseDriver -> db_run_query ( $this -> Connection, "DEALLOCATE PREPARE  QS" ) ;
				    }
			    }
			else				// Non parameterized query
			   {
				$recordset =  $this -> DatabaseDriver -> db_run_query ( $this -> Connection, $sql ) ;
			    }

			// Track timing information
			if  ( $this -> EnableQueryTimings )
			   {
				$timer -> Stop ( ) ;
				$elapsed	=  $timer -> Elapsed ( ) ;
				$this -> QueryTimings [] = array ( 'statement' => $sql, 'elapsed' => $elapsed ) ;
			    }

			// Log query status message if needed
			if  ( $recordset )
				$extra = "[OK]" ;
			else
				$extra = "[FAILED]" ;

			$this -> __LogMessage ( "SQL Query $extra : $sql" ) ;

			if  ( $this -> EnableQueryTimings )
				$this -> __LogMessage ( "Elapsed time: " . $elapsed ) ;

			// Count one more query
			$this -> QueryCount ++ ;

			// Check query result
			if  ( ! $recordset )
			   {
				// If the EnableDatabaseDebug flag is set to true, all failing queries will generate an error
				if  ( $this -> EnableDatabaseDebug )
					$this -> __CheckError ( true ) ;
				else
					return ( false ) ;
			    }
		    }

		// If we arrive here, this is a sign that everything worked well
		if  ( $discard_results )
		   {
			if  ( $recordset )
				$this -> DatabaseDriver -> db_free_query ( $recordset ) ;
		    }

		return ( $recordset ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
	    	SelectDatabase - Selects a database for further SQL statements.

	    PROTOTYPE
	    	$status = $database -> SelectDatabase ( $database = null ) ;

	    DESCRIPTION
	    	Selects the specified database for running future SQL statements.

	    PARAMETERS
	    	$database (string) -
			Database to be selected. If this parameter is null, then the database name will
			be taken from the DatabaseName property (which comes from the Configuration.php
			file).

	    RETURNS
	    	This function issues a fatal error if no connection is available, or the database does
		not exists.

	 --------------------------------------------------------------------------------------------*/
	public function  SelectDatabase ( $database = null )
	   {
		$this -> __EnsureConnected ( ) ;

		if  ( $database  ==  null )
			$database = $this -> DatabaseName ;

		$this -> DatabaseDriver -> db_select_database ( $this -> Connection, $database ) ;
		$this -> __CheckError ( ) ;
		$this -> DatabaseName = $database ;
		$this -> __LogMessage ( "Using database : \"$database\"" ) ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		SetQuery - Prepares a query.

	    PROTOTYPE
	    	$database -> SetQuery ( $sql, $limit = 0, $offset = 0, $prefix = '##' ) ;
	    	$database -> SetSimpleQuery ( $sql ) ;

	    DESCRIPTION
		Prepares a query for execution by the Query() method.
		The SetSimpleQuery() method does not try to analyze input query string for replacing
		prefixes.

	    PARAMETERS
	    	$sql (string) -
			SQL statement to be run.

		$limit (integer) -
			If the query generates many records, the $limit parameter can be used to
			restrict the number of rows returned. This parameter will be ignored if it is
			less than 1.

		$offset (integer) -
			(used in conjunction with $limit) This parameter specifies the number of the
			row, within the result set, where to start with.

		$prefix (string) -
			Every occurrence of $prefix in the $sql string will be replaced with the
			prefix specified by the DatabaseTablePrefix property (which comes from the
			Configuration.php file). Prefixes are not subsituted when they reside in a
			quoted string within the SQL statement.

	 --------------------------------------------------------------------------------------------*/
	public function  SetQuery ( $sql, $limit = 0, $offset = 0, $prefix = '##' )
	   {
		$this -> __EnsureConnected ( ) ;

		$this -> SQLQuery 	= $this -> __ReplacePrefix ( $sql, $prefix, $this -> DatabaseTablePrefix ) ;
		$this -> QueryLimit 	=  ( integer ) $limit ;
		$this -> QueryOffset	=  ( integer ) $offset ;
	    }


	public function  SetSimpleQuery ( $sql ) 
	   {
		$this -> __EnsureConnected ( ) ;

		$this -> SQLQuery 	=  $sql ;
		$this -> QueryLimit 	=  0 ;
		$this -> QueryOffset	=  0 ;
	    }


	/*-------------------------------------------------------------------------------------------

	    NAME
		SetCallQuery - Prepares a CALL PROCEDURE query.

	    PROTOTYPE
	    	$database -> SetCallQuery ( $procedure, $parameters, $limit = 0, $offset = 0, $prefix = '##' ) ;

	    DESCRIPTION
		Prepares a CALL PROCEDURE query for execution by the Query() method.

	    PARAMETERS
	    	$procedure (string) -
			SQL procedure to be run.

		$parameters (array or any) -
			Procedure parameters. If only one parameter is required, this parameter can
			be a single value.

		$limit (integer) -
			If the query generates many records, the $limit parameter can be used to
			restrict the number of rows returned. This parameter will be ignored if it is
			less than 1.

		$offset (integer) -
			(used in conjunction with $limit) This parameter specifies the number of the
			row, within the result set, where to start with.

		$prefix (string) -
			Every occurrence of $prefix in the $sql string will be replaced with the
			prefix specified by the DatabaseTablePrefix property (which comes from the
			Configuration.php file). Prefixes are not subsituted when they reside in a
			quoted string within the SQL statement.

	    NOTES
	    	The very first parameter of the called procedure must be the database prefix string and
	    	is automatically added by this function.

	 --------------------------------------------------------------------------------------------*/
	public function  SetCallQuery ( $procedure, $parameters = null, $limit = 0, $offset = 0, $prefix = '##' )
	   {
		$this -> __EnsureConnected ( ) ;

		$sql 		=  "CALL $procedure ( " ;
		$values		=  array ( "'" . $this -> DatabaseTablePrefix . "'" ) ;

		if  ( $parameters  ==  null )
			$parameters = array ( ) ;
		else if  ( ! is_array ( $parameters ) )
			$parameters = array ( $parameters ) ;

		foreach  ( $parameters  as  $parameter )
		   {
			$parameter = $this -> __ReplacePrefix ( $parameter, $prefix, $this -> DatabaseTablePrefix ) ;
			$values [] = "'" . $this -> DatabaseDriver -> db_escape_value ( $this -> Connection, $parameter ) . "'" ;
		    }

		$sql .= implode ( ', ', $values ) . " )" ;
		$this -> SQLQuery 	=  $sql ;

		$this -> QueryLimit 	=  ( integer ) $limit ;
		$this -> QueryOffset	=  ( integer ) $offset ;
	    }
	    
	    
	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Truncate - Truncates a table.
	 
	    PROTOTYPE
	        $count	=  $database -> Truncate ( $table_name ) ;
	 
	    DESCRIPTION
	        Truncates a table and returns the number of deleted rows.
	 
	    PARAMETERS
	        $table_name (string) -
	                Name of the table to be truncated.
	 
	    RETURN VALUE
	        Returns the number of deleted rows.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Truncate ( $table_name )
	   {
		$this -> __EnsureConnected ( ) ;

		$this -> SetQuery ( "SELECT COUNT(*) FROM $table_name" ) ;
		$count	=  $this -> LoadValue ( ) ;
		
		$this -> Execute ( "TRUNCATE TABLE $table_name" ) ;
		
		return ( $count ) ;
	    }
    }

 