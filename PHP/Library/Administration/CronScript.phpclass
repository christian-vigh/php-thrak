<?php
/**************************************************************************************************************

    NAME
        CronScript.phpclass

    DESCRIPTION
         simple class framework to ease the development of cron scripts using the Thrak framework.
	 A cron script must implement a class deriving from this one and implement the Run() abstract method,
	 such as in :

		 class  MyScript extends CronScript
		    {
			private  $Definitions = '<command> </command>' ;

			public function  __construct ( )
			   {
				parent::__construct ( $this -> Definitions ) ;
			    }


			public function  Run ( $CL )
			   {
				// do something....
			    }
		     }

		$script		=  new MyScript ( ) ;
		$script -> Run ( ) ;

    AUTHOR
        Christian Vigh, 11/2015.

    HISTORY
    [Version : 1.0]	[Date : 2015/11/07]     [Author : CV]
        Initial version.

    [Version : 1.0]	[Date : 2015/11/07]     [Author : CV]
	. Added running platform support.

 **************************************************************************************************************/
namespace	Thrak\Administration ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;


// Used namespaces & objects
use	Thrak\Administration\CrontabConfiguration ;
use	Thrak\System\Object ;
use     Thrak\IO\Path ;
use	Thrak\Types\String ;
use	Thrak\Processors\CL\CLParser ;
use	Thrak\Processors\CL\CLException ;
use     Thrak\Processors\IniFile ;


/*==============================================================================================================

    CronScript -
        Provides a framework for developing cron scripts using the Thrak framework.

  ==============================================================================================================*/
abstract class  CronScript		extends  Object
   {
	static		$StandardParameters		=  <<<END
		<file name="configuration_file, cf" disposition="existing" required="true">
			Path of a crontab.ini configuration file.
		</file>

		<string name="job, j">
			Specifies the job name for this script, as defined in the configuration file.
		</string>
END;

	// Command-line object
	protected	$CL ;
	// General Configuration file & data
	protected	$ConfigurationFile ;
	protected	$ConfigurationData ;
	// Script Configuration file & data
	protected	$JobConfigurationFile	=  false ;
	protected	$JobConfigurationData	=  false ;
	// Script-related data
	protected	$Script ;				// Full script path
	protected	$JobName ;				// Script name, either passed to the constructor or taken from the filename part of the script path
	protected	$Pid ;					// Current pid
	protected	$InvokedByCron ;			// True if the CRONJOB environment variable exists
	protected	$JobData ;				// Job data coming from configuration file
	// Log file
	protected	$Logfile		=  null ;
	// Administrator email
	protected	$AdministratorEmail	=  null ;
	// Debug level (false means no debugging messages at all)
	protected	$DebugLevel		=  false ;


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Constructor
	 
	    PROTOTYPE
	        $script		=  new CronScript ( $definitions, $args = false ) ;
	 
	    DESCRIPTION
	        Every cron script that wants to use the thrak environment must inherit from this class.
		The constructor establishes a well-prepared environment for running the host script.
	 
	    PARAMETERS
	        $definitions (string) -
	                Xml definitions for the script command-line parameters (CL).
			Two additional parameters are systematically added :
			-configuration_file path :
				Path of the crontab.ini file.
			-job name :
				Name of the crontab job, as defined in the crontab.ini file.

		$args (array of strings) -
			Command-line arguments. If not specified, the global $argv variable will be used.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $definitions, $args = false )
	   {
		global		$ScriptVariables, $argv ;

		if  ( $args  ===  false )
			$args	=  $argv ;

		// Put the default CronScript parameter definitions inside the supplied ones
		$re				=  '#(</command>|</command-line>|</options>|</parameters>|</switches>)#ix' ;
		$definitions			=  preg_replace ( $re, "\n" . self::$StandardParameters . "\n\n" . '\1', $definitions ) ;
		$this -> CL			=  new CLParser ( $definitions, $args ) ;

		// Save data related to this script 
		$this -> ConfigurationFile	=  $this -> CL -> configuration_file ;
		$this -> Script			=  Path::ToUnix ( Path::RealPath ( $argv [0] ) ) ;
		$this -> JobName		=  ( $this -> CL -> job ) ?  $this -> CL -> job : pathinfo ( $this -> Script, PATHINFO_FILENAME ) ;

		// Get cron job info (specially logfile path)
		$this -> ConfigurationData	=  new CrontabConfiguration ( $this -> ConfigurationFile, $ScriptVariables ) ;
		$this -> JobData		=  $this -> ConfigurationData -> FindJob ( $this -> JobName ) ;

		if  ( ! $this -> JobData )
			error ( new \Thrak\System\RuntimeException ( "Could not find entry \"{$this -> JobName}\" in crontab.ini file \"{$this -> ConfigurationFile}\"" ) ) ;

		// Check that it runs on the current platform
		if  ( IS_UNIX  &&  $this -> JobData [ 'platform' ]  ==  CrontabConfiguration::PLATFORM_WINDOWS )
			error ( new \Thrak\System\RuntimeException ( "Job \"{$this -> JobName}\" in crontab.ini file \"{$this -> ConfigurationFile}\"" .
					"runs only on Windows platforms" ) ) ;
		else if  ( IS_WINDOWS  &&  $this -> JobData [ 'platform' ]  ==  CrontabConfiguration::PLATFORM_UNIX )
			error ( new \Thrak\System\RuntimeException ( "Job \"{$this -> JobName}\" in crontab.ini file \"{$this -> ConfigurationFile}\"" .
					"runs only on Unix platforms" ) ) ;

		// Job-specific configuration file
		$this -> JobConfigurationFile	=  $this -> JobData [ 'configuration-file' ] ;

		if  ( $this -> JobData [ 'configuration-file' ] ) 
			$this -> JobConfigurationData	=  IniFile::LoadFromFile ( $this -> JobData [ 'configuration-file' ] ) ;

		// Job data information that can be put at the Script object level
		$this -> JobData [ 'logfile' ]	=  $this -> JobData [ 'logfile' ] ;
		$this -> Logfile		=  $this -> JobData [ 'logfile' ] ;
		$this -> AdministratorEmail	=  $this -> JobData [ 'administrator-email' ] ;

		// Check if process title needs to be changed
		$this -> Pid			=  getmypid ( ) ;

		if  ( $this -> JobData [ 'process-title' ] )
			cli_set_process_title ( $this -> JobData [ 'process-title' ] . ' ' . implode ( ' ', $args ) ) ;

		// Other environment data
		$this -> InvokedByCron		=  ( getenv ( 'CRONJOB' )  !==  false ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Log, DebugLog, Fatal - Logs a message.
	 
	    PROTOTYPE
	        $script -> Log ( $message ) ;
	 
	    DESCRIPTION
	        Logs a message to the logfile that has been specified for the cron job in the crontab.ini file.
	 
	    PARAMETERS
	        $message (string) -
	                Message to be logged.
	 
	    NOTES
	        Nothing is done if no logfile is specified for the script cron entry.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Log ( $message )
	   {
		if  ( $this -> Logfile )
		   {
			$log_message	=  date ( 'Y-m-d H:i:s' ) . ' ' .
					   $this -> JobName .
					   '[' . $this -> Pid . '] ' .
					   $message .
					   "\n" ;

			$fp		=  fopen ( $this -> Logfile, "a" ) ;
			fputs ( $fp, $log_message ) ;
			fclose ( $fp ) ;
		    }
	    }


	public function  ErrorLog ( $message, $severity = 'error' )
	   {
		$this -> Log ( "$severity: $message" ) ;
		$this -> Log ( "Process terminated." ) ;
		exit ( ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Run - Run the script.
	 
	    PROTOTYPE
	        $script -> Run ( ) ;
	 
	    DESCRIPTION
	        This is the main entry point for running the script code. This method must be implemented by the
		derived script class.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	abstract public function  Run ( ) ;
    }