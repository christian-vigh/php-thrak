<?php
/**************************************************************************************************************

    NAME
        Includer.php

    DESCRIPTION
        Includer classes for Javascript & CSS files.

    AUTHOR
        Christian Vigh, 10/2013.

    HISTORY
    [Version : 1.0]	[Date : 2013/10/14]     [Author : CV]
        Initial version.

    [Version : 1.0.1]	[Date : 2015/10/07]     [Author : CV]
	. Added support for url parameters to file inclusions.

    [Version : 1.0.2]	[Date : 2015/10/19]     [Author : CV]
	. Added support for Javascript and Css on-the-fly minification.

    [Version : 1.0.3]	[Date : 2015/10/25]     [Author : CV]
	. The $theme parameter of the UseJQuery() method is now optional.

    [Version : 1.1.0]	[Date : 2015/10/26]     [Author : CV]
	. Added support for file inclusion in css and javascript files. Files can be included using the
	  following constructs :

	  . In javascript :
		//# include ( "file" )
	  . In both javascript and css :
		/*# include ( "file" ) * /
	    Note that there can be any number of "*" and spaces after the starting comment delimiter and the
	    ending one. 
	    
	  As a general case, spaces are not signifificant in these constructs.
	  Keywords are the same as in PHP : include, include_once, require, require_once.

 **************************************************************************************************************/
namespace 	Thrak\Javascript ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

// Used namespaces & objects
use 	Thrak\System\Object ;
use	Thrak\IO\Path ;
use	Thrak\Types\String ;


/*==============================================================================================================

    ClientIncluder -
        Base abstract class for client-side file inclusion (CSS, Javascript, etc.).

  ==============================================================================================================*/
abstract class  ClientSideIncluder  extends Object
   {
	// Minification types
	const		COMPRESSION_NONE		=  0 ;			// No minification occurs
	const		COMPRESSION_FILE		=  1 ;			// Files are minified on-the-fly if modified
	const		COMPRESSION_GROUP		=  2 ;			// Groups of files are minified into a single file, if modified


	// Include paths, provided to the class constructor.
	// When a file is included using the methods of this class, the following happens :
	// - If the file name starts with '#', the path will be evaluated relatively to $THRAK_ROOT. No include path
	//   list will be searched.
	// - If a file starts with '/', it will be evaluated relatively to $SITE_ROOT. No include path list will be
	//   used.
	// - If a file is relative, then it will be first searched in te current directory, then into each of the 
	//   directories specified in the include path list.
	// - Of course, URLs are supported
	// Note that directories in the include path list can also contain absolute ('#', '/') and relative paths.
	protected	$IncludePaths		=  array ( ) ;
	
	// Real include paths, after expanding input paths to their absolute filesystem notation.
	protected	$RealIncludePaths	=  array ( ) ;
	
	// Files included so far.
	protected	$IncludedFiles		=  array ( ) ;

	// Minification type and class
	protected	$CompressionType ;

	// To be set by derived classes 
	protected	$CompressionClass ;				// Minifier class
	protected	$CompressionExtension ;				// Output extension

	// Buffered include files
	protected	$BufferedIncludes	=  [] ;

	// Regex to match for a file inclusion construct
	protected	$InclusionRegex		=  [] ;
	private		$InclusionKeywords	=  
	   [ 
		'include'	=>  'IncludeFile',
		'include_once'	=>  'IncludeFileOnce',
		'require'	=>  'RequireFile',
		'require_once'	=>  'RequireFileOnce'
	    ] ;

	
	/*==============================================================================================================

	    CONSTRUCTOR
		Initializes the IncludePaths array and expands these path references to absolute filesystem file paths.

	    PROTOTYPE
		public function  __construct ( array  $include_paths  =  array ( ) ) ;

	    DESCRIPTION
		Instanciates a ClientSideIncluder object.

	    PARAMETERS
		$include_paths (array) -
			List of directories to add to the include path.

	  ==============================================================================================================*/
	public function  __construct ( array  $include_paths = array ( ), $compression )
	   {
		parent::__construct ( ) ;
		
		foreach  ( $include_paths  as  $include_path )
			$this -> AddIncludePath ( $include_path ) ;

		// Determine compression type
		switch  ( strtolower ( $compression ) )
		   {
			case	'minify' :
			case	'file' :
			case	'1' :
				$this -> CompressionType	=  self::COMPRESSION_FILE ;
				break ;

			case	'group' :
				$this -> CompressionType	=  self::COMPRESSION_GROUP ;
				break ;
				
			case	'none' :
			default :
				$this -> CompressionType	=  self::COMPRESSION_NONE ;
		    }
	    }

	    
	/*==============================================================================================================
	
	    __get_client_side_path -
	        Returns the absolute client-side path for a specified file.
	
	  ==============================================================================================================*/
	private function  __get_client_side_path ( $path, &$real_file, &$query )
	   {
		// If the path is an URL, return it as is
		if  ( strpos ( $path, "://" )  !==  false  ||  substr ( $path, 0, 2 )  ==  '//' )
		   {
			$real_file	=  $path ;
			$query		=  '' ;
			
			return ( true ) ;
		    }

		// Remove any url parameters
		$parts		=  parse_url ( $path ) ;
		$file		=  $parts [ 'path' ] ;
		$real_file	=  false ;
		$query		=  ( isset ( $parts [ 'query' ] ) ) ?  '?' . $parts [ 'query' ] : '' ;

		// If file exists, nothing to do...
		if  ( file_exists ( $file ) )
		   {
			$real_file	=  $file ;
			
			return ( true ) ;
		    }
			
		// Try to locate the file locally
		$absfile	=  Path::RealPath ( $file ) ;

		if  ( file_exists ( $absfile ) ) 
		   {
			$real_file	=  $absfile ;

			return ( true ) ;
		    }
		
		// Other cases : we need to go through the include path list
		foreach  ( $this -> RealIncludePaths  as  $directory )
		   {
			$test_file	=  Path::ToUnix ( $directory . "/" . $file ) ;


			if  ( file_exists ( $test_file ) )
			   {
				$real_file	=  Path::ToUnix ( substr ( $test_file, strlen ( $_SERVER [ 'DOCUMENT_ROOT' ] ) ) ) ;

				return ( true ) ;
			    }
		    }
		    
		// File not found...
		return ( false ) ;
	    }
	    
	    
	/*==============================================================================================================
	
	    __is_remote, __is_minified -
	        Checks if a file is compressable (ie, resides on the local file system and do not have the .min 
		extension.
	
	  ==============================================================================================================*/
	private function  __is_remote ( $file )
	   {
		if  ( strpos ( $file, "://" )  !==  false  ||  substr ( $file, 0, 2 )  ==  '//' )
			return ( true ) ;

		return ( false ) ;
	    }


	private function  __is_minified ( $file )
	   {
		if  ( String::EndsWith ( $file, ".min." . pathinfo ( $file, PATHINFO_EXTENSION ) ) )
			return ( true ) ;

		return ( false ) ;
	    }


	/*==============================================================================================================
	
	    __compress_file -
	        Returns the path to the minified version of the specified file, minifies it if needed.
	
	  ==============================================================================================================*/
	private function  __compress_file ( $file )
	   {
		if  ( $this -> __is_remote ( $file )  ||  $this -> __is_minified ( $file ) )
			return ( $file ) ;

		$input		=  $_SERVER [ 'DOCUMENT_ROOT' ] . $file ;
		$output		=  Path::PrependExtension ( $input, "min" ) ;
		$create		=  true ;

		if  ( file_exists ( $output ) )
		   {
			if  ( filemtime ( $output )  >=  filemtime ( $input ) )
				$create		=  false ;
		    }

		if  ( $create )
		   {
			$class		=  $this -> CompressionClass ;
			$minifier	=  new  $class ( ) ;
			$minifier -> MinifyFileTo ( $output, $input ) ;
		    }

		$output	=  Path::ToUnix ( substr ( $output, strlen ( $_SERVER [ 'DOCUMENT_ROOT' ] ) ) ) ;

		return ( $output ) ;
	    }


	/*==============================================================================================================
	
	    __process_dependencies -
	        Scans the specified include file for additional file inclusions using one of the following constructs :

		//# include		( "file" )
		//# include_once	( "file" )
		//# require		( "file" )
		//# require_once	( "file" )
	
	  ==============================================================================================================*/
	private function  __process_dependencies ( $file, $return ) 
	   {
		$matches	=  [] ;
		$contents	=  file_get_contents ( $file ) ;
		$result		=  '' ;

		foreach  ( $this -> InclusionRegex  as  $regex )
		   {
			if  ( preg_match_all ( $regex, $contents, $file_matches ) )
			   {
				$matches []	=  $file_matches ;
			    }
		    }

		if  ( count ( $matches ) )
		   {
			foreach  ( $matches  as  $match )
			   {
				$index	=  0 ;

				foreach  ( $match [ 'keyword' ]  as  $keyword )
				   {
					$keyword	=  strtolower ( $keyword ) ;

					if  ( isset ( $this -> InclusionKeywords [ $keyword ] ) )
					   {
						$method		 =  $this -> InclusionKeywords [ $keyword ] ;
						$result		.=  $this -> $method ( $match [ 'file' ] [ $index ], $return ) ;
					    }

					$index ++ ; 
				    }
			    }
		    }

		if  ( $return )
			return ( $result ) ;
	    }


	/*==============================================================================================================
	
	    SetInclusionRegex -
		Defines the regular expressions that can be used for match file inclusion constructs.
		Each regex in the supplied array must contain the #KEYWORDS# construct, which will be replaced with 
		the authorized file inclusion keywords.

	  ==============================================================================================================*/
	protected function  SetInclusionRegex ( $array )
	   {
		foreach  ( $array  as  $item )
		   {
			$regex	=  str_replace ( '#KEYWORDS#', '(?P<keyword> ( ' .
					implode ( ' | ', array_keys ( $this -> InclusionKeywords ) ) . ' ) )',
					$item ) ;

			$this -> InclusionRegex []	=  $regex ;
		    }
	     }


	/*==============================================================================================================
	
	    NAME
	        AddIncludePath - Adds a directory to the include path list.
	
	    PROTOTYPE
	        $cs -> AddIncludePath ( string  $directory ) ;
	
	    DESCRIPTION
	        Adds the specified directory to the include path list. 
		No warning or error will be issued if the directory does not exist.
		Note that if the directory is already present in the list, it will not be added a second time.
	
	    PARAMETERS
	        $directory (string) -
	                Directory to be added to the include path.
			
	    RETURNS
		True if the directory has been added, false otherwise.
	
	  ==============================================================================================================*/
	public function  AddIncludePath  ( $directory )
	   {
		if  ( in_array ( $directory, $this -> IncludePaths ) )
			return ( false ) ;
		
		$real_directory			=  Path::RealPath ( $directory ) ;
		$this -> IncludePaths []	=  $directory ;
		$this -> RealIncludePaths []	=  $real_directory ;
	    }
	    
	    
	/*==============================================================================================================
	
	    NAME
	        GetIncludePath, SetIncludePath - Mimics the behavior of get_include_path/set_include_path.
	
	    PROTOTYPE
	        $str	=  $object -> GetIncludePath ( ) ;
		$object -> SetIncludePath ( $str ) ;
	
	    DESCRIPTION
	        GetIncludePath() returns the include path as a string separated by the PATH_SEPARATOR character.
		SetIncludePath() takes an include path list separated by the PATH_SEPARATOR character and overrides any
		existings entries if the path list by the provided one.
	
	    PARAMETERS
	        $str (string) -
	                Include path, ie a string consisting of a list of directories separated by the PATH_SEPARATOR
			character.
	
	    RETURN VALUE
	        GetIncludePath() returns the include path.
		
	  ==============================================================================================================*/
	public function  GetIncludePath ( )
	   {
		$list		=  implode ( PATH_SEPARATOR, $this -> IncludePaths ) ;
		
		return ( $list ) ;
	    }
	    
	    
	public function  SetIncludePath ( string  $path )
	   {
		$list				=  explode ( PATH_SEPARATOR, $path ) ;
		$this -> IncludePaths		=  array ( ) ;
		$this -> RealIncludePaths	=  array ( ) ;
		
		foreach  ( $list  as  $item )
			$this -> AddIncludePath ( $item ) ;
	    }
	    
	    
	/*==============================================================================================================
	
	    NAME
	        IncludeFile, IncludeFileOnce, RequireFile, RequireFileOnce -
			Equivalents of the PHP functions that have (approximately) the same name.
	
	    PROTOTYPE
	        $object -> IncludeFile		( string  $file ) ;
		$object -> IncludeFileOnce	( string  $file ) ;
		$object -> RequireFile		( string  $file ) ;
		$object -> RequireFileOnce	( string  $file ) ;
	
	    DESCRIPTION
	        Implement the equivalent functions.
		- IncludeFile will include the file and display a warning if it has already been included or if it does
		  not exist.
		- IncludeFileOnce will include the file if it has not already been included. It will display a warning
		  if the file does not exist.
		- RequireFile and RequireFileOnce behave the same way, except that they generate an error instead of a
		  warning.
	
	    PARAMETERS
	        $file (string) -
	                File to be included.

	    NOTES
		All these functions finally call the abstract DoInclude function, which must be implemented by descendent
		classes.
		
	  ==============================================================================================================*/
	protected abstract function	DoInclude ( $file, $return = false ) ;
	
	
	private function  __do_include ( $file, $error, $once, $return )
	   {
		$errfunc	=  ( $error ) ?  'error' : 'warning' ;
		$status 	=  $this -> __get_client_side_path ( $file, $include, $query ) ;
		$result		=  '' ;

		if  ( ! $status )
		   {
			$errfunc ( "Unable to locate include file \"$file\"." ) ;
			return ( false ) ;		// If $error is false, a warning will be issued, so we need to return an error condition
		    }
		    
		// Check if this file has not already been included
		if  ( in_array ( $include, $this -> IncludedFiles ) )
		   {
			if  ( ! $once )
			   {
				$errfunc ( "File \"$file\" has already been included." ) ;
				return ( false ) ;
			    }
		    }

		// Check if minified version is needed
		if  ( $this -> CompressionType  !=  self::COMPRESSION_NONE )
			$include	=  $this -> __compress_file ( $include ) ;

		// If inclusion failed for some reason (either file missing or already included), then insert a comment
		// documenting that
		if  ( $include  ===  false )
		   {
			$error	=  "<!-- FAILED TO INCLUDE FILE : $file -->\n" ;
			
			if  ( $return ) 
				return ( $error ) ;
			else
			   {
				output ( $error ) ;
				return ( false ) ;
			    }
		    }

		if  ( ! $this -> __is_remote ( $include ) )
			$result		=  $this -> __process_dependencies ( $_SERVER [ 'DOCUMENT_ROOT' ] . $include, $return ) ;

		// If group compression is active, buffer the filename until the Flush() method is called
		if  ( $this -> CompressionType  ==  self::COMPRESSION_GROUP  &  ! $this -> __is_remote ( $include ) )
		   {
			$dir	=  dirname ( $include ) ;

			$this -> BufferedIncludes [ $dir ] []	=  
			   [ 
				'file'		=>  substr ( $include, strlen ( $dir ) + 1 ), 
				'query'		=>  $query 
			    ] ;
		    }
		// Otherwise, perform the inclusion
		else
		   {
			$final_path	=  $include . $query ;

			if  ( $return )
			   {
				$result .=  $this -> DoInclude ( $final_path, true ) ;

				output ( "************" . htmlentities ( $result ) . "****************\n" ) ;
				return ( $result ) ;
			    }
			else
			   {
				output ( $result ) ;
				$this -> DoInclude ( $final_path, false ) ;
			    }
		    }
	    }
	    
	    
	public function  IncludeFile ( $file, $return = false ) 
	   { $this -> __do_include ( $file, false, false, $return ) ; }
	    
	public function  IncludeFileOnce ( $file, $return = false ) 
	   { $this -> __do_include ( $file, false, true, $return ) ; }
	    
	public function  RequireFile ( $file, $return = false ) 
	   { $this -> __do_include ( $file, true, false, $return ) ; }
	    
	public function  RequireFileOnce ( $file, $return = false ) 
	   { $this -> __do_include ( $file, true, true, $return ) ; }
	   
	   
	/*==============================================================================================================
	
	    NAME
	        Flush - Flushes include commands.
	
	    PROTOTYPE
	        $includer -> Flush ( ) ;
	
	    DESCRIPTION
		When the configuration key Javascript/compression contains the keyword 'group', all files residing in 
		the same directory and having the same type (css or js) will be minified and catenated into the same file.
		The http request will reference only this "grouped" file.
		If the javascript/compression key does not contain the keyword group, nothing will happen.	
		
	  ==============================================================================================================*/
	public function  Flush ( )
	   {
		if  ( $this -> CompressionType  !=  self::COMPRESSION_GROUP ) 
			return ;

		$inclusions	=  [] ;

		// The __do_include() function, which is used for every file inclusion, has buffered included file list
		// until this Flush() method is called
		foreach  ( $this -> BufferedIncludes  as  $base_path => $entries )
		   {
			// Separate inclusions with and without query parameters
			// Inclusions with queries will be declared last, even if they belong to the first included files
			// Conclusion : reserve you query parameters for your site's files, because they won't be able to
			// rely on previously included files without query parameters
			$no_query_entries	=  [] ;
			$entries_with_queries	=  [] ;

			foreach  ( $entries  as  $entry )
			   {
				if (  $entry [ 'query' ] )
					$entries_with_queries []	=  $base_path . '/' . $entry [ 'file' ] . $entry [ 'query' ] ;
				else
					$no_query_entries []		=  $base_path . '/' . $entry [ 'file' ] ;
			    }

			/*** Process query with no parameters ***/
			// Only one entry for this base path : don't bother creating a ".*-group*" file
			if  ( count  ( $no_query_entries )  ==  1 )
				$inclusions []	=  $this -> DoInclude ( $no_query_entries [0], true ) ;
			// Otherwise, create it
			else
			    {
				$output_file	=  $base_path . '/.' . $this -> CompressionExtension . '-group.' .
							md5 ( implode ( '!', $no_query_entries ) ) . '.' . $this -> CompressionExtension ;
				$abs_output	=  $_SERVER [ 'DOCUMENT_ROOT' ] . $output_file ;
				$create		=  false ;

				// Group file exists : check if it is newer than any involved source file
				if (  file_exists ( $abs_output ) )
				   {
					$output_mtime	=  filemtime ( $abs_output ) ;

					foreach  ( $no_query_entries  as  $entry )
					   {
						if  ( filemtime ( $_SERVER [ 'DOCUMENT_ROOT' ] . $entry )  >  $output_mtime )
						   {
							$create		=  true ;
							break ;
						    }
					    }
				    }
				else
					$create		=  true ;

				// Group file does not exist or is out of date : regenerate it 
				if  ( $create )
				   {
					$contents	=  '' ;

					foreach  ( $no_query_entries  as  $entry )
					   {
						$contents	.=  '<!-- ' . $entry . ' -->' . "\n" .
									rtrim ( file_get_contents ( $_SERVER [ 'DOCUMENT_ROOT' ] . $entry ) ) . "\n" ;
					    }

					file_put_contents ( $abs_output, $contents ) ;
				    }

				// Then include it
				$inclusions []	=  $this -> DoInclude ( $output_file, true ) ;
			    }

			/*** Process queries with parameters ***/
			foreach  ( $entries_with_queries  as  $entry )
				$inclusions []	=  $this -> DoInclude ( $entry, true ) ;
		    }

		// All done, we can echo the html code
		echo ( implode ( '', $inclusions ) ) ;
	    }
    }    
    
    
/*==============================================================================================================

    CSS class includer -
        File includer for CSS files.

  ==============================================================================================================*/
class  CSSIncluder	extends ClientSideIncluder
   {
	/*==============================================================================================================
	
		Calls constructor. Initializes the instance using the 'Environment/css-include-path' as the list of 
		include directories.
		
	  ==============================================================================================================*/
	public function  __construct ( )
	   {
		global		$Configuration ;
		
		$this -> CompressionClass	=  '\Thrak\Processors\Minifiers\CssMinifier' ;
		$this -> CompressionExtension	=  'css' ;

		parent::__construct 
		   ( 
			$Configuration -> Get ( 'Environment/css-include-path' ),
			$Configuration -> Get ( 'Javascript/compression/css' ) 
		    ) ;

		$this -> SetInclusionRegex
		   ([
			'/
				\/ \*
				[*\s]*
				\# \s*
				#KEYWORDS#
				\s* \( \s*
				["\'] (?P<file> [^"\']+) ["\']
				\s* \)
				[\s*]*
				\* \/
			 /imsx'
		     ]) ;
	    }
	    

	/*==============================================================================================================
	
		DoInclude -
			Implementation of the abstract DoInclude function. Outputs the HTML code to really include the
			file.
			
	  ==============================================================================================================*/
	protected function  DoInclude ( $file, $return = false ) 
	   {
		$result		=  "<link rel='stylesheet' type='text/css' href='$file'>\n" ;

		if  ( $return )
			return ( $result ) ;
		else
			echo ( $result ) ;
	    }

	    
	/*==============================================================================================================
	
	    NAME
	        IncludeJQueryUITheme - Includes a JQuery UI theme.
	
	    PROTOTYPE
	        $CSSIncluder -> IncludeJQueryUITheme ( $theme, $min = true, $custom = true ) ;
	
	    DESCRIPTION
	        Includes the specified JQuery UI theme.
	
	    PARAMETERS
	        $theme (string) -
	                Theme name.
			
		$min (boolean) -
			When true, the minified version will be included.
			
		$custom (boolean) -
			When true, the custom version will be used.
	
	    NOTES
	        . JQuery themes are stored in directory thrak://Javascript/contribs/jquery/css/themes.
		. A customized and minified version will have a name of the form :
		
			thrak://Javascript/contribs/jquery/css/themes/{theme}/jquery-ui-{version}.custom.min.css
			
		  while the standard, non-minified file will have a name of the form :
	
			thrak://Javascript/contribs/jquery/css/themes/{theme}/jquery-ui-{version}.css
			
		  where {theme} is the theme name, and {version} its version, taken from the Thrak or Site configuration
		  file.
		. If the file does not exist on the server, no HTML instruction will be added in the output.
			
	  ==============================================================================================================*/
	private function  __get_css_path ( $theme, $key, $min = true, $custom = true )
	   {
		global	$Configuration ;

		$minified	=  $Configuration -> Get ( "Javascript/$key/minified", $min ) ;
		$custom		=  $Configuration -> Get ( "Javascript/$key/custom", $custom ) ;
		$location	=  $Configuration -> Get ( "Javascript/$key/location" ) ;
		$version	=  $Configuration -> Get ( "Javascript/$key/version" ) ;
		
		$location	=  str_replace ( "%v", $version, $location ) ;
		$location	=  str_replace ( "%t", $theme, $location ) ;
		
		if  ( $minified )
			$location	=  str_replace ( "%m", "min", $location ) ;
		else
			$location	=  str_replace ( ".%m", "", $location ) ;
			
		if  ( $custom )
			$location	=  str_replace ( "%c", "custom", $location ) ;
		else
			$location	=  str_replace ( ".%c", "", $location ) ;

		return ( $location ) ;
	    }
	    
	    
	public function  IncludeJQueryUITheme ( $theme, $min = true, $custom = true, $return = false ) 
	   {
		$location	=  $this -> __get_css_path ( $theme, 'jquery-ui-themes', $min, $custom ) ;
		
		if  ( $location )
			$this -> IncludeFileOnce ( $location, $return ) ;
	    }
    }
    
    
/*==============================================================================================================

    JS class includer -
        File includer for CSS files.

  ==============================================================================================================*/
class  JSIncluder	extends ClientSideIncluder
   {
	/*==============================================================================================================
	
		Calls constructor. Initializes the instance using the 'Environment/js-include-path' as the list of 
		include directories.
		
	  ==============================================================================================================*/
	public function  __construct ( )
	   {
		global		$Configuration ;
		

		$this -> CompressionClass	=  '\Thrak\Processors\Minifiers\JavascriptMinifier' ;
		$this -> CompressionExtension	=  'js' ;

		parent::__construct 
		   ( 
			$Configuration -> Get ( 'Environment/js-include-path' ),
			$Configuration -> Get ( 'Javascript/compression/js' ) 
		    ) ;

		$this -> SetInclusionRegex
		   ([
			'/
				\/ \*
				[*\s]*
				\# \s*
				#KEYWORDS#
				\s* \( \s*
				["\'] (?P<file> [^"\']+) ["\']
				\s* \)
				[\s*]*
				\* \/
			 /imsx',
			'/
				\/ \/
				\s*
				\# \s*
				#KEYWORDS#
				\s* \( \s*
				["\'] (?P<file> [^"\']+) ["\']
				\s* \)
			 /imsx'
		     ]) ;
	    }
	    
	    
	/*==============================================================================================================
	
		DoInclude -
			Implementation of the abstract DoInclude function. Outputs the HTML code to really include the
			file.
			
	  ==============================================================================================================*/
	protected function  DoInclude ( $file, $return = false ) 
	   {
		$result		=  "<script language='javascript' src='$file'></script>\n" ;
		
		if  ( $return )
			return ( $result ) ;
		else
			echo ( $result ) ;
	    }
	    
	
	/*==============================================================================================================
	
	    NAME
	        IncludeJQuery, IncludeJQuery - Includes a JQuery or JQuery UI javascript file.
	
	    PROTOTYPE
	        $JSIncluder -> IncludeJQuery ( $min = true ) ;
	
	    DESCRIPTION
	        Includes the specified JQuery javascript source.
	
	    PARAMETERS
		$min (boolean) -
			When true, the minified version will be included.
	
	    NOTES
		. A minified version will have a name of the form :
		
			thrak://Javascript/contribs/jquery/jquery-{version}.min.js
			
		  while the standard, non-minified file will have a name of the form :
	
			thrak://Javascript/contribs/jquery/jquery-{version}.js
			
		  where {version} is the JQuery or JQuery UI version, taken from the Thrak or Site configuration file.
		. If the file does not exist on the server, no HTML instruction will be added in the output.
			
	  ==============================================================================================================*/
	private function  __get_javascript_path ( $key, $min = true )
	   {
		global	$Configuration ;

		$location	=  $Configuration -> Get ( "Javascript/$key/location" ) ;
		$version	=  $Configuration -> Get ( "Javascript/$key/version" ) ;
		$minified	=  $Configuration -> Get ( "Javascript/$key/minified", $min ) ;
		
		$location	=  str_replace ( "%v", $version, $location ) ;
		
		if  ( $minified )
			$location	=  str_replace ( "%m", "min", $location ) ;
		else
			$location	=  str_replace ( ".%m", "", $location ) ;
			
		return ( $location ) ;
	    }
	    
	    
	public function  IncludeJQuery ( $min = true, $return = false ) 
	   {
		$location	=  $this -> __get_javascript_path ( 'jquery', $min ) ;
		
		if  ( $location )
			$this -> IncludeFileOnce ( $location, $return ) ;
	    }

	    
	public function  IncludeJQueryUI ( $min = true, $return = false ) 
	   {
		$location	=  $this -> __get_javascript_path ( 'jquery-ui', $min ) ;
		
		if  ( $location )
			$this -> IncludeFileOnce ( $location, $return ) ;
	    }
	    
	    
	public function  UseJQuery ( $theme = false, $min = true, $custom = true, $return = false )
	   {
		global		$CSSIncluder ;
		
		if  ( $return )
		   {
			$result		=  $this -> IncludeJQuery ( $min, true ) . 
					   $this -> IncludeJQueryUI ( $min, true )  ;

			if  ( $theme )
				$result		.=  $CSSIncluder -> IncludeJQueryUITheme ( $theme, $min, $custom, true ) ;
			
			return ( $result ) ;
		    }
		else
		   {
			$this -> IncludeJQuery ( $min ) ;
			$this -> IncludeJQueryUI ( $min ) ;

			if  ( $theme ) 
				$CSSIncluder -> IncludeJQueryUITheme ( $theme, $min, $custom ) ;
		    }
	    }
    }    