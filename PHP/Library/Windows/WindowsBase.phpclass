<?php
/**************************************************************************************************************

    NAME
        WindowsBase.phpclass

    DESCRIPTION
        Abstract class for classes using Windows features.

    AUTHOR
        Christian Vigh, 10/2014.

    HISTORY
    [Version : 1.0]	[Date : 2014/10/07]     [Author : CV]
        Initial version.

    [Version : 1.1]	[Date : 2015/11/30]     [Author : CV]
	. Added the FromVariant() method.

 **************************************************************************************************************/
namespace 	Thrak\Windows ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

use  	Thrak\System\Object ;


/*==============================================================================================================

	Exception classes.

  ==============================================================================================================*/
class	WindowsException  extends  \Thrak\System\RuntimeException { }


/*==============================================================================================================

    AbstractWindowsBase class -
        Abstract class for classes using Windows features.
	This class is mainly meant to provide safeguards regarding the execution environment, and ensure that
	we are running on a Windows platform.

  ==============================================================================================================*/
class  AbstractWindowsBase	extends  Object
   {
	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Constructor
	
	    DESCRIPTION
	        Ensures that we are running on a Windows platform.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( ) 
	   {
		parent::__construct ( ) ;
		
	   	if  ( ! IS_WINDOWS )
	   		error ( new WindowsException ( "WShell objects can only be created on a Windows platform." ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	       FromVariant - converts a Variant to PHP data.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	protected function  FromVariant ( $variant ) 
	   {
		if  ( ! is_a ( $variant, "variant" ) )
			return ( $variant ) ;

		$variant_type	=  variant_get_type ( $variant ) ;		// Get variant type
		$is_array	=  ( $variant_type  &  VT_ARRAY ) ;		// Check if array
		$is_ref		=  ( $variant_type  &  VT_BYREF ) ;		// Check if reference (not used)
		$variant_type  &=  ~( VT_ARRAY | VT_BYREF ) ;			// Keep only basic type flags
		$items		=  array ( ) ;					// Return value
		
		// If variant is an array, get all array elements into a PHP array
		if  ( $is_array )
		   {
			foreach  ( $variant  as  $variant_item )
				$items []	=  $variant_item ;
		    }
		else
			$items []	=  $variant ;
		
		$item_count	=  count ( $items ) ;
		
		// Loop through array items (item count will be 1 if supplied variant is not an array)
		for  ( $i = 0 ; $i  <  $item_count ; $i ++ )
		   {
			$item	=  $items [$i] ;
			
			// Handle scalar types
			switch  ( $variant_type )
			   {
				case	VT_NULL :
					$items [$i]	=  null ;
					break ;
				
				case	VT_EMPTY :
					$items [$i]	=  false ;
					break ;
			
				case    VT_UI1 :	case	VT_UI2 :	case	VT_UI4 :	case	VT_UINT :
				case    VT_I1  :	case	VT_I2  :	case	VT_I4  :	case	VT_INT  :
					$items [$i]	=  ( integer ) $item ;
					break ;
				
				case	VT_R4 :
					$items [$i]	=  ( float ) $item ;
					break ;
				
				case	VT_R8 :
					$items [$i]	=  ( double ) $item ;
					break ;
					
				case	VT_BOOL :
					$items [$i]	=  ( boolean ) $item ;
					break ;
					
				case	VT_BSTR :
					$items [$i]	=  ( string )  $item ;
					break ;
					
				case    VT_VARIANT :
					if  ( $is_array )
						break ;
					else
						/* Intentionally fall through the default: case */ ;
				
				default :
					warning ( "Unexpected variant type $variant_type." ) ;
					$items [$i]	=  false ;
			    }
		    }
		
		return ( ( $is_array ) ?  $items : $items [0] ) ;
	    }

    }
    