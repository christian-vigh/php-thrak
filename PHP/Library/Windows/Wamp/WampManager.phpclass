<?php
/**************************************************************************************************************

    NAME
        WampManager.phpclass

    DESCRIPTION
        An object for managing the Wamp manager.

    AUTHOR
        Christian Vigh, 11/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/11/13]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Windows\Wamp ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

use  	Thrak\System\Object ;
use	Thrak\IO\Path ;
use	Thrak\Windows\AbstractWindowsBase ;
use	Thrak\Windows\LogicalDrives ;
use	Thrak\Windows\WShell ;
use	Thrak\Windows\Wmi ;
use	Thrak\Windows\Wamp\PhpPackages ;
use	Thrak\Windows\Wamp\ApachePackages ;
use	Thrak\Windows\Wamp\MySqlPackages ;


define ( 'WAMPMANAGER_EXECUTABLE'		,  'WampManager.exe' ) ;
define ( 'WAMPMANAGER_CONFIGURATION'		,  'WampManager.conf' ) ;
define ( 'WAMPMANAGER_LOCAL_CONFIGURATION'	,  'WampServer.conf' ) ;

class	WampException		extends		\Thrak\System\Exception  {} ;


/*===========================================================================================

    WampManager class -
	Provides facilities to control WampManager.

  ===========================================================================================*/
class  WampManager extends AbstractWindowsBase
   {
	// When a task or a service is being started or stopped, the Windows process or service list
	// is polled every TASK_CHECK_INTERVAL milliseconds, until either one of the following happens :
	// - The task or service has effectively started
	// - TASK_CHECK_MAX retries have been performed. In this case, an exception will be thrown.
	const	TASK_CHECK_MAX			=  500 ;
	const	TASK_CHECK_INTERVAL		=  20 ;			// milliseconds

	// Installation directory
	public		$InstallationDirectory ;
	// WampManager configuration
	public		$WampManagerConfiguration ;
	// Wamp packages
	public		$PhpPackages ;
	public		$MySqlPackages ;
	public		$ApachePackages ;
	// Wamp executable
	public		$WampExecutable ;
	// WShell and Wmi objects
	public		$WShell ;
	public		$Wmi ;
	

	/*--------------------------------------------------------------------------------------------------------------
	 
	    Constructor -
	        Loads any needed information about current WAMP manager configuration.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( )
	   {
		parent::__construct ( ) ;

		// Instanciate a Shell and a Wmi object
		$this -> WShell		=  new WShell ( ) ;
		$this -> Wmi		=  new Wmi ( ) ;

		// Try to locate installation directory
		$this -> __locate_installation_directory ( ) ;

		// Load the wampmanager configuration file
		$this -> WampManagerConfiguration	=  array_change_key_case ( 
								parse_ini_file ( $this -> InstallationDirectory . '\\' . WAMPMANAGER_CONFIGURATION, true ),
								CASE_LOWER ) ;

		foreach  ( $this -> WampManagerConfiguration  as  $key => $array )
			$this -> WampManagerConfiguration [ $key ]	=  array_change_key_case ( $array ) ;

		// Collect the apache, mysql and php versions installed
		$this -> PhpPackages	=  new PhpPackages	( $this ) ;
		$this -> ApachePackages =  new ApachePackages	( $this ) ;
		$this -> MySqlPackages	=  new MySqlPackages	( $this ) ;

		// Other data
		$this -> WampExecutable		=  $this -> InstallationDirectory . '\\' . WAMPMANAGER_EXECUTABLE ;
	    }


	/*--------------------------------------------------------------------------------------------------------------

	    Getter -
		Implements the following properties :
		- Apache	:  returns an object describing the active Apache version.
		- MySql		:  returns an object describing the active MySql version.
		- Php		:  returns an object describing the active Php version.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __get ( $member )
	   {
		switch  ( strtolower ( $member ) )
		   {
			case	'apache'	:  return ( $this -> ApachePackages -> GetActivePackage ( ) ) ;
			case	'mysql'		:  return ( $this -> MySqlPackages  -> GetActivePackage ( ) ) ;
			case	'php'		:  return ( $this -> PhpPackages    -> GetActivePackage ( ) ) ;

			default :
				error ( new \Thrak\System\UndefinedPropertyException ( $member ) ) ;
		    }
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    AwaitTask, AwaitService -
	        Waits for the specified task/service to be started.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  AwaitTask ( $taskname, $started )
	   {
		$count		=  0 ;
		$query		=  "SELECT * FROM Win32_Process WHERE name = '$taskname'" ;
		$processes	=  $this -> Wmi -> Query ( $query ) ;

		do
		   {
			if  ( count ( $processes ) )
			   {
				if  ( $started ) 
					return ( $processes [0] -> ProcessId ) ;
			    }
			else
			   {
				if  ( ! $started )
					return ( true ) ;
			    }

			$processes	=  $this -> Wmi -> Query ( $query ) ;
			$count ++ ;

		    }  while  ( $count  <  self::TASK_CHECK_MAX ) ;

		error ( new WampException ( "Timeout occurred when trying to start task \"$taskname\"." ) ) ;
	    }


	public function  AwaitService ( $servicename, $up )
	   {
		$count		=  0 ;
		$query		=  "SELECT * FROM Win32_Service WHERE name = '$servicename'" ;
		$services	=  $this -> Wmi -> Query ( $query ) ;

		do
		   {
			if  ( count ( $services ) )
			   {
				$running	=  ! strcasecmp ( $services [0] -> State, 'Running' ) ;
				
				if  ( $up )
				   {
					if  ( $running )
						return ( $services [0] -> ProcessId ) ;
				    }
				else
				   {
					if  ( ! $running )
						return ( false ) ;
				    }
			    }

			$services	=  $this -> Wmi -> Query ( $query ) ;
			$count ++ ;

		    }  while  ( $count  <  self::TASK_CHECK_MAX ) ;

		error ( new WampException ( "Timeout occurred when trying to start task \"$servicename\"." ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    Restart -
	        Restarts the WampManager.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Restart ( )
	   {
		$existing_pid	=  $this -> Terminate ( ) ;
		$new_pid	=  $this -> Start ( ) ;

		return ( [ $new_pid, $existing_pid ] ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    Start -
	        Starts the WampManager.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Start ( )
	   {
		$query		=  "SELECT * FROM Win32_Process WHERE name = '" . WAMPMANAGER_EXECUTABLE . "'" ;
		$processes	=  $this -> Wmi -> Query ( $query ) ;

		if  ( $processes ) 
		   {
			warning ( "WampManager is already running." ) ;
			return ( false ) ;
		    }

		$this -> WShell -> Exec ( $this -> WampExecutable ) ;
		$pid	=  $this -> AwaitTask ( WAMPMANAGER_EXECUTABLE, true ) ;

		return ( $pid ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    Terminate -
	        Terminates the WampManager.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Terminate ( )
	   {
		$query		=  "SELECT * FROM Win32_Process WHERE name = '" . WAMPMANAGER_EXECUTABLE . "'" ;
		$processes	=  $this -> Wmi -> Query ( $query ) ;

		if  ( $processes ) 
		   {
			$process	=  $processes [0] ;
			$pid		=  $process -> ProcessId ;

			exec ( "TASKKILL /T /F /PID $pid 2>&1", $junk ) ;
			$this -> AwaitTask ( WAMPMANAGER_EXECUTABLE, false ) ;

			return ( $pid ) ;
		    }
		else 
			return ( false ) ;
	    }
	

	/**************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 ******                                       PRIVATE METHODS                                            ******
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 **************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************/

	// __locate_installation_directory -
	//	Tries to locate the wamp installation directory. Of course, defining a WAMPDIR environment variable
	//	will help a lot...
	private function  __locate_installation_directory ( )
	   {
		$dir	=  getenv ( "WAMPDIR" ) ;
		$dirs	=  [] ;

		if  ( $dir  ===  false )
			$dirs	=  $this -> __search_installation_directories ( ) ;
		else
		   {
			if  ( $this -> __validate_installation_directory ( $dir ) )
				$dirs []	=  $dir ;
		    }

		$dircount	=  count ( $dirs ) ;

		if  ( $dircount  ==  0 )
			error ( "Wamp was not found on this system ; please define the WAMPDIR environment variable to point to " .
				"a valid installation directory." ) ;
		else if ( $dircount  >  1 )
		   {
			$message	=  "Wamp has been found in more than one directory :\n" ;

			foreach  ( $dirs  as  $wampdir )
				$message	.=  "\t- $wampdir\n" ;

			$message	=  "Please define the WAMPDIR environment variable to specify the correct Wamp installation directory." ;

			error ( $message ) ;
		    }

		$this -> InstallationDirectory	=  $dirs [0] ;
	    }


	// __search_installation_directories -
	//	Searches for a "wamp*" directory in every possible fixed drive.
	private function  __search_installation_directories ( )
	   {
		$drives		=  new LogicalDrives ( ) ;
		$result		=  [] ;

		foreach  ( $drives  as  $drive )
		   {
			if  ( ! $drive -> IsLocalDisk ( ) )
				continue ;

			$files	= glob ( $drive -> Name . '\\*wamp*' ) ;
			
			foreach  ( $files  as  $file )
			   {
				if  ( ! is_dir ( $file ) )
					continue ;
				
				if (  ! $this -> __validate_installation_directory ( $file ) )
					continue ;

				$result []	=  $file ;
			    }
		    }

		return ( $result ) ;
	    }


	// __validate_installation_directory -
	//	Verifies that the specified directory contains a valid wampmanager version, including apache, php and mysql.
	//	At that point, we can only make assumptions on their respective executable filenames, since wampmanager.conf
	//	has not yet been loaded.
	private function  __validate_installation_directory ( $path )
	   {
		$checkings	=
		   [
			[ 'file' => 'wampmanager.conf'					],
			[ 'file' => 'wampmanager.exe'					],
			[ 'file' => 'bin/php/php*/php.exe'				],
			[ 'file' => 'bin/mysql/mysql*/bin/mysqld.exe'			],
			[ 'file' => 'bin/apache/apache*/bin/httpd.exe'			],
			[ 'file' => 'bin/php/php*/' . WAMPMANAGER_LOCAL_CONFIGURATION	],
			[ 'file' => 'bin/mysql/mysql*/wampserver.conf'			],
			[ 'file' => 'bin/apache/apache*/wampserver.conf'		]
		    ] ;

		foreach  ( $checkings  as  $entry )
		   {
			$entry_path	=  $path . '/' . $entry [ 'file' ] ;
			$files		=  glob ( $entry_path ) ;
			
			if  ( ! count ( $files ) )
				return ( false ) ;
		    }

		return ( true ) ;
	    }


	// __get_wamp_data -
	//	Collects all Wamp data.
	public function  __zzget_wamp_data ( )
	   {
		// Get Wamp installation directory from environment variable
		$directory	=  getenv ( "WAMPDIR" ) ;
		
		if  ( ! $directory )
			error ( new \Thrak\System\RuntimeException ( "The WAMPDIR environment variable must be set to point at a valid WAMP installation directory." ) ) ;
		
		$directory	=  Path::AppendDS ( $directory ) ;
		
		// Check if a WampManager.Exe executable exists
		$wampmanager_path	=  $directory . WAMPMANAGER_EXECUTABLE ;
		
		if  ( ! file_exists ( $wampmanager_path ) )
			error ( new \Thrak\System\RuntimeException ( "The Wamp manager executable ($wampmanager_path) does not exist in the current installation directory $directory." ) ) ;
		
		$this -> Configuration [ 'wamp' ] [ 'executable' ]	=  $wampmanager_path ;
		
		// Verify that we have bin/apache, mysql and php directories
		if  ( ! is_dir ( "{$directory}bin/apache" ) )
			error ( new \Thrak\System\RuntimeException ( "The Wamp installation directory ($directory) does not contain a subdirectory for apache." ) ) ;

		if  ( ! is_dir ( "{$directory}bin/php" ) )
			error ( new \Thrak\System\RuntimeException ( "The Wamp installation directory ($directory) does not contain a subdirectory for php." ) ) ;

		if  ( ! is_dir ( "{$directory}bin/mysql" ) )
			error ( new \Thrak\System\RuntimeException ( "The Wamp installation directory ($directory) does not contain a subdirectory for mysql." ) ) ;
		
		$global_wampmanager_conf	=  "{$directory}wampmanager.conf" ;
		
		if  ( ! file_exists ( $global_wampmanager_conf ) )
			error ( new \Thrak\System\RuntimeException ( "The global wampmanager.conf file does not exist in the Wamp installation directory ($global_wampmanager_conf)." ) ) ;
		
		$this -> Configuration [ 'wamp' ] [ 'install-dir' ]			=  Path::AppendDS ( $directory ) ;
		$this -> Configuration [ 'wamp' ] [ 'bin' ]				=  
		$module_dir								=  $directory . "bin/" ;
		$this -> Configuration [ 'wamp' ] [ 'wampmanager.conf' ]		=  $global_wampmanager_conf ;
		$this -> Configuration [ 'wamp' ] [ 'wampmanager.conf.contents' ]	=  parse_ini_file ( 
			$this -> Configuration [ 'wamp' ] [ 'wampmanager.conf' ], true ) ;
		
		// Loop through each installed version of each module (php, apache, mysql)
		foreach ( array ( 'apache', 'php', 'mysql' )  as  $module )
		   {
			$subdirs							=  glob ( "$module_dir$module/*" ) ;
			$this -> Configuration [ $module ] [ 'current-version' ]	=  false ;
			
			foreach  ( $subdirs  as  $subdir )
			   {
				$module_name						=  basename ( $subdir ) ;
				$this -> Configuration [ $module ] [ $module_name ]	=  array ( ) ;
				
				// Extract information for this module (php, apache or mysql) and its version
				$module_entry				=  & $this -> Configuration [ $module ] [ $module_name ] ;
				$module_entry [ 'version' ]		=  substr ( $module_name, strlen ( $module ) ) ;
				$module_entry [ 'is-current-version' ]	=  ( $this -> Configuration [ 'wamp' ] [ 'wampmanager.conf.contents' ] [ $module ] [ $module . 'Version' ]  ==  $module_entry [ 'version' ] ) ?
										true : false ;
				$module_entry [ 'last-known-version' ]	=  $this -> Configuration [ 'wamp' ] [ 'wampmanager.conf.contents' ] [ $module ] [ $module . 'LastKnown' ] ;
				$module_entry [ 'path' ]		=  $subdir ;
				$wampserver_conf			=  "$subdir/wampserver.conf" ;
				
				if  ( $module_entry [ 'is-current-version' ] )
					$this -> Configuration [ $module ] [ 'current-version' ]	=  $module_name ;
				
				// A module appears in the Wampmanager configuration only if there is a wampserver.conf file in it
				// (example : php/php5.6.1/wampserver.conf)
				if  ( file_exists ( $wampserver_conf ) )
				   {
					$module_entry [ 'included-by-wamp' ]	=  true ;
					$module_entry [ 'wampserver.conf' ]	=  Path::ToUnix ( Path::RealPath ( $wampserver_conf ) ) ;
					
					// Read the values from the wampserver.conf file, which are regular php variable definitions
					// Here are samples :
					//
					// For apache :
					//	$apacheConf['apacheExeDir'] = 'bin';
					//	$apacheConf['apacheConfDir'] = 'conf';
					//	$apacheConf['apacheExeFile'] = 'httpd.exe';
					//	$apacheConf['apacheConfFile'] = 'httpd.conf';
					//	$apacheConf['apacheServiceInstallParams'] = '-n wampapache64 -k install';
					//	$apacheConf['apacheServiceRemoveParams'] = '-n wampapache64 -k uninstall';
					// 
					// For mysql :
					//	$mysqlConf['mysqlConfDir'] = '.';
					//	$mysqlConf['mysqlConfFile'] = 'my.ini';
					//	$mysqlConf['mysqlExeDir'] = 'bin';
					//	$mysqlConf['mysqlExeFile'] = 'mysqld.exe';
					//	$mysqlConf['mysqlServiceInstallParams'] = '--install-manual wampmysqld64';
					//	$mysqlConf['mysqlServiceRemoveParams'] = '--remove wampmysqld64';
					//	$mysqlConf['libMysqlFile'] = 'bin/libmySQL.dll';
					//
					// For php (grrr ! why chosing the 'phpIniDir' name instead of 'phpConfDir' like for mysql and apache ? and why
					// is the 'phpExeFile' entry missing ?) :
					//	$phpConf['phpIniDir'] = '.';
					//	$phpConf['phpExeDir'] = '.';
					//	$phpConf['phpConfFile'] = 'php.ini';
					//
					//	$phpConf['apache']['2.2']['LoadModuleName'] = 'php5_module';
					//	$phpConf['apache']['2.2']['LoadModuleFile'] = 'php5apache2_2.dll';
					//	$phpConf['apache']['2.2']['AddModule'] =  '';
					//
					//	$phpConf['apache']['2.4']['LoadModuleName'] = 'php5_module';
					//	$phpConf['apache']['2.4']['LoadModuleFile'] = 'php5apache2_4.dll';
					//	$phpConf['apache']['2.4']['AddModule'] =  '';
					require ( $wampserver_conf ) ;
					
					// A few adjustments for php
					if  ( $module  ==  'php' )
					   {
						$phpConf [ 'phpConfDir' ]	=  $phpConf [ 'phpIniDir' ] ;
						
						if  ( ! isset ( $phpConf [ 'phpExeFile' ] ) )
							$phpConf [ 'phpExeFile' ]	=  "php.exe" ;
					    }
					
					// Refrence to the array definition loaded from wampmanager.conf
					$array_variable		=  $module . "Conf" ;
					$module_array		=  &$$array_variable ;
					
					// Array keys
					$confdir_key		=  $module . "ConfDir" ;
					$conffile_key		=  $module . "ConfFile" ;
					$exedir_key		=  $module . "ExeDir" ;
					$exefile_key		=  $module . "ExeFile" ;
					$service_install_key	=  $module . "ServiceInstallParams" ;
					$service_uninstall_key	=  $module . "ServiceRemoveParams" ;
					
					// Get conf/exe directories and files
					$module_entry [ 'configuration-directory' ]	=  
						Path::ToUnix ( Path::Realpath ( $subdir . '/' . $module_array [ $confdir_key ] ) ) ;
					$module_entry [ 'configuration-file' ]		=  
						Path::ToUnix ( Path::Realpath ( $module_entry [ 'configuration-directory' ] . '/' .
							$module_array [ $conffile_key ] ) ) ;
					$module_entry [ 'executable-directory' ]	=  
						Path::ToUnix ( Path::Realpath ( $subdir . '/' . $module_array [ $exedir_key ] ) ) ;
					$module_entry [ 'executable-file' ]		=  
						Path::ToUnix ( Path::Realpath ( $module_entry [ 'executable-directory' ] . '/' .
							$module_array [ $exefile_key ] ) ) ;
					
					// Mysql and apache run as service
					if  ( isset ( $module_array [ $service_install_key ] ) )
					   {
						$module_entry [ 'run-as-service' ]	=  true ;
						$module_entry [ 'service-install' ]	=  $module_array [ $service_install_key ] ;
						$module_entry [ 'service-uninstall' ]	=  $module_array [ $service_uninstall_key ] ;
						
						// Key name for the service name in root wampmanager.conf
						$keyname	=  'Service' . ucfirst ( $module ) ;
						$module_entry [ 'service-name' ]	=  
							$this -> Configuration [ 'wamp' ] [ 'wampmanager.conf.contents' ] [ 'service' ] [ $keyname ] ;
					    }
					else
						$module_entry [ 'run-as-service' ]	=  false ;
				    }
				else
				   {
					$module_entry [ 'included-by-wamp' ]	=  false ;
				    }
					
				
			    }
		    }
	    }
    }
