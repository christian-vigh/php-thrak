<?php
/**************************************************************************************************************

    NAME
        ApachePackage.php

    DESCRIPTION
        Implements a PHP package currently installed in Wamp.

    AUTHOR
        Christian Vigh, 11/2015.

    HISTORY
    [Package : 1.0]    [Date : 2015/11/15]     [Author : CV]
        Initial Package.

 **************************************************************************************************************/
namespace 	Thrak\Windows\Wamp ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

use  	Thrak\System\Object ;
use	Thrak\Windows\Wamp\WampService ;


/*==============================================================================================================

    ApachePackage class -
        Holds configuration data for one installed PHP Package.

  ==============================================================================================================*/
class  ApachePackage		extends  WampService
   {
	public function  __construct ( $name, $parent, $path, $version )
	   {
		parent::__construct 
		   ( 
			$name, $parent, $path, $version, 
			$parent -> GetConfigurationValue ( 'service', 'serviceapache' ),
			$parent -> GetConfigurationValue ( 'apache', 'apacheexedir' ),	
			$parent -> GetConfigurationValue ( 'apache', 'apacheexefile' ),
			$parent -> GetConfigurationValue ( 'apache', 'apacheconfdir' ),
			$parent -> GetConfigurationValue ( 'apache', 'apacheconffile' )
		    ) ;
	    }


	public function  GetConfigurationFiles ( )
	   {
		$conffiles	=  [ $this -> ConfigurationFile ] ;
		$lines		=  file ( $this -> ConfigurationFile ) ;

		foreach  ( $lines  as  $line )
		   {
			if  ( preg_match ( '/^ \s* include \s+ (?P<file> [^\s]+)/imsx', $line, $match ) )
			   {
				$file		=  $match [ 'file' ] ;
				$dir		=  basename ( $this -> ConfigurationDirectory ) ;
				$dirlen		=  strlen ( $dir ) ;

				if  ( ! strncmp ( $file, "$dir/", $dirlen + 1 ) )
					$file	=  substr ( $file, $dirlen + 1 ) ;

				$conffiles []	=  $this -> GetAbsolutePath ( $file ) ;
			    }
		    }

		return ( $conffiles ) ;
	    }
    }
