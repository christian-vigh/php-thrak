<?php
/**************************************************************************************************************

    NAME
        WebSecurity.phpclass

    DESCRIPTION
        Implements basic security mechanisms.

    AUTHOR
        Christian Vigh, 11/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/11/10]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Web ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

// Used namespaces & objects
use 	Thrak\System\Object ;
use	Thrak\IO\Path ;
use	Thrak\Security\HttpRequestTracker ;
use	Thrak\Security\BlacklistedDomainTracker ;
use	Thrak\Security\BlacklistedEmailTracker ;
use	Thrak\Security\ErrorHandlers ;
use	Thrak\Security\WaitErrorHandler ;
use	Thrak\Security\HttpPageErrorHandler ;


/*==============================================================================================================

    WebSecurity class -
        Implements basic security mechanisms.

  ==============================================================================================================*/
class	WebSecurity		extends  Object
   {
	// Indicates whether http requests should be tracked or not
	public		$TrackHttpRequests ;
	// Indicates whether blacklisted domains and emails should be checked or not
	public		$TrackedBlacklistedDomains,
			$TrackedBlacklistedEmails ;



	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Constructor
	 
	    DESCRIPTION
	        Retrieves security checkings.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( )
	   {
		global		$Configuration ;


		parent::__construct ( ) ;

		// Should we track http requests ?
		$this -> TrackHttpRequests	=  ( boolean ) $Configuration -> Get ( 'Security/track-http-requests', false ) ;

		// Should we check blacklisted domains ?
		$this -> TrackedBlacklistedDomains	=  $this -> __get_blacklist_data ( 'domains' ) ;

		// Should we check blacklisted emails ?
		$this -> TrackedBlacklistedEmails	=  $this -> __get_blacklist_data ( 'emails' ) ;
	    }


	/**************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 ******                                       PUBLIC FUNCTIONS                                           ******
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 **************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************/

	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        BlacklistedDomainCheck - Checks if the referer domain is blacklisted.
	 
	    PROTOTYPE
	        $websecurity -> BlacklistedDomainCheck ( ) ;
	 
	    DESCRIPTION
		Checks if the referer domain, as specified by the $_SERVER [ 'HTTP_referer' ], is blacklisted.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  BlacklistedDomainCheck ( )
	   {
		if  ( ! $this -> TrackedBlacklistedDomains  ||  ! isset ( $_SERVER [ 'HTTP_REFERER' ] ) )
			return ;

		$referer	=  $_SERVER [ 'HTTP_REFERER' ] ;

		if  ( preg_match ( '#^[^:]+://(?P<value> .*)#imsx', $referer, $match ) )
			$referer	=  $match [ 'value' ] ;

		$tracker	=  new BlacklistedDomainTracker 
		   ( 
			$this -> TrackedBlacklistedDomains [ 'error-handlers' ],
			$this -> TrackedBlacklistedDomains [ 'table' ],
			$this -> TrackedBlacklistedDomains [ 'log-table' ]
		    ) ;

		$tracker -> Verify ( $referer ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        BlacklistedEmailCheck - Checks if the specified email is blacklisted.
	 
	    PROTOTYPE
	        $websecurity -> BlacklistedEmailCheck ( $email ) ;
	 
	    DESCRIPTION
		Checks if the specified email is blacklisted.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  BlacklistedEmailCheck ( $email, &$tracker = null )
	   {
		if  ( ! $this -> TrackedBlacklistedEmails )
			return ( true ) ;

		$tracker	=  new BlacklistedEmailTracker 
		   ( 
			$this -> TrackedBlacklistedEmails [ 'error-handlers' ],
			$this -> TrackedBlacklistedEmails [ 'table' ],
			$this -> TrackedBlacklistedEmails [ 'log-table' ]
		    ) ;

		$status		=  $tracker -> Verify ( $email ) ;

		return ( $status ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        PageCheck - Security checkings on current page.
	 
	    PROTOTYPE
	        $websecurity -> PageCheck ( ) ;
	 
	    DESCRIPTION
	        Performs the following actions :
		- Track http request data and put it in the mysql database
		- Check if the referer does not belong to the blacklisted domain list
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  PageCheck ( )
	   {
		if  ( $this -> TrackHttpRequests )
		   {
			$tracker	=  new  HttpRequestTracker ( ) ;
			$tracker -> Track ( ) ;
		    }

		$this -> BlacklistedDomainCheck ( ) ;
	    }


	/**************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 ******                                      SUPPORT FUNCTIONS                                           ******
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 **************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************/

	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        __create_error_handler_object
	 
	    DESCRIPTION
	        Creates an error handler based on the supplied array definition.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	private function  __create_error_handler_object ( $type, $handler_data )
	   {
		// Silently ignore entries with no 'action' element
		if  ( ! isset ( $handler_data [ 'action' ] ) )
			return ( null ) ;

		$action		=  $handler_data [ 'action' ] ;
		$parameters	=  ( isset ( $handler_data [ 'parameters' ] ) ) ?  $handler_data [ 'parameters' ] : [] ;
		$class		=  false ;

		switch  ( strtolower ( $action ) )
		   {
			case	'debug'		:  $class =  'DebugErrorHandler'	; break ;
			case	'wait'		:  $class =  'WaitErrorHandler'		; break ;
			case	'error-page'	:  $class =  'HttpPageErrorHandler'	; break ;

			default :
				error ( new \Thrak\System\InvalidArgumentException ( "Invalid handler \"$action\" in blacklisted $type entry of Security section." ) ) ;
		    }

		// If we found a valid 'action' entry, then instanciate this error handler
		// Otherwise ignore it
		if  ( $class )
		   {
			if  ( ! is_array ( $parameters ) )
				$parameters	=  [ $parameters ] ;

			$class		=  "\\Thrak\\Security\\" . $class ;
			$reflection	=  new \ReflectionClass ( $class ) ;
			$object		=  $reflection -> newInstanceArgs ( $parameters ) ;

			return ( $object ) ;
		    }
		else
			return ( null ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        __get_blacklist_data
	 
	    DESCRIPTION
	        Retrieves parameters related to domain/email blacklisting.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	private function  __get_blacklist_data ( $type ) 
	   {
		global		$Configuration ;

		$value				=  $Configuration -> Get ( "Security/blacklisted-$type", false ) ;

		if  ( is_array ( $value ) )
		   {
			if  ( isset ( $value [ 'enabled' ] )  &&  $value [ 'enabled' ] )
			   {
				$data				=  [] ;
				$data [ 'table'	]		=  ( isset ( $value [ 'table'     ] ) ) ?  $value [ 'table'	] :  "tracking_blacklisted_$type" ;
				$data [ 'log-table' ]		=  ( isset ( $value [ 'log-table' ] ) ) ?  $value [ 'log-table'	] :  'tracking_blacklist_log' ;
				$data [ 'error-handlers' ]	=  new ErrorHandlers ( ) ;

				if  ( isset ( $value [ 'error-handlers' ] )  &&  is_array ( $value [ 'error-handlers' ] ) )
				   {
					foreach ( $value [ 'error-handlers' ]  as  $handler_data )
					   {
						$object		=  $this -> __create_error_handler_object ( $type, $handler_data ) ;

						if  ( $object )
							$data [ 'error-handlers' ] []	=  $object ;
					    }
				    }

				return ( $data ) ;
			    }
			else
				return ( false ) ;
		    }
		else
			return ( false ) ;
	    }
    }