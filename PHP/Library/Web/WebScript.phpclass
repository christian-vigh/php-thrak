<?php
/**************************************************************************************************************

    NAME
        WebScript.phpclass

    DESCRIPTION
        Encapsulates a script to be run, maybe from an Ajax request.
	The result of a run is an array encoded in json format (with data encoded in UTF8) which contains the
	following entries :

	- errno (integer) :
		Error status. The default is zero, which means "no error".
	- error (string) :
		Error message. The default is the empty string. Both errno and error can be set by the
		SetError() method.
	- html (string) :
		Html code generated by the script.
	- data (array) :
		Optional additional data that can be defined by the script through the Array interface of the
		WebScript object.

    AUTHOR
        Christian Vigh, 01/2016.

    HISTORY
        [Version : 1.0]		[Date : 2016-01-24]     [Author : CV]
                Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Web ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

// Used namespaces & objects
use 	Thrak\System\Object ;
use	Thrak\IO\Path ;
use	Thrak\Types\String ;
use	Thrak\Types\ArrayHelpers ;


/*==============================================================================================================

    class WebScript -
        Encapsulates a script.

  ==============================================================================================================*/
class  WebScript		extends		Object
				implements	\ArrayAccess, \Countable, \IteratorAggregate
   {
	// Script data
	protected	$ScriptName ;
	protected	$Utf8Encode ;
	protected	$Errno		=  0 ;				// Error number
	protected	$Error		=  '' ;				// Error message
	protected	$Html		=  '' ;				// Html code generated by the script
	protected	$Data		=  [] ;				// Additional data returned by the script


	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        Constructor
	
	    PROTOTYPE
	        $script = new WebScript ( $script_name, $utf8_encode = true ) ;
	
	    DESCRIPTION
	        Creates a script object.
	
	    PARAMETERS
	        $script_name (string) -
	                Name of the script to be run. For security reasons, path information is removed from the
			specified value, and the '.php' extension is added.
			The directory where the script is located is given by the Site/script-root parameter.

		$utf8_encode (boolean) -
			When true, results are automatically encoded in UTF8.
	
	    NOTES
	        The script existence is only checked during the Run() method.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $script_name, $utf8_encode = true )
	   {
		$this -> ScriptName	=  basename ( $script_name ) . '.php' ;
		$this -> Utf8Encode	=  $utf8_encode ;
	    }



	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        Run - Runs the script
	
	    PROTOTYPE
	        $json_data	=  $script -> Run ( ) ;
	
	    DESCRIPTION
	        Runs the script and returns a json encoded array.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Run ( )
	   {
		global		$WebSite ;

		// Clean any spurious output generated so far - we might be running as an ajax script
		@ob_clean ( ) ;

		// The first condition if that there must be a non-empty script name
		if  ( $this -> ScriptName )
		   {
			// Get script path
			$script		=  $WebSite -> GetScriptPath ( $this -> ScriptName, true ) ;

			// Check if script exists. If this is the case, get its html output
			if  ( file_exists ( $script ) )
			   {
				foreach  ( array_keys ( $GLOBALS )  as  $global_variable )
					global		${$global_variable} ;

				require ( $script ) ;
				$this -> Html	=  ob_get_clean ( ) ;
			    }
			// Otherwise complain
			else 
				$this -> SetError ( -1, 'Invalid request' ) ;
		    }
		// Otherwise, we have to bail out
		else
			$this -> SetError ( -2, 'Empty request' ) ;

		// Set the html entry to the error message, if no html output has been generated 
		if  ( $this -> Errno  &&  ! $this -> Html )
			$this -> Html	=  $this -> Error ;

		// Put everything into an array, after an optional conversion to UTF8
		$data		=  $this -> Data ;

		if  ( $this -> Utf8Encode )
			ArrayHelpers::Utf8Encode ( $data ) ;

		$result		=
		   [
			'errno'		=>  $this -> Errno,
			'error'		=>  ( $this -> Utf8Encode ) ?  utf8_encode ( $this -> Error ) : $this -> Error,
			'html'		=>  ( $this -> Utf8Encode ) ?  utf8_encode ( $this -> Html  ) : $this -> Html,
			'data'		=>  $data
		    ] ;

		// Clean again the output buffer, in case of spurious messages were generated
		@ob_clean ( ) ;

		// All done, return
		return ( json_encode ( $result ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        SetError - Sets the error return code and message.
	
	    PROTOTYPE
	        $script -> SetError ( $errno = 0, $error = '' ) ;
	
	    DESCRIPTION
	        Sets the error return code and message.
	
	    PARAMETERS
	        $errno (integer) -
	                Error code. Zero means no error.

		$error (string) -
			Error message.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  SetError ( $errno = 0, $error = '' )
	   {
		$this -> Error		=  $error ;
		$this -> Errno		=  $errno ;
	    }


	/****************************************************************************************************************
	
	        Interfaces implementation.
	
	 ***************************************************************************************************************/
	public function  Count ( )
	   { return ( count ( $this -> Data ) ) ; }
	
	public function  getIterator ( )
	   { return ( new \ArrayIterator ( $this -> Data ) ) ; }

	public function  offsetGet ( $member )
	   { return ( $this -> Data [ $member ] ) ; }

	public function  offsetSet ( $member, $value )
	   {
		if  ( $member  ===  null )
			$this -> Data []		=  $value ;
		else
			$this -> Data [ $member ]	=  $value ;
	    }

	public function  offsetExists ( $member )
	   { return ( isset ( $this -> Data [ $member ] ) ) ; }

	public function  offsetUnset ( $member )
	   { unset ( $this -> Data [ $member ] ) ; }
    }