<?php
/**************************************************************************************************************

    NAME
        WebSite.phpclass

    DESCRIPTION
        Implements facilities for website management.

    AUTHOR
        Christian Vigh, 06/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/06/01]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Web ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

// Used namespaces & objects
use 	Thrak\System\Object ;
use	Thrak\IO\Path ;
use	Thrak\Types\String ;
use	Thrak\Types\AssociativeArray ;
use	Thrak\Network\RfcProtocols\Http ;
use	Thrak\Web\Sanitizer ;
use	Thrak\Web\UploadedFiles ;
use	Thrak\Web\Cookies ;
use	Thrak\Web\ConditionalHtml ;
use	Thrak\Security\Session ;
use	Thrak\Web\WebScript ;


/*==============================================================================================================

    WebSite -
        Implements facilities for website management.

  ==============================================================================================================*/
class  WebSite			extends	Object 
   {
	// Site running modes
	const			SITE_MODE_PRODUCTION		=  0 ;		// Reduced error messages
	const			SITE_MODE_MAINTENANCE		=  1 ;		// Displays a maintenance message, unless the "debug" GET parameter is set
	const			SITE_MODE_DEBUG			=  2 ;		// Like "Production", with debug messages enabled

	// Common session variables for site settings
	const			SITE_VAR_LANGUAGE		=  '__SITE_LANGUAGE__' ;

	// Http error codes and descriptions
	protected static	$HttpErrorCodes 		= 
	   [
		'200' => [ 'short' => 'OK'				, 'long' => 'OK'							],
		'201' => [ 'short' => 'Created'				, 'long' => 'Created'							],
		'202' => [ 'short' => 'Accepted'			, 'long' => 'Accepted'							],
		'203' => [ 'short' => 'Non-Authorative Information'	, 'long' => 'Non-Authorative Information'				],
		'204' => [ 'short' => 'No Content'			, 'long' => 'No Content'						],
		'205' => [ 'short' => 'Reset Content'			, 'long' => 'Reset Content'						],
		'206' => [ 'short' => 'Partial Content'			, 'long' => 'Partial Content'						],
		'300' => [ 'short' => 'Multiple Choices'		, 'long' => 'Multiple Choices'						],
		'301' => [ 'short' => 'Moved Permanently'		, 'long' => 'Moved Permanently'						],
		'302' => [ 'short' => 'Moved Temporarily'		, 'long' => 'Moved Temporarily'						],
		'303' => [ 'short' => 'See Other'			, 'long' => 'See Other'							],
		'304' => [ 'short' => 'Not Modified'			, 'long' => 'Not Modified'						],
		'305' => [ 'short' => 'Use Proxy'			, 'long' => 'Use Proxy'							],
		'400' => [ 'short' => 'Bad Request'			, 'long' => 'Bad Request'						],
		'401' => [ 'short' => 'Authorization Required'		, 'long' => 'Authorization Required'					],
		'402' => [ 'short' => 'Payment Required (not used yet]'	, 'long' => 'Payment Required (not used yet]'				],
		'403' => [ 'short' => 'Forbidden'			, 'long' => 'Forbidden'							],
		'404' => [ 'short' => 'Not Found'			, 'long' => 'The requested URL was not found on this server.'		],
		'405' => [ 'short' => 'Method Not Allowed'		, 'long' => 'Method Not Allowed'					],
		'406' => [ 'short' => 'Not Acceptable (encoding]'	, 'long' => 'Not Acceptable (encoding]'					],
		'407' => [ 'short' => 'Proxy Authentication Required'	, 'long' => 'Proxy Authentication Required'				],
		'408' => [ 'short' => 'Request Timed Out'		, 'long' => 'Request Timed Out'						],
		'409' => [ 'short' => 'Conflicting Request'		, 'long' => 'Conflicting Request'					],
		'410' => [ 'short' => 'Gone'				, 'long' => 'Gone'							],
		'411' => [ 'short' => 'Content Length Required'		, 'long' => 'Content Length Required'					],
		'412' => [ 'short' => 'Precondition Failed'		, 'long' => 'Precondition Failed'					],
		'413' => [ 'short' => 'Request Entity Too Long'		, 'long' => 'Request Entity Too Long'					],
		'414' => [ 'short' => 'Request URI Too Long'		, 'long' => 'Request URI Too Long'					],
		'415' => [ 'short' => 'Unsupported Media Type'		, 'long' => 'Unsupported Media Type'					],
		'500' => [ 'short' => 'Internal Server Error'		, 'long' => 'Internal Server Error'					],
		'501' => [ 'short' => 'Not Implemented'			, 'long' => 'Not Implemented'						],
		'502' => [ 'short' => 'Bad Gateway'			, 'long' => 'Bad Gateway'						],
		'503' => [ 'short' => 'Service Unavailable'		, 'long' => 'Service Unavailable'					],
		'504' => [ 'short' => 'Gateway Timeout'			, 'long' => 'Gateway Timeout'						],
		'505' => [ 'short' => 'HTTP Version Not Supported'	, 'long' => 'HTTP Version Not Supported'				]
	    ] ;


	// Site root
	public			$Root ;
	// Site domain
	public			$Domain ;
	// Email contacts
	public			$Emails ;
	// Site running mode
	public			$Mode ;
	// Maintenance mode parameters
	public			$MaintenanceMessage ;
	public			$MaintenanceUntil ;
	public			$MaintenancePage ;
	// Default page
	public			$DefaultPage ;
	// "Under construction" pages
	public			$PageUnderConstruction ;
	public			$SiteUnderContruction ;
	public			$SiteUnderMaintenance ;
	// Error page
	public			$ErrorPage ;
	// Client language
	public			$Language ;
	// User and group 
	public			$User ;
	public			$Group ;
	// Page and scripts roots
	public			$PageRoot ;
	public			$ScriptRoot ;
	// Character set and additional headers
	public			$CharacterSet ;
	public			$Headers ;
	

	/*--------------------------------------------------------------------------------------------------------------
	 
	    Constructor -
	        Initializes a WebSite object.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( )
	   {
		global		$SITE_ROOT, $Configuration, $WebSecurity ;

		// Define absolute url
		$_SERVER [ 'HTTP_URL' ]	=  self::GetAbsoluteUrl ( ) ;
		ksort ( $_SERVER ) ;

		// Get real site root
		$root	=  Path::RealPath ( $SITE_ROOT ) ;
		
		if  ( ! is_dir ( $root ) )
			error ( new \Thrak\System\FileNotDirectoryException ( "Site root \"$root\" is not a valid directory." ) ) ;

		$this -> Root	=  Path::ToUnix ( Path::AppendDS ( $root ) ) ;

		// Domain name
		$this -> Domain	=  $Configuration -> Get ( 'Site/domain' ) ;

		// Configuration : Site/page-root -
		//	Page root.
		$this -> PageRoot		=  Path::ToUnix ( Path::AppendDS ( $Configuration -> Get ( 'Site/page-root', '/' ) ) ) ;

		// Configuration : Site/script-root -
		//	Page root.
		$this -> ScriptRoot		=  Path::ToUnix ( Path::AppendDS ( $Configuration -> Get ( 'Site/script-root', '/' ) ) ) ;

		// Configuration : Site/Emails -
		//	List of available mail contacts.
		$this -> Emails		=  new AssociativeArray ( $Configuration -> Get ( 'Site/emails', [] ) ) ;
		$missing		=  $this -> Emails -> ensure_exists 
					      ( 
						[ 'contact', 'webmaster', 'support' ], 
						[ 'contact', 'webmaster', 'support' ] 
					       ) ;
		
		if  ( count ( $missing ) )
			error ( new \Thrak\System\ConfigurationFileException ( "The following email entries are missing from configuration " .
					"at section \"Site/Emails\" : " . implode ( ', ', $missing ) ) ) ;
		
		// Configuration : Site/Mode -
		//	Site running mode.
		$mode	=  $Configuration -> Get ( 'Site/mode', 'production' ) ;
		
		switch ( strtolower ( $mode ) )
		   {
			case	'production'	:  $this -> Mode =  self::SITE_MODE_PRODUCTION		; break ;
			case	'maintenance'	:  $this -> Mode =  self::SITE_MODE_MAINTENANCE		; break ;
			case	'debug'		:  $this -> Mode =  self::SITE_MODE_DEBUG		; break ;
			default :
				error ( new \Thrak\System\ConfigurationFileException ( "Invalid site running mode value \"$mode\" for " .
						"configuration value \"Site/mode\"." ) ) ;
		    }
		
		// Configuration : Site/Maintenance -
		//	Contains the following entries :
		//	- 'message' :
		//		Message to be displayed when the site is under maintenance.
		//	- 'until' :
		//		Reopening date. Default is not specified.
		//	- 'page' :
		//		Page to be displayed.
		$default_message		=
		   [
			'fr'	=>  'Une op&eacute;ration de maintenance est en cours',
			'en'	=>  'A maintenance operation is currently running'
		    ] ;

		$this -> MaintenanceMessage	=  $Configuration -> Get ( 'Site/maintenance/message', $default_message ) ;
		$this -> MaintenanceUntil	=  $Configuration -> Get ( 'Site/maintenance/until', false ) ;
		$this -> MaintenancePage	=  $Configuration -> Get ( 'Site/maintenance/page', false ) ;
		
		// Configuration : Site/default-page -
		//	Default page to be displayed.
		$this -> DefaultPage		=  $Configuration -> Get ( 'Site/default-page', '/index.php' ) ;
		
		// Configuration : Site/error-page -
		//	Default error page to be displayed when an invalid page was specified.
		$this -> ErrorPage		=  $Configuration -> Get ( 'Site/error-page', '/error.php' ) ;
		
		// Configuration : Site/page-under-construction, site-under-construction -
		//	Default page to be displayed for pages that are under construction.
		$this -> PageUnderConstruction		=  $Configuration -> Get ( 'Site/page-under-construction', '/error.php' ) ;
		$this -> SiteUnderConstruction		=  $Configuration -> Get ( 'Site/site-under-construction', '/error.php' ) ;
		
		// Headers
		$this -> Headers			=  $Configuration -> Get ( 'Site/headers', [] ) ;

		// Character set 
		$this -> CharacterSet			=  $Configuration -> Get ( 'Site/character-set', 'ISO-8859-1' ) ;
		$this -> Headers []			=  "Content-type: text/html; charset={$this -> CharacterSet}" ;

		// Client language - don't use local variants
		// If the '
		$language_header		=  new Http\HttpAcceptLanguageHeader ( $_SERVER [ 'HTTP_ACCEPT_LANGUAGE' ] ) ;
		$language			=  $language_header -> GetHighestPriorityValue ( ) ;
		
		if  ( $language )
		   {
			$language_value		=  $language -> Value ;
			
			if  ( preg_match ( '/(?P<lang>\w+)-.*/', $language_value, $match ) )
				$language_value		=  $match [ 'lang' ] ;
		    }
		else
			$language_value	=  'fr' ;
		
		switch ( strtolower ( $language_value ) )
		   {
			case	'fr'	:  $this -> Language	=  'fr' ; break ;
			default		:  $this -> Language	=  'en' ;
		    }

		// Create a global variable that will allow to use the "conditional html" syntax
		global	$Locale ;

		$Locale		=  new ConditionalHtml ( $this -> Language ) ;
		
		// User and group
		$this -> User		=  $Configuration -> Get ( 'Site/user', 'www-data' ) ;
		$this -> Group		=  $Configuration -> Get ( 'Site/group', 'www-data' ) ;
		    
		// Unset the $_REQUEST array for security reasons
		unset ( $_REQUEST ) ;

		// Create a session
		global		$Session ;
		
		$Session	=  new Session ( ) ;

		// Security checkings, just after session opening
		$WebSecurity -> PageCheck ( ) ;
		
		// Session settings that may override existing ones
		if  ( isset ( $Session [ self::SITE_VAR_LANGUAGE ] ) )				// Current language
		   {
			$Locale -> Value	=  $Session [ self::SITE_VAR_LANGUAGE ] ;
		    }
		
		// Save superglobals that will be wrapped
		$GLOBALS [ '_RAW_GET' ]		=  $_GET ;
		$GLOBALS [ '_RAW_POST' ]	=  $_POST ;
		$GLOBALS [ '_RAW_FILES' ]	=  $_FILES ;
		$GLOBALS [ '_RAW_COOKIE' ]	=  $_COOKIE ;

		// If the debug GET parameter has been specified, then switch site to debug mode
		if  ( isset ( $_GET [ 'debug' ] ) )
			$this -> Mode	=  self::SITE_MODE_DEBUG ;
		
		// Wrap superglobals
		$_GET		=  Sanitizer::Wrap ( $_GET ) ;
		$_POST		=  Sanitizer::Wrap ( $_POST ) ;
		
		// Uploaded files (if any)
		$_FILES		=  new UploadedFiles ( $_FILES ) ;
		
		// Cookies
		$_COOKIE	=  new Cookies ( ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        Dispatch - dispatches a request
	
	    PROTOTYPE
	        $WebSite -> Dispatch ( ) ;
	
	    DESCRIPTION
	        Dispatches a POST request. The $_POST array must contain an 'operation' parameter, which specifies the
		script to be executed.
		The script itself must be a .php script located in the path referenced by the Site/script-root
		configuration option.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Dispatch ( )
	   {
		global		$Script ;

		$operation	=  isset ( $_POST [ 'operation' ] ) ?  basename ( ( string ) $_POST [ 'operation' ] ) :  '' ;

		$Script		=  new WebScript ( $operation ) ;
		echo ( $Script -> Run ( ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        Download - Downloads a file.
	
	    PROTOTYPE
	        $WebSite -> Download ( $file, $name = null, $local = true, $root = null ) ;
	
	    DESCRIPTION
	        Downloads the specified file.
	
	    PARAMETERS
	        $file (string or Sanitizer object) -
	                File to be downloaded.

		$name (string or Sanitizer object) -
			File name, as will be presented to the user. The default is the basename

		$local (boolean) -
			When true, only files local to the website can be downloaded.

		$root (string) -
			When specified, indicates the root of the file to be downloaded, otherwise the configuration
			option Site/download-root will be taken.

	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Download ( $filename, $name = null, $local = true, $root = null )
	   {
		global		$Configuration, $Database, $WebSecurity ;

		if  ( ! $filename )
			$this -> ErrorPage ( 404 ) ;

		$name	=  ( string ) $name ;

		if  ( $name  == null )
			$name	=  basename ( $filename ) ;

		$command	=  "file -b --mime-type '" . $filename . "'" ;
		exec ( $command, $output, $status ) ;

		if ( $status  ==  0 )
			$content_type	=  $output [0] ;
		else
			$content_type	=  'application/octet-stream' ;

		$filesize	=  filesize ( $filename ) ;

		@ob_clean ( ) ;
		header ( "Content-Type: $content_type" ) ;
		header ( "Content-Transfer-Encoding: Binary" ) ;
		header ( "Content-length: $filesize" ) ;
		header ( "Content-disposition: attachment; filename=\"$name\""); 
		echo readfile ( $filename ) ;
		@ob_end_flush ( ) ;

		$escaped_filename	=  $Database -> Escape ( $filename ) ;
		$escaped_name		=  $Database -> Escape ( $name ) ;
		$filemtime		=  date ( 'Y-m-d H:i:s', filemtime ( $filename ) ) ;
		$ip			=  $Database -> Escape ( $_SERVER [ 'REMOTE_ADDR' ] ) ;
		$email			=  '' ;
		$tracking_buffer_id	=  $WebSecurity -> TrackingBufferId ;

		$query			=  "
						INSERT INTO thrak_logs.download_history
						SET
							download_path			=  '$escaped_filename',
							download_filename		=  '$escaped_name',
							download_size			=  $filesize,
							download_filemtime		=  '$filemtime',
							download_ip			=  '$ip',
							download_email			=  '$email',
							download_time			=  NOW(),
							download_tracking_buffer_id	=  $tracking_buffer_id
					   " ;
		$Database -> Execute ( $query ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        ErrorPage - Generates an error page 
	
	    PROTOTYPE
	        $WebSite -> ErrorPage ( $error_code, $error_message = false ) ;
	
	    DESCRIPTION
	        Generates an http error page for the specified http code.
	
	    PARAMETERS
	        $error_code (integer) -
	                Http error code.

		$error_message (string) -
			Error message. If not supplied, a standard error message will be displayed.
	
	    RETURN VALUE
	        This function never returns. Bye bye...
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  ErrorPage ( $error_code, $error_message = false )
	   {
		// Variables referenced in Html code and headers
		if  ( isset ( self::$HttpErrorCodes [ $error_code ] ) )
		   {
			$http_error 		=  self::$HttpErrorCodes [ $error_code ] [ 'short' ] ;
			$http_error_description =  self::$HttpErrorCodes [ $error_code ] [ 'long' ] ;
		    }
		else
		   {
			$http_error 		=  
			$http_error_description =  "Unkown error $error_code" ;
		    }

		$apache_version		=  apache_get_version ( ) ;
		$server_name 		=  $_SERVER [ 'SERVER_NAME' ] ;
		$server_port 		=  $_SERVER [ 'SERVER_PORT' ] ;
		$date 			=  date ( 'r' ) ;

		// Generate the final html code that mimics an error page
		$html 	=  <<<END
<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html><head>
<title>$error_code $http_error</title>
</head><body>
<h1>$http_error</h1>
<p>$http_error_description</p>
<hr>
<address>$apache_version at $server_name Port $server_port</address>
</body></html>

END;
		$length	=  strlen ( $html ) ;

		// Mimic an error page
		@ob_clean ( ) ;

		/***
			Yet another quirk :
			- When header ( "Connection: Keep-Alive" ) is called, the client receives "Connection: Keep-Alive, Keep-Alive"
			- When this function is not called, the "Connection: Keep-Alive" is sent, but an extra "X-Pad:avoid browser bug"
			  header is sent. This header is not present in the headers_list(), and trying to remove it from .htaccess or
			  Apache configuration files does not work either.
			This will be the only difference with a regular 404 error page.
		 ***/
		//header ( "Connection: Keep-Alive" ) ;
		header ( "HTTP/1.0 $error_code $http_error" ) ; 
		header ( "Content-Encoding: gzip" ) ;
		header ( "Content-Length: $length" ) ;
		header ( "Content-Type: text/html; charset=iso-8859-1" ) ;
		header ( "Date: $date" ) ;
		header ( "Keep-Alive: timeout=5, max=100" ) ;
		header ( "Server: $apache_version" ) ;
		header ( "Vary: Accept-Encoding" ) ;
		echo ( gzencode ( $html ) ) ;
		exit ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        GetAbsoluteUrl - Returns the current script absolute url.
	 
	    PROTOTYPE
	       $url	=  WebSite::GetAbsoluteUrl ( $include_default_port = false, $server = $_SERVER ) ;
	 
	    DESCRIPTION
	        Returns the absolute url of the current script, include request scheme, user/password if any, host and
		uri.

	    PARAMETERS 
		$include_default_port (boolean) -
			When true, the port number is included in the result even if it's the default port 80.
			When false, it will be omitted if it is the default port 80.
	 
		$server (array) -
			Optional. Specifies the array to be used instead of $_SERVER.

	    NOTES
	        This function cannot return the fragment part of an url, since it is never sent to the server.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public static function  GetAbsoluteUrl ( $include_default_port = false, $server = null )
	   {
		if  ( ! $server )
			$server		=  $_SERVER ;

		$url	 =  '' ;
		$url	.=  ( isset ( $server [ 'REQUEST_SCHEME' ] ) ) ?  $server [ 'REQUEST_SCHEME' ] : 'http' ;
		$url	.=  '://' ;

		if  ( isset ( $server [ 'PHP_AUTH_USER' ] ) )
		   {
			$url	.=  $server [ 'PHP_AUTH_USER' ] ;

			if  ( isset ( $server [ 'PHP_AUTH_PW' ] ) )
				$url	.=  ':' . $server [ 'PHP_AUTH_PW' ] ;

			$url	.=  '@' ;
		    }

		$url	.=  $server [ 'HTTP_HOST' ] ;

		if  ( isset ( $server [ 'SERVER_PORT' ] ) )
		   {
			if  ( $include_default_port  ||  $server [ 'SERVER_PORT' ]  !=  80 )
				$url	.=  '.' . $server [ 'SERVER_PORT' ] ;
		    }

		if  ( isset ( $server [ 'REQUEST_URI' ] ) )
			$url	.=  $server [ 'REQUEST_URI' ] ;

		return ( $url ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        GetPagePath, GetScriptPath - Returns the path to a site page or script.
	 
	    PROTOTYPE
	       $path	=  $website -> GetPagePath ( $path, $filesystem_path = false ) ;
	       $path	=  $website -> GetScriptPath ( $path, $filesystem_path = false ) ;
	 
	    DESCRIPTION
	        Returns the absolute path of the specified page withing the site.
	 
	    PARAMETERS
	        $path (string) -
	                Path to be converted to absolute. The "Site/Root" entry in the configuration file is used to 
			build the full path.

		$filesystem_path (boolean) -
			When true, the returned path is the absolute path in the host filesystem.
			When false, the absolute path will be relative to the site root.
	 
	    RETURN VALUE
	        The absolute path of $path.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __get_path ( $path, $root, $filesystem_path = false )
	   {
		if  ( $path [0]  !=  '/' )
			$path	=  $root . $path ;

		if  ( $filesystem_path )
			$path	=  Path::RealPath ( $this -> Root . substr ( $path, 1 ) ) ;

		return ( $path ) ;
	    }


	public function  GetPagePath ( $path, $filesystem_path = false )
	   {
		return ( $this -> __get_path ( $path, $this -> PageRoot, $filesystem_path ) ) ;
	    }


	public function  GetScriptPath ( $path, $filesystem_path = false )
	   {
		return ( $this -> __get_path ( $path, $this -> ScriptRoot, $filesystem_path ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    Flush -
	        Flushes JS and CSS includes, and sends the headers defined in the configuration file.
		This method must be called in the <head> tag.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Flush ( )
	   {
		global	$JSIncluder, $CSSIncluder ;

		$JSIncluder -> Flush ( ) ;
		$CSSIncluder -> Flush ( ) ;
		$this -> SendHeaders ( ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    PageUnderConstruction, SiteUnderConstruction - 
		Displays the "Under construction" page.	 
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  PageUnderConstruction ( )
	   {
		global		$Locale ;

		require ( $this -> PageUnderConstruction ) ;
	    }


	public function  SiteUnderConstruction ( )
	   {
		global		$Locale ;

		require ( $this -> SiteUnderConstruction ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    SendHeaders -
	        Sends the headers defined into the configuration file, including the one containing the character set.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  SendHeaders ( )
	   {
		foreach  ( $this -> Headers  as  $header )
			header ( $header ) ;
	    }
    }