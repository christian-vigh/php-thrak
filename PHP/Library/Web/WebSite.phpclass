<?php
/**************************************************************************************************************

    NAME
        WebSite.phpclass

    DESCRIPTION
        Implements facilities for website management.

    AUTHOR
        Christian Vigh, 06/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/06/01]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Web ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

// Used namespaces & objects
use 	Thrak\System\Object ;
use	Thrak\IO\Path ;
use	Thrak\Types\String ;
use	Thrak\Types\AssociativeArray ;
use	Thrak\Network\RfcProtocols\Http ;
use	Thrak\Web\Sanitizer ;
use	Thrak\Web\UploadedFiles ;
use	Thrak\Web\Cookies ;
use	Thrak\Web\ConditionalHtml ;
use	Thrak\Security\Session ;


/*==============================================================================================================

    WebSite -
        Implements facilities for website management.

  ==============================================================================================================*/
class  WebSite			extends	Object 
   {
	// Site running modes
	const		SITE_MODE_PRODUCTION		=  0 ;		// Reduced error messages
	const		SITE_MODE_MAINTENANCE		=  1 ;		// Displays a maintenance message, unless the "debug" GET parameter is set
	const		SITE_MODE_DEBUG			=  2 ;		// Like "Production", with debug messages enabled

	// Common session variables for site settings
	const		SITE_VAR_LANGUAGE		=  '__SITE_LANGUAGE__' ;

	// Site root
	public		$Root ;
	// Email contacts
	public		$Emails ;
	// Site running mode
	public		$Mode ;
	// Maintenance mode parameters
	public		$MaintenanceMessage ;
	public		$MaintenanceUntil ;
	public		$MaintenancePage ;
	// Default page
	public		$DefaultPage ;
	// "Under construction" page
	public		$UnderConstructionPage ;
	// Error page
	public		$ErrorPage ;
	// Client language
	public		$Language ;
	// User and group 
	public		$User ;
	public		$Group ;
	// Page and scripts roots
	public		$PageRoot ;
	public		$ScriptRoot ;
	// Character set and additional headers
	public		$CharacterSet ;
	public		$Headers ;
	

	/*--------------------------------------------------------------------------------------------------------------
	 
	    Constructor -
	        Initializes a WebSite object.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( )
	   {
		global		$SITE_ROOT, $Configuration ;
		
		// Get real site root
		$root	=  Path::RealPath ( $SITE_ROOT ) ;
		
		if  ( ! is_dir ( $root ) )
			error ( new \Thrak\System\FileNotDirectoryException ( "Site root \"$root\" is not a valid directory." ) ) ;

		$this -> Root	=  Path::ToUnix ( Path::AppendDS ( $root ) ) ;

		// Configuration : Site/page-root -
		//	Page root.
		$this -> PageRoot		=  Path::ToUnix ( Path::AppendDS ( $Configuration -> Get ( 'Site/page-root', '/' ) ) ) ;

		// Configuration : Site/script-root -
		//	Page root.
		$this -> ScriptRoot		=  Path::ToUnix ( Path::AppendDS ( $Configuration -> Get ( 'Site/script-root', '/' ) ) ) ;

		// Configuration : Site/Emails -
		//	List of available mail contacts.
		$this -> Emails		=  new AssociativeArray ( $Configuration -> Get ( 'Site/emails', [] ) ) ;
		$missing		=  $this -> Emails -> ensure_exists 
					      ( 
						[ 'contact', 'webmaster', 'support' ], 
						[ 'contact', 'webmaster', 'support' ] 
					       ) ;
		
		if  ( count ( $missing ) )
			error ( new \Thrak\System\ConfigurationFileException ( "The following email entries are missing from configuration " .
					"at section \"Site/Emails\" : " . implode ( ', ', $missing ) ) ) ;
		
		// Configuration : Site/Mode -
		//	Site running mode.
		$mode	=  $Configuration -> Get ( 'Site/mode', 'production' ) ;
		
		switch ( strtolower ( $mode ) )
		   {
			case	'production'	:  $this -> Mode =  self::SITE_MODE_PRODUCTION		; break ;
			case	'maintenance'	:  $this -> Mode =  self::SITE_MODE_MAINTENANCE		; break ;
			case	'debug'		:  $this -> Mode =  self::SITE_MODE_DEBUG		; break ;
			default :
				error ( new \Thrak\System\ConfigurationFileException ( "Invalid site running mode value \"$mode\" for " .
						"configuration value \"Site/mode\"." ) ) ;
		    }
		
		// Configuration : Site/Maintenance -
		//	Contains the following entries :
		//	- 'message' :
		//		Message to be displayed when the site is under maintenance.
		//	- 'until' :
		//		Reopening date. Default is not specified.
		//	- 'page' :
		//		Page to be displayed.
		$default_message		=
		   [
			'fr'	=>  'Une op&eacute;ration de maintenance est en cours',
			'en'	=>  'A maintenance operation is currently running'
		    ] ;

		$this -> MaintenanceMessage	=  $Configuration -> Get ( 'Site/maintenance/message', $default_message ) ;
		$this -> MaintenanceUntil	=  $Configuration -> Get ( 'Site/maintenance/until', false ) ;
		$this -> MaintenancePage	=  $Configuration -> Get ( 'Site/maintenance/page', false ) ;
		
		// Configuration : Site/default-page -
		//	Default page to be displayed.
		$this -> DefaultPage		=  $Configuration -> Get ( 'Site/default-page', '/index.php' ) ;
		
		// Configuration : Site/error-page -
		//	Default error page to be displayed when an invalid page was specified.
		$this -> ErrorPage		=  $Configuration -> Get ( 'Site/error-page', '/error.php' ) ;
		
		// Configuration : Site/under-construction-page -
		//	Default page to be displayed for pages that are under construction.
		$this -> UnderConstructionPage		=  $Configuration -> Get ( 'Site/under-construction-page', '/error.php' ) ;
		
		// Headers
		$this -> Headers			=  $Configuration -> Get ( 'Site/headers', [] ) ;

		// Character set 
		$this -> CharacterSet			=  $Configuration -> Get ( 'Site/character-set', 'ISO-8859-1' ) ;
		$this -> Headers []			=  "Content-type: text/html; charset={$this -> CharacterSet}" ;

		// Client language - don't use local variants
		// If the '
		$language_header		=  new Http\HttpAcceptLanguageHeader ( $_SERVER [ 'HTTP_ACCEPT_LANGUAGE' ] ) ;
		$language			=  $language_header -> GetHighestPriorityValue ( ) ;
		
		if  ( $language )
		   {
			$language_value		=  $language -> Value ;
			
			if  ( preg_match ( '/(?P<lang>\w+)-.*/', $language_value, $match ) )
				$language_value		=  $match [ 'lang' ] ;
		    }
		else
			$language_value	=  'fr' ;
		
		switch ( strtolower ( $language_value ) )
		   {
			case	'fr'	:  $this -> Language	=  'fr' ; break ;
			default		:  $this -> Language	=  'en' ;
		    }

		// Create a global variable that will allow to use the "conditional html" syntax
		global	$Locale ;

		$Locale		=  new ConditionalHtml ( $this -> Language ) ;
		
		// User and group
		$this -> User		=  $Configuration -> Get ( 'Site/user', 'www-data' ) ;
		$this -> Group		=  $Configuration -> Get ( 'Site/group', 'www-data' ) ;
		    
		// Unset the $_REQUEST array for security reasons
		unset ( $_REQUEST ) ;

		// Create a session
		global		$Session ;
		
		$Session	=  new Session ( ) ;

		// Session settings that may override existing ones
		if  ( isset ( $Session [ self::SITE_VAR_LANGUAGE ] ) )				// Current language
		   {
			$Locale -> Value	=  $Session [ self::SITE_VAR_LANGUAGE ] ;
		    }
		
		// Wrap superglobals
		$_GET		=  Sanitizer::Wrap ( $_GET ) ;
		$_POST		=  Sanitizer::Wrap ( $_POST ) ;
		
		// Uploaded files (if any)
		$_FILES		=  new UploadedFiles ( $_FILES ) ;
		
		// Cookies
		$_COOKIE	=  new Cookies ( ) ;

		// If the debug GET parameter has been specified, then switch site to debug mode
		if  ( isset ( $_GET [ 'debug' ] ) )
		   {
			$this -> Mode	=  self::SITE_MODE_DEBUG ;
		    }
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        GetPagePath, GetScriptPath - Returns the path to a site page or script.
	 
	    PROTOTYPE
	       $path	=  $website -> GetPagePath ( $path, $filesystem_path = false ) ;
	       $path	=  $website -> GetScriptPath ( $path, $filesystem_path = false ) ;
	 
	    DESCRIPTION
	        Returns the absolute path of the specified page withing the site.
	 
	    PARAMETERS
	        $path (string) -
	                Path to be converted to absolute. The "Site/Root" entry in the configuration file is used to 
			build the full path.

		$filesystem_path (boolean) -
			When true, the returned path is the absolute path in the host filesystem.
			When false, the absolute path will be relative to the site root.
	 
	    RETURN VALUE
	        The absolute path of $path.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __get_path ( $path, $root, $filesystem_path = false )
	   {
		if  ( $path [0]  !=  '/' )
			$path	=  $root . $path ;

		if  ( $filesystem_path )
			$path	=  Path::RealPath ( $this -> Root . substr ( $path, 1 ) ) ;

		return ( $path ) ;
	    }


	public function  GetPagePath ( $path, $filesystem_path = false )
	   {
		return ( $this -> __get_path ( $path, $this -> PageRoot, $filesystem_path ) ) ;
	    }


	public function  GetScriptPath ( $path, $filesystem_path = false )
	   {
		return ( $this -> __get_path ( $path, $this -> ScriptRoot, $filesystem_path ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    SendHeaders -
	        Sends the headers defined into the configuration file, including the one containing the character set.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  SendHeaders ( )
	   {
		foreach  ( $this -> Headers  as  $header )
			header ( $header ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	 
	    PageUnderConstruction - 
		Displays the "Under construction" page.	 
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  PageUnderConstruction ( )
	   {
		global		$Locale ;

		require ( $this -> UnderConstructionPage ) ;
	    }
    }