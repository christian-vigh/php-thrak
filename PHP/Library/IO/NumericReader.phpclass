<?php
/**************************************************************************************************************

    NAME
        NumericReader.phpclass

    DESCRIPTION
        A class that provides fast read access to text files containing list of numeric values.

    AUTHOR
        Christian Vigh, 12/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/12/14]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\IO ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

// Used namespaces & objects
use 	Thrak\System\Object ;
use	Thrak\Types\StringUtilities ;


/*==============================================================================================================

    NumericReader class -
        A class that provides fast read access to text files containing list of numeric values.

  ==============================================================================================================*/
class  NumericReader	extends		Object
   {
	public		$Filename ;					// Input file
	protected	$FileDescriptor			=  false ;	// File descriptor
	protected	$ReadBufferSize ;				// Input buffer size
	protected	$Buffer				=  '' ;		// Read buffer contents
	protected	$BufferPosition			=  0 ;		// Current character position in buffer
	protected	$BufferSize			=  0 ;		// Actual buffer size


	/*--------------------------------------------------------------------------------------------------------------
	
	    Constructor -
	        Opens the file to be read.
	
	  -------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $filename, $buffer_size = 16777216 )
	   {
		if  ( ! file_exists ( $filename ) )
			error ( new \Thrak\System\FileNotFoundException ( "File \"$filename\" does not exist." ) ) ;

		if  ( ! ( $this -> FileDescriptor = fopen ( $filename, 'r' ) ) )
			error ( new \Thrak\System\RuntimeException ( "Could not open file \"$filename\"" ) ) ;

		$this -> Filename	=  $filename ;
		$this -> ReadBufferSize	=  $buffer_size ;
		$this -> ReadNextBlock ( ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	
	    Destructor -
	        Closes the file, if opened.
	
	  -------------------------------------------------------------------------------------------------------------*/
	public function  __destruct ( )
	   {
		if  ( $this -> FileDescriptor )
			@fclose ( $this -> FileDescriptor ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	
	    ReadNextBlock -
	        Reads the next block of daata.
	
	  -------------------------------------------------------------------------------------------------------------*/
	protected function  ReadNextBlock ( )
	   {
		$buffer			=  fread ( $this -> FileDescriptor, $this -> ReadBufferSize ) ;

		// If our case, fread() doesn't return false on EOF but an empty string
		// However, do not use the test :
		//	if  ( ! $buffer )
		// because it will evaluate to true if the returned string is "0"...
		if  ( $buffer  ===  false  ||  $buffer  ===  '' )
		   {
			$this -> Buffer		=  '' ;
			$this -> BufferSize	=  0 ;
			$this -> BufferPosition	=  false ;
				
			return ( false ) ;
		    }
		else
		   {
			$this -> Buffer		=  $buffer ;
			$this -> BufferSize	=  strlen ( $buffer ) ;
			$this -> BufferPosition	=  0 ;

			return ( $this -> BufferSize ) ;
		    }
	    }


	/*--------------------------------------------------------------------------------------------------------------
	
	    Read -
	        Reads $count numeric values, or all values if $count is false.
	
	  -------------------------------------------------------------------------------------------------------------*/
	public function  Read ( $count  =  false )
	   {
		// Better test if a character is set in this array rather than calling ctype_digit(), which is very
		// expensive
		static	$numeric  =
		   [
			'0' => 1, '1' => 1, '2' => 1, '3' => 1, '4' => 1, '5' => 1, '6' => 1, '7' => 1, '8' => 1, '9' => 1,
			'E' => 1, 'e' => 1, '.' => 1, '+' => 1, '-' => 1
		    ] ;

		$max_values	=  ( $count  ===  false ) ?  PHP_INT_MAX : $count ;	// Max values to be read
		$result		=  [] ;							// Result array
		$result_size	=  0 ;							// Result value count
		$current_line	=  1 ;							// Current line and column in input file
		$current_column =  1 ;	
		$current_value	=  '' ;							// Value currently being collected 


		// Loop through input characters
		while  ( $result_size  <=  $max_values )
		   {
			// Read next data block if we processed the contents of the current one
			if  ( $this -> BufferPosition  >=  $this -> BufferSize )
			   {
				if  ( $this -> ReadNextBlock ( )  ===  false )
					break ;
			    }

			$ch	=  $this -> Buffer [ $this -> BufferPosition ++ ] ;

			// Value present in a numeric value
			if  ( isset ( $numeric [ $ch ] ) )
				$current_value	.=  $ch ;
			// Space : terminate the current value (if any) and count newlines
			else if  ( $ch  ==  ' '  ||  $ch  ==  "\t"  ||  $ch  ==  "\r"  ||  $ch  ==  "\n" )
			   {
				if  ( $current_value )
				   {
					$result [ $result_size ++ ]	=  $current_value ;
					$current_value			=  '' ;
				    }

				if  ( $ch  ==  "\n" )
				   {
					$current_line ++ ;
					$current_column		=  1 ;
				    }
			    }
			// Allow for comments starting with '#'
			else if  ( $ch  ==  '#' )
			   {
				if  ( $current_value )
				   {
					$result [ $result_size ++ ]	=  $current_value ;
					$current_value			=  '' ;
				    }

				while  ( ( $index = strpos ( $this -> Buffer, "\n", $this -> BufferPosition ) )  ===  false )
				   {
					if  ( $this -> ReadNextBlock ( )  ===  false )
						break ;
				    }

				if  ( $index  !==  false )
					$this -> BufferPosition		=  $index ;
			    }
			// Complain on unrecognized character
			else
				error ( new \Thrak\System\RuntimeException ( "Unexpected character '$ch' at line $current_line, col $current_column" ) ) ;

			$current_column ++ ;
		    }

		// Add current value to the result, if any (meaning that the last digit of a number is also the last character of the file)
		if  ( $current_value )
			$result []	=  $current_value ;

		// All done, return 
		return ( $result ) ;
	    }
    }