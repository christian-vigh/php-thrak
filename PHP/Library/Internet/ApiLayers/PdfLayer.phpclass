<?php
/**************************************************************************************************************

    NAME
        PdfLayer.phpclass

    DESCRIPTION
        Encapsulates access to the apilayer pdf api.

    AUTHOR
        Christian Vigh, 02/2016.

    HISTORY
        [Version : 1.0]		[Date : 2016-02-14]     [Author : CV]
                Initial version.

 **************************************************************************************************************/
namespace  Thrak\Internet\ApiLayers ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;


// Used namespaces and classes
use  	Thrak\System\Object ;    
use	Thrak\IO\Path ;
use	Thrak\Types\String ;


/*==============================================================================================================

    class PdfLayer -
        Encapsulates access to the apilayer pdf api.

  ==============================================================================================================*/
class	PdfLayer		extends  ApiLayer
   {
	// Page sizes
	const	PAGE_SIZE_A0			=  'A0' ;
	const	PAGE_SIZE_A1			=  'A1' ;
	const	PAGE_SIZE_A2			=  'A2' ;
	const	PAGE_SIZE_A3			=  'A3' ;
	const	PAGE_SIZE_A4			=  'A4' ;
	const	PAGE_SIZE_A5			=  'A5' ;
	const	PAGE_SIZE_A6			=  'A6' ;
	const	PAGE_SIZE_A7			=  'A7' ;
	const	PAGE_SIZE_A8			=  'A8' ;
	const	PAGE_SIZE_A9			=  'A9' ;
	const	PAGE_SIZE_B0			=  'B0' ;
	const	PAGE_SIZE_B1			=  'B1' ;
	const	PAGE_SIZE_B2			=  'B2' ;
	const	PAGE_SIZE_B3			=  'B3' ;
	const	PAGE_SIZE_B4			=  'B4' ;
	const	PAGE_SIZE_B5			=  'B5' ;
	const	PAGE_SIZE_B6			=  'B6' ;
	const	PAGE_SIZE_B7			=  'B7' ;
	const	PAGE_SIZE_B8			=  'B8' ;
	const	PAGE_SIZE_B9			=  'B9' ;
	const	PAGE_SIZE_CSE			=  'CSE' ;
	const	PAGE_SIZE_COMM10E		=  'Comm10E' ;
	const	PAGE_SIZE_DLE			=  'DLE' ;
	const	PAGE_SIZE_EXECUTIVE		=  'Executive' ;
	const	PAGE_SIZE_FOLIO			=  'Folio' ;
	const	PAGE_SIZE_LEDGER		=  'Ledger' ;
	const	PAGE_SIZE_LEGAL			=  'Legal' ;
	const	PAGE_SIZE_LETTER		=  'Letter' ;
	const	PAGE_SIZE_TABLOID		=  'Tabloid' ;

	// Units
	const	UNIT_MILLIMETERS		=  'mm' ;
	const	UNIT_INCHES			=  'in' ;
	const	UNIT_PIXELS			=  'px' ;
	const	UNIT_POINTS			=  'pt' ;

	// Orientation
	const	ORIENTATION_PORTRAIT		=  'portrait' ;
	const	ORIENTATION_LANDSCAPE		=  'landscape' ;

	// Pdf contents of the last conversion operation
	public		$Pdf ;


	public function  __construct ( $access_key, $secret_key = null, $use_https = false )
	   {
		$parameters	=
		   [
			   [ 
				'name'			=>  'document_url', 
				'property'		=>  [ 'url', 'Url', 'document_url', 'DocumentUrl' ]
			    ], 
			   [
				'name'			=>  'secret_key',
				'property'		=>  [ 'secret_key', 'SecretKey' ],
				'type'			=>  self::APILAYER_PARAMETER_FLAG_COMPUTED,
				'queryget'		=>  function ( $parameter ) 
				   { 
					$key	=  md5 ( $this -> DocumentUrl . $this -> SecretKey ) ;

					return ( $key ) ;
				    }
			    ],
			   [
				'name'			=>  'test',
				'property'		=>  [ 'test', 'Test', 'sandbox', 'Sandbox' ]
			    ],
			   [
				'name'			=>  'title',
				'property'		=>  [ 'title', 'Title' ]
			    ],
			   [
				'name'			=>  'subject',
				'property'		=>  [ 'subject', 'Subject' ]
			    ],
			   [
				'name'			=>  'creator',
				'property'		=>  [ 'creator', 'Creator', 'application', 'Application' ]
			    ],
			   [
				'name'			=>  'author',
				'property'		=>  [ 'author', 'Author' ]
			    ],
			   [
				'name'			=>  'delay',
				'property'		=>  [ 'delay', 'Delay' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER,
				'range'			=>  [ 10, 20000 ]
			    ], 
			   [
				'name'			=>  'ttl',
				'property'		=>  [ 'ttl', 'Ttl', 'TTL' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER,
				'range'			=>  [ 300, 2592000 ]
			    ], 
			   [
				'name'			=>  'force',
				'property'		=>  [ 'force', 'Force' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'user_password',
				'property'		=>  [ 'user_password', 'UserPassword' ]
			    ], 
			   [
				'name'			=>  'owner_password',
				'property'		=>  [ 'owner_password', 'OwnerPassword' ]
			    ], 
			   [
				'name'			=>  'auth_user',
				'property'		=>  [ 'auth_user', 'AuthUser', 'AuthenticationUser' ]
			    ], 
			   [
				'name'			=>  'auth_password',
				'property'		=>  [ 'auth_password', 'AuthPassword', 'AuthenticationPassword' ]
			    ], 
			   [
				'name'			=>  'no_images',
				'property'		=>  [ 'no_images', 'NoImages' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'no_hyperlinks',
				'property'		=>  [ 'no_hyperlinks', 'NoHyperlinks' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'no_javascript',
				'property'		=>  [ 'no_javascript', 'NoJavascript' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'no_backgrounds',
				'property'		=>  [ 'no_backgrounds', 'NoBackgrounds' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'use_print_media',
				'property'		=>  [ 'use_print_media', 'UsePrintMedia' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'grayscale',
				'property'		=>  [ 'grayscale', 'GrayScale' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'low_quality',
				'property'		=>  [ 'low_quality', 'LowQuality' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'forms',
				'property'		=>  [ 'forms', 'Forms' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'no_print',
				'property'		=>  [ 'no_print', 'NoPrint' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'no_modify',
				'property'		=>  [ 'no_modify', 'NoModify' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'no_copy',
				'property'		=>  [ 'no_copy', 'NoCopy' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'inline',
				'property'		=>  [ 'inline', 'Inline' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'page_width',
				'property'		=>  [ 'page_width', 'PageWidth' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'margin_top',
				'property'		=>  [ 'margin_top', 'MarginTop' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'margin_bottom',
				'property'		=>  [ 'margin_bottom', 'MarginBottom' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'margin_left',
				'property'		=>  [ 'margin_left', 'MarginLeft' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'margin_right',
				'property'		=>  [ 'margin_right', 'MarginRight' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'page_height',
				'property'		=>  [ 'page_height', 'PageHeight' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'header_text',
				'property'		=>  [ 'header_text', 'HeaderText' ],
				'type'			=>  self::APILAYER_PARAMETER_FLAG_UTF8_ENCODE | self::APILAYER_PARAMETER_FLAG_HTML_ENTITIES
			    ], 
			   [
				'name'			=>  'header_spacing',
				'property'		=>  [ 'header_spacing', 'HeaderSpacing' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'header_url',
				'property'		=>  [ 'header_url', 'HeaderUrl' ]
			    ], 
			   [
				'name'			=>  'header_align',
				'property'		=>  [ 'header_align', 'HeaderAlign' ],
				'type'			=>  self::APILAYER_PARAMETER_KEYWORD,
				'keywords'		=>  [ 'left', 'center', 'right' ]
			    ], 
			   [
				'name'			=>  'footer_text',
				'property'		=>  [ 'footer_text', 'FooterText' ],
				'type'			=>  self::APILAYER_PARAMETER_FLAG_UTF8_ENCODE | self::APILAYER_PARAMETER_FLAG_HTML_ENTITIES
			    ], 
			   [
				'name'			=>  'footer_spacing',
				'property'		=>  [ 'footer_spacing', 'FooterSpacing' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'footer_url',
				'property'		=>  [ 'footer_url', 'FooterUrl' ]
			    ], 
			   [
				'name'			=>  'footer_align',
				'property'		=>  [ 'footer_align', 'FooterAlign' ],
				'type'			=>  self::APILAYER_PARAMETER_KEYWORD,
				'keywords'		=>  [ 'left', 'center', 'right' ]
			    ], 
			   [
				'name'			=>  'text_encoding',
				'property'		=>  [ 'text_encoding', 'TextEncoding' ]
			    ], 
			   [
				'name'			=>  'dpi',
				'property'		=>  [ 'dpi', 'Dpi', 'DPI' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER,
				'range'			=>  [ 10, 10000 ]
			    ], 
			   [
				'name'			=>  'zoom',
				'property'		=>  [ 'zoom', 'Zoom' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER,
				'range'			=>  [ 0, 50 ]
			    ], 
			   [
				'name'			=>  'document_name',
				'property'		=>  [ 'document_name', 'DocumentName' ]
			    ], 
			   [
				'name'			=>  'encryption',
				'property'		=>  [ 'encryption', 'Encryption' ],
				'type'			=>  self::APILAYER_PARAMETER_KEYWORD,
				'keywords'		=>  [ '40', '128' ]
			    ], 
			   [
				'name'			=>  'orientation',
				'property'		=>  [ 'orientation', 'Orientation' ],
				'type'			=>  self::APILAYER_PARAMETER_KEYWORD,
				'keywords'		=>  [ 'portrait', 'landscape' ]
			    ], 
			   [
				'name'			=>  'custom_unit',
				'property'		=>  [ 'custom_unit', 'CustomUnit', 'Unit', 'CustomUnits', 'Units' ],
				'type'			=>  self::APILAYER_PARAMETER_KEYWORD,
				'keywords'		=> 
				   [
					'mm', 
					'millimeters'		=>  'mm',
					'millimeter'		=>  'mm',
					'in',
					'inches'		=>  'in',
					'inch'			=>  'in',
					'px',
					'pixels'		=>  'px',
					'pixel'			=>  'px',
					'pt',
					'points'		=>  'pt',
					'point'			=>  'pt'
				    ]
			    ], 
			   [
				'name'			=>  'accept_lang',
				'property'		=>  [ 'accept_lang', 'accept_language', 'AcceptLanguage' ]
			    ], 
			   [
				'property'		=>  [ 'QueryLanguage', 'QueryCharset' ],
				'url-parameter'		=>  false
			    ], 
			   [
				'name'			=>  'user_agent',
				'property'		=>  [ 'user_agent', 'UserAgent' ]
			    ], 
			   [
				'name'			=>  'css_url',
				'property'		=>  [ 'css_url', 'CssUrl' ]
			    ], 
			   [
				'name'			=>  'page_size',
				'property'		=>  [ 'page_size', 'PageSize' ],
				'type'			=>  self::APILAYER_PARAMETER_KEYWORD,
				'keywords'		=>
				   [
					'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 
					'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 
					'CSE', 'Comm10E', 'Executive', 'Folio', 'Ledger', 'Legal', 'Letter', 'Tabloid'
				    ]
			    ],
			   [
				'name'			=>  'viewport',
				'property'		=>  [ 'viewport', 'Viewport' ],
				'type'			=>  self::APILAYER_PARAMETER_VIEWPORT
			    ],
			   [
				'name'			=>  'watermark_offset_x',
				'property'		=>  [ 'watermark_offset_x', 'WatermarkOffsetX' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'watermark_offset_y',
				'property'		=>  [ 'watermark_offset_y', 'WatermarkOffsetY' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER
			    ], 
			   [
				'name'			=>  'watermark_opacity',
				'property'		=>  [ 'watermark_opacity', 'WatermarkOpacity' ],
				'type'			=>  self::APILAYER_PARAMETER_INTEGER,
				'range'			=>  [ 0, 100 ]
			    ], 
			   [
				'name'			=>  'watermark_in_background',
				'property'		=>  [ 'watermark_in_background', 'WatermarkInBackground' ],
				'type'			=>  self::APILAYER_PARAMETER_BOOLEAN
			    ], 
			   [
				'name'			=>  'watermark_url',
				'property'		=>  [ 'watermark_url', 'WatermarkUrl' ]
			    ],
			   [
				'name'			=>  'document_html',
				'property'		=>  [ 'document_html', 'DocumentHtml' ],
				'type'			=>  self::APILAYER_PARAMETER_FLAG_POST
			    ],
			   [
				'name'			=>  'header_html',
				'property'		=>  [ 'header_html', 'HeaderHtml' ],
				'type'			=>  self::APILAYER_PARAMETER_FLAG_POST
			    ],
			   [
				'name'			=>  'footer_html',
				'property'		=>  [ 'footer_html', 'FooterHtml' ],
				'type'			=>  self::APILAYER_PARAMETER_FLAG_POST
			    ]
		    ] ;

		parent::__construct ( 'api.screenshotlayer.com/api/convert', $access_key, $use_https, $parameters ) ;

		$this -> SecretKey	=  $secret_key ;
	    }


	/**************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 ******                                         PUBLIC FUNCTIONS                                         ******
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 **************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************/


	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        ConvertPage - Converts a page
	
	    PROTOTYPE
	        $data	=  $pdf -> ConvertPage ( $url = false ) ;
	
	    DESCRIPTION
	        Converts html contents given by an url into a pdf file.
	
	    PARAMETERS
	        $url (string) -
	                Web page to be captured. If not specified, the contents of the Url property will be used.
	
	    RETURN VALUE
	        Returns the binary pdf data corresponding to the requested page.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  ConvertPage ( $url = false )
	   {
		if  ( $url )
			$this -> Url	=  $url ;

		if  ( ! $this -> Url )
			error ( new ApiLayerException ( "No url specified for html-to-pdf conversion" ) ) ;

		$result				=  $this -> Execute ( ) ;
		$this -> Pdf			=  $result ;

		return ( $this -> Pdf ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        ConvertPages - Converts a set of html pages to pdf.
	
	    PROTOTYPE
	        $result		=  $screenshot -> ConvertPages ( $url_list, $output_directory, $prefix = 'capture.' ) ;
	
	    DESCRIPTION
	        Converts a set of html pages given by the $url_list array.
	
	    PARAMETERS
	        $url_list (array of strings) -
	                List of urls to be converted.

		$output_directory (string) -
			Directory where the captures are to be put. This directory must exist.

		$prefix (string) -
			Prefix for the captured file names. A sequential index and the format extension ('png', 'gif' 
			or 'jpg') are added to the final filename.
			Thus, if the output directory is 'pdf' and the prefix is 'capture.', the following
			files will be generated (for a format of type 'png') :

				pdf/capture.1.png
				pdf/capture.2.png
				...
	
	    RETURN VALUE
	        The returned value is an array of strings giving the generated filenames.
	
	    NOTES
	        An exception is thrown if one or more captures could not be achieved.
	
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  ConvertPages ( $url_list, $output_directory, $prefix = 'capture.' )
	   {
		// Check that the supplied output directory exists
		if  ( ! is_dir ( $output_directory ) )
			error ( new ApiLayerException ( "Output directory \"$output_directory\" does not exist for batch page capture" ) ) ;

		$errors		=  [] ;
		$filenames	=  [] ;
		$index		=  0 ;

		// Loop through url list
		foreach  ( $url_list  as  $url )
		   {
			// Generate the appropriate capture filename, using a sequential index
			$index ++ ;
			$filename	=  "$output_directory/$prefix$index.pdf" ;

			// Capture the screenshot
			try 
			   {
				$capture	=  $this -> ConvertPage ( $url ) ;
				file_put_contents ( $filename, $capture ) ;
				$filenames []	=  $filename ;
			    }
			// In case of failure, collect the error
			catch  ( ApiLayerException  $e )
			   {
				$errors []	=  ". " . str_replace ( "\n", "\n\t", $e -> getMessage ( ) ) ;
			    }
		    }

		// Throw an exception if one or more errors occured
		$error_count	=  count ( $errors ) ;

		if  ( $error_count )
			error ( new ApiLayerException ( "$error_count error(s) have been encountered during conversion :\n" . implode ( "\n", $errors ) ) ) ;

		// Save the list of filenames as the query result
		$this -> QueryResult -> Data	=  $filenames ;

		// No error occurred : return the list of generated filenames
		return ( $filenames ) ;
	    }



	public function  ConvertHtml ( $contents = false )
	   {
		if  ( $contents )
			$this -> DocumentHtml	=  $contents ;

		if  ( ! $this -> DocumentHtml )
			error ( new ApiLayerException ( "No html contents specified for html-to-pdf conversion" ) ) ;

		$result				=  $this -> Execute ( ) ;
		$this -> Pdf			=  $result ;

		return ( $this -> Pdf ) ;
	    }


	/**************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 ******                                       PROTECTED FUNCTIONS                                        ******
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 **************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************/

	/*--------------------------------------------------------------------------------------------------------------
	
	    NAME
	        OnBeforeQuery - Performs additional checkings before issuing an apilayer request.
	
	    DESCRIPTION
	        Performs the following checkings before issuing an apilayer request :
		- Either the document_url or document_html property must be set
	
	 *-------------------------------------------------------------------------------------------------------------*/
	protected function  OnBeforeQuery ( )
	   {
		if  ( ! $this -> DocumentUrl  &&  ! $this -> DocumentHtml )
			$this -> SetError ( 313, 'missing_document_source', 'No document source specified (document_url or document_html)' ) ;


	    }
    }