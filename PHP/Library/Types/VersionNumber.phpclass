<?php
/**************************************************************************************************************

    NAME
        Version.phpclass

    DESCRIPTION
        A simple class for handling version numbers.

    AUTHOR
        Christian Vigh, 01/2014.

    HISTORY
    [Version : 1.0]    [Date : 2014/01/23]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Types ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

// Used namespaces & objects
use 		Thrak\System\Object ;
use		Thrak\IO\Path ;
use		Thrak\Types\StringUtilities ;


define ( 'VERSION_MAX_ITEMS'		, 4 ) ;

if  ( PHP_X64 )
   {
	define ( 'VERSION_ITEM_MASK'	, 0xFFFF ) ;
	define ( 'VERSION_ITEM_SHIFT'	, 16     ) ;
	define ( 'VERSION_ITEM_SIZE'	, 2      ) ;
    }
else
   {
	define ( 'VERSION_ITEM_MASK'	, 0xFF ) ;
	define ( 'VERSION_ITEM_SHIFT'	, 8    ) ;
	define ( 'VERSION_ITEM_SIZE'	, 1    ) ;
    }



/*==============================================================================================================

    VersionNumber -
        A simple class to handle version numbers (major, minor, revision & build).
	Integer version numbers are 64-bits. On 32-bits systems, version items must be bytes.
	Individual version elements are stored as 16-bits values on 64-bits systems.

  ==============================================================================================================*/
class  VersionNumber		extends  Object
   {
	// Individual version items (index 0 is major, 1 is minor, 2 is revision, 3 is build).
	private		$VersionItems ;
	
	
	/*==============================================================================================================
	
	    CONSTRUCTOR 
	        Builds a Version object.
	
	    PROTOTYPE
	        $version	=  new  Version ( $version = null ) ;
	
	    DESCRIPTION
	        Builds a version object, with an optional version specification (see SetVersion).
	
	    PARAMETERS
	        $version (string or array of WORDs) -
	                See the documentation of the SetVersion() method.
	
	  ==============================================================================================================*/
	public function  __construct ( $version  =  null, $item_count = VERSION_MAX_ITEMS )
	   {
		parent::__construct ( ) ;
		$this -> SetVersion ( $version, $item_count ) ;
	    }
	    

	/*==============================================================================================================
	
		Magic functions.
		
	  ==============================================================================================================*/
	public function  __tostring ( )
	   { return ( $this -> GetVersion ( ) ) ; }
	    

	/*==============================================================================================================
	
	    NAME
	        GetMajor, GetMinor, GetRevision, GetBuild, Get - Get the corresponding version item(s).
	
	    PROTOTYPE
	        $value	=  $version -> GetMajor		( ) ;
	        $value	=  $version -> GetMinor		( ) ;
	        $value	=  $version -> GetRevision	( ) ;
	        $value	=  $version -> GetBuild		( ) ;
		$value	=  $version -> Get		( $item ) ;
	
	    DESCRIPTION
	        Returns the corresponding version item.
		The Get() methods returns a version item by its index.
		
	    PARAMETERS
		$item (integer) -
			Index of the version item to be retrieved.
			
	    RETURN VALUE
		All methods returns the corresponding version item, except Get() which will return false if the specified
		index is out of range.
		
	  ==============================================================================================================*/
	public function  GetMajor ( )
	   { return ( $this -> VersionItems [0] ) ; }
	  
	public function  GetMinor ( )
	   { return ( $this -> VersionItems [1] ) ; }
	  
	public function  GetRevision ( )
	   { return ( $this -> VersionItems [2] ) ; }
	  
	public function  GetBuild ( )
	   { return ( $this -> VersionItems [3] ) ; }
	  
	public function	 Get ( $item )
	   {
		if  ( isset ( $this -> VersionItems [$item] ) )
			return ( $this -> VersionItems [$item] ) ;
		else
			return ( false ) ;
	    }
	    
	    
	/*==============================================================================================================
	
	    NAME
	        GetMajorMinor, GetMajorMinorRevision, GetVersion - Returns compound version items.
	
	    PROTOTYPE
	        $string		=  $version -> GetMajorMinor			( ) ;
		$string		=  $version -> GetMajorMinorRevision		( ) ;
		$string		=  $version -> GetMajorMinorRevisionBuild	( ) ;
		$string		=  $version -> GetVersion			( $item_count = null ) ;
	
	    DESCRIPTION
	        Get subparts or whole version string of the current version number.
	
	    PARAMETERS 
		$item_count (integer) -
			Max version items to be returned. The default count is the one that has been specified to the
			object constructor.
			If this parameter is null, then the max item count specified during object instanciation or 
			through a call to the SetVersion() method will be used.
			
	    RETURN VALUE
	        GetMajorMinor() returns the version major and minor numbers, in the form "x.y".
		GetMajorMinorRevision() adds the revision number after the version major and minor.
		GetMajorMinorRevisionBuild() returns the whole version number.
		GetVersion() returns parts of whole of the version string.
		
	    NOTES 
		Except for the GetVersion() method, these methods will ignore the max item count that has been specified 
		during object instanciation or by calling the SetVersion() method.
	
	  ==============================================================================================================*/
	public function  GetMajorMinor ( )
	   { return ( $this -> VersionItems [0] . "." . $this -> VersionItems [1] ) ; }
	   
	public function  GetMajorMinorRevision ( )
	   { return ( $this -> GetMajorMinor ( ) . "." . $this -> VersionItems [2] ) ; }
	  
	public function  GetMajorMinorRevisionBuild ( )
	   { return ( $this -> GetMajorMinorRevision ( ) . "." . $this -> VersionItems [3] ) ; }
	  
	public function	 GetVersion ( $item_count = null )
	   {
		if  ( $item_count  ===  null )
			$item_count	=  $this -> MaxItemsCount ;
		else if  ( $item_count  <  1  ||  $item_count  >  VERSION_MAX_ITEMS )
			$item_count	=  VERSION_MAX_ITEMS ;
			
		$items		=  array_slice ( $this -> VersionItems, 0, $item_count ) ;
		
		return ( implode ( '.', $items ) ) ;
	    }
	
	  
	/*==============================================================================================================
	
	    NAME
	        SetMajor, SetMinor, SetRevision, SetBuild, Set - Set the corresponding version item(s).
	
	    PROTOTYPE
	        $value	=  $version -> SetMajor		( $value ) ;
	        $value	=  $version -> SetMinor		( $value ) ;
	        $value	=  $version -> SetRevision	( $value ) ;
	        $value	=  $version -> SetBuild		( $value ) ;
		$value	=  $version -> Set		( $item, $value ) ;
	
	    DESCRIPTION
	        Sets the corresponding version item.
		The Set() methods sets a version item by its index.
		
	    PARAMETERS
		$item (integer) -
			Index of the version item to be changed.
			
	    RETURN VALUE
		All methods return nothing, except Set() which will return false if the specified
		index is out of range, or true if the index is within the acceptable range.
		
	  ==============================================================================================================*/
	public function  SetMajor ( $value )
	   { $this -> VersionItems [0] = $value & VERSION_ITEM_MASK ; }
	  
	public function  SetMinor ( $value )
	   { $this -> VersionItems [1] = $value & VERSION_ITEM_MASK ; }
	  
	public function  SetRevision ( $value )
	   { $this -> VersionItems [2] = $value & VERSION_ITEM_MASK ; }
	  
	public function  SetBuild ( $value )
	   { $this -> VersionItems [3] = $value & VERSION_ITEM_MASK ; }
	  
	public function	 Set ( $item, $value )
	   {
		if  ( isset ( $this -> VersionItems [$item] ) )
			return ( $this -> VersionItems [$item] ) ;
		else
			return ( false ) ;
	    }
	    
	    
	/*==============================================================================================================
	
	    NAME
	        SetVersion - Define the version items.
	
	    PROTOTYPE
	        $version -> SetVersion ( $version = null ) ;
	
	    DESCRIPTION
	        Defines individual version items, as an array of 4 WORDs : major, minor, revision and build numbers.
	
	    PARAMETERS
	        $version (string or array of WORDs) -
	                The version number can be specified either as :
			- a string :
				In this case, the version items are specified as dot-separated values.
			- an array :
				Each array item is one of the version components : index 0 is major, 1 is minor, 2 is
				revision, 3 is build.
			If this parameter is null, the version items will be all zeros, except the major version number,
			which will be set to 1.
			
		$item_count (integer) -
			Number of items to be retained for this version object. If this value is outside the range
			[1..VERSION_MAX_ITEMS], it will default to VERSION_MAX_ITEMS.
			
	    NOTES
		No more than MAX_VERSION version items are handled by this function ; addition version numbers will be
		silently ignored.
		If the number of version items is less than 4, additional items will be filled with zeros.
	
	  ==============================================================================================================*/
	public function  SetVersion  ( $version  =  null, $item_count  = VERSION_MAX_ITEMS )
	   {
		if  ( $item_count  <  1  ||  $item_count  >  VERSION_MAX_ITEMS )
			$item_count	=  VERSION_MAX_ITEMS ;
			
		$items				=  null ;
		$this -> MaxVersionItems	=  null ;
		
		// Version string
		if  ( is_string ( $version ) )
			$items	=  explode ( '.', $version ) ;
		// Array of version WORD items
		else if  ( is_array ( $version ) )
			$items	=  $version ;
		// Default version number : 1.0.0.0
		else
			$items	=  array ( 1, 0, 0, 0 ) ;
			
		// If version items are less than the authorized count, add zeroed-items up to VERSION_MAX_ITEMS
		for  ( $i = count ( $items ) ; $i  <  VERSION_MAX_ITEMS ; $i ++ )
			$items []	=  0 ;
			
		// Remove extraneous version items
		while  ( count ( $items )  >  VERSION_MAX_ITEMS )
			array_pop ( $items ) ;
			
		// Handle item size, depending of whether we are on a 32- or 64-bits platform
		for  ( $i = 0 ; $i < count ( $items ) ; $i ++ )
			$items [$i]	&=  VERSION_ITEM_MASK ;
			
		$this -> VersionItems	=  $items ;
	    }
	    
	    
	/*==============================================================================================================
	
	    NAME
	        ToString, ToHexString, ToInteger - casts a version to the specified type.
	
	    PROTOTYPE
	        $string		=  $version -> ToString		( ) ;
		$hexstring	=  $version -> ToHexString	( $include_prefix = true ) ;
		$int		=  $version -> ToInteger	( ) ;
	
	    DESCRIPTION
	        Casts a Version object to the specified type :
		- ToString() will cast the version number to a string (an alias for the (string) cast operator or the
		  GetVersion() method without any argument).
		- ToHexString() will return a hex string of the current version number. The returned value is prefixed
		  with '0x' if the $include_prefix is set to true (the default).
		- ToInteger() will return the version number as a 64-bits integer. Note that on 32-bits systems, the 
		  returned value will be a float.
		  
	     NOTES
		Major version number is stored in bit 63-48; minor in bits 47-32 ; revision in bits 31-16; build in bits
		0-15.
		If the number of items is less than VERSION_MAX_ITEMS, lower significant bits will be set to zero.
		
	  ==============================================================================================================*/
	public function  ToString ( )
	   { return ( $this -> GetVersion ( ) ) ; }
	   
	   
	public function  ToHexString ( $include_prefix = true )
	   {
		$result		=  ( $include_prefix ) ?  "0x" : "" ;
		
		foreach  ( $this -> VersionItems  as  $item )
			$result	.=  sprintf ( "%0" . VERSION_ITEM_SIZE . "X", $item ) ;
			
		return ( $result ) ;
	    }
	    
	    
	public function  ToInteger ( )
	   {
		$result		=  0 ;
		
		foreach  ( $this -> VersionItems  as  $item )
			$result  |=  $item  <<  VERSION_ITEM_SHIFT ;		
	    }
    }