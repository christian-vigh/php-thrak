<?php
/**************************************************************************************************************

    NAME
        Packer.phpclass

    DESCRIPTION
        Converts integral values to binary string and vice-versa.

    AUTHOR
        Christian Vigh, 10/2014.

    HISTORY
    [Version : 1.0]    [Date : 2014/10/17]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Types ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

use 	Thrak\System\Object ;


/*==============================================================================================================

    Packer -
        Packs numeric values to binary strings and vice-versa.

  ==============================================================================================================*/
class  Packer		extends  Object
   {
	// Endianness constants - An example is given using the value 0xA0B00708 :
	const		BIG_ENDIAN			=  0 ;	// yields A0 B7 07 08
	const		LITTLE_ENDIAN			=  1 ;  // yields 08 07 B7 A0
	
	
	/*==============================================================================================================
	
	    NAME
	        PackxxxWord, UnpackxxxWord - Packs/unpacks values to/from binary strings.
	
	    PROTOTYPE
	        $binary_string	=  Packer::DWPack ( $word , $endianness = Packer::LITTLE_ENDIAN ) ;
	        $binary_string	=  Packer::DDPack ( $dword, $endianness = Packer::LITTLE_ENDIAN ) ;
	        $binary_string	=  Packer::DQPack ( $qword, $endianness = Packer::LITTLE_ENDIAN ) ;

	        $value		=  Packer::DWnpack  ( $binary_string, $endianness = Packer::LITTLE_ENDIAN ) ;
	        $value		=  Packer::DDUnpack ( $binary_string, $endianness = Packer::LITTLE_ENDIAN ) ;
	        $value		=  Packer::DWUnpack ( $binary_string, $endianness = Packer::LITTLE_ENDIAN ) ;

	    DESCRIPTION
	        The Packxxx methods pack a word/dword/qword to a binary string, using the specified endianness.
		The Unpackxxx methods unpack a binary string and return a word/dword/qword value
	  
	   NOTES
	 	The names DW, DD and DQ come from the Intel assembler directives to reserve 16-bit words (DW), 32-bit
	 	words (DD) and 64-bit words (DQ).
		
	  ==============================================================================================================*/
	private static function  __pack_little_endian ( $value, $bytes )
	   {
		$result		=  "" ;
		
		for  ( $i = 0 ; $i  <  $bytes ; $i ++ )
		   {
			$result		.=  chr ( $value & 0xFF ) ;
			$value	       >>=  8 ;
		    }
		
		return ( $result ) ;
	    }
	
	
	private static function  __pack_big_endian ( $value, $bytes ) 
	   {
		$result		=  "" ;
		
		for  ( $i = $bytes - 1 ; $i  >=  0 ; $i -- )
		   {
			$result		=  chr  ( $value & 0xFF ) . $result ;
			$value	      >>=  8 ;
		    }
	    }
	
	
	private static function  __unpack_little_endian ( $string, $bytes ) 
	   {
		$result		=  0 ;
		
		for  ( $i = $bytes - 1 ; $i  >=  0 ; $i -- )
		   {
			$result	  |=  ord ( $string [$i] ) ;

			if  ( $i ) 
				$result  <<=  8 ;
		    }
		
		return ( $result ) ;
	    }

	
	private static function  __unpack_big_endian ( $string, $bytes ) 
	   {
		$result		=  0 ;
		
		for  ( $i = 0 ; $i  <  $bytes ; $i ++ )
		   {
			$result	  |=  ord ( $string [$i] ) ;
			
			if  ( $i + 1  <  $bytes )
				$result  <<=  8 ;
		    }
		
		return ( $result ) ;
	    }

	
	
	public static function  DWPack ( $word, $endianness = self::LITTLE_ENDIAN )
	   {
		if  ( $endianness  ==  self::LITTLE_ENDIAN )
			return ( self::__pack_little_endian ( $word, 2 ) ) ;
		else
			return ( self::__pack_big_endian ( $word, 2 ) ) ;
	    }
	
	
	public static function  DDPack ( $word, $endianness = self::LITTLE_ENDIAN )
	   {
		if  ( $endianness  ==  self::LITTLE_ENDIAN )
			return ( self::__pack_little_endian ( $word, 4 ) ) ;
		else
			return ( self::__pack_big_endian ( $word, 4 ) ) ;
	    }
	
	
	public static function  DQPack ( $word, $endianness = self::LITTLE_ENDIAN )
	   {
		if  ( $endianness  ==  self::LITTLE_ENDIAN )
			return ( self::__pack_little_endian ( $word, 4 ) ) ;
		else
			return ( self::__pack_big_endian ( $word, 4 ) ) ;
	    }
	
	
	public static function  DWUnpack ( $word, $endianness = self::LITTLE_ENDIAN )
	   {
		if  ( $endianness  ==  self::LITTLE_ENDIAN )
			return ( self::__unpack_little_endian ( $word, 2 ) ) ;
		else
			return ( self::__unpack_big_endian ( $word, 2 ) ) ;
	    }
	
	
	public static function  DDUnpack ( $word, $endianness = self::LITTLE_ENDIAN )
	   {
		if  ( $endianness  ==  self::LITTLE_ENDIAN )
			return ( self::__unpack_little_endian ( $word, 4 ) ) ;
		else
			return ( self::__unpack_big_endian ( $word, 4 ) ) ;
	    }
	
	
	public static function  DQUnpack ( $word, $endianness = self::LITTLE_ENDIAN )
	   {
		if  ( $endianness  ==  self::LITTLE_ENDIAN )
			return ( self::__unpack_little_endian ( $word, 4 ) ) ;
		else
			return ( self::__unpack_big_endian ( $word, 4 ) ) ;
	    }
    }