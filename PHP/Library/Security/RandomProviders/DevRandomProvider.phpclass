<?php
/**************************************************************************************************************

    NAME
       DevRandomProvider.phpclass

    DESCRIPTION
        Random number provider, using the/dev/urandom device driver.

    AUTHOR
        Christian Vigh, 03/2015.

    HISTORY
    [Version : 1.0]    [Date : 2015/03/23]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Security\Random ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

use  	Thrak\System\Object ;
use	Thrak\IO\Path ;
use     Thrak\Security\Random\RandomProvider ;
use     Thrak\Security\Random\IPseudoRandomProvider ;


/*==============================================================================================================

    DevRandomProvider -
        A random number provider that uses the /dev/urandom device driver.

  ==============================================================================================================*/
class	DevRandomProvider		extends		RandomProvider
					implements	IPseudoRandomProvider
   {
	// Constructor -
	//	Defines the min and max values.
	public function  __construct ( )
	   {
		$this -> MinValue	=  - PHP_INT_MAX - 1 ;
		$this -> MaxValue	=  PHP_INT_MAX ;
		parent::__construct ( '/dev/urandom' ) ;
	    }
	
	
	// Randomize -
	//	Randomizes the seed for this random number generator.
	public function  Randomize ( $seed = null )
	   {
	    }
	
	
	// Next -
	//	Retrieves next '$count' values in the range $low..$high
	public function  Next ( $count = 1, $low = null, $high = null )
	   {
		$result		=  [] ;
		
		// We will fetch $count words of size PHP_INT_SIZE
		$byte_count	=  PHP_INT_SIZE * $count ;

		// On Windows platforms, we will have to hope for the dd cygwin command to be available
		if  ( IS_WINDOWS )
		   {
			// Generate a temp filename for the output of the dd command
			$file		=  'volatile://randomize.' . getmypid ( ) . '.bin' ;
			
			// Convert it to a Cygwin path
			$real_file	=  Path::ToCygWin ( Path::RealPath ( $file ) ) ;
			
			// Execute the dd command to fetch $byte_count bytes from /dev/urandom
			$command	=  "dd if=/dev/urandom of=\"$real_file\" ibs=$byte_count count=1 >NUL: 2>&1" ;
			exec ( $command, $junk, $status ) ;
			
			// Complain if something went wrong
			if  ( $status )
				error ( new \Thrak\System\ExecutionException ( "Error running the 'dd' command on /dev/urandom for $byte_count bytes, status = " .
						"$status" ) ) ;
			
			// Get contents from the file generated by dd
			$bytes		=  file_get_contents ( $file ) ;
		    }
		// Unix platforms : simply read $byte_count bytes from /dev/urandom
		else
		   {
			$fp	=  fopen ( '/dev/urandom', 'r' ) ;
			$bytes	=  fread ( $fp, $byte_count ) ;
			fclose ( $fp ) ;
		    }
		
		// Convert byte stream to integers
		for  ( $i = 0 ; $i  <  $byte_count ; $i += PHP_INT_SIZE )
		   {
			$value	=  0 ;
			
			for  ( $j = 0 ; $j  <  PHP_INT_SIZE ; $j ++ )
				$value	=  ( $value  <<  8 )  |  ord ( $bytes [$i + $j] ) ;
			
			if  ( $low  !==  null  &&  $high  !==  null )
				$value	=  $this -> Normalize ( $value, $low, $high ) ;
			
			$result []	=  $value ;
		    }
		
		// All done, return
		return ( $result ) ;
	    }
    }