<?php
/**************************************************************************************************************
   
       NAME
           RandomProvider.phpclass
   
       DESCRIPTION
           A class for returning random numbers taken from rndom provider.
	   This class is not meant to return huge series of random values, but to obtain a "true" (when possible)
	   random number when its needed, for example for security-related functions.
   
       AUTHOR
           Christian Vigh, 03/2015.
   
       HISTORY
       [Version : 1.0]    [Date : 2015/03/22]     [Author : CV]
           Initial version.
   
    **************************************************************************************************************/
namespace 	Thrak\Security\Random ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

use  	Thrak\System\Object ;
use	Thrak\IO\Path ;
use     Thrak\Math ;
use     Thrak\Processors\IniFile ;
use     Thrak\Types\String ;


/*==============================================================================================================

	Interfaces.

  ==============================================================================================================*/

// Base interface for random providers
interface   IRandomProvider 
   {
	// Min and max values
	public function		GetMinValue		( ) ;
	public function		GetMaxValue		( ) ;
	
	// Returns the official provider name
	public function		GetName			( ) ;
	
	// Gets the remaining quota, in value count
	public function		GetRemainingQuota	( ) ;
	
	// Indicates if the random generator generates real or pseudo numbers
	public function		IsTrueRandomProvider	( ) ;
	public function		IsPseudoRandomProvider	( ) ;
	
	// Initializes the random generator (well, if supported)
	public function		Randomize		( $seed = null ) ;
	
	// Returns the specified number of random values between the specified limits
	public function		Next			( $count = 1, $low = null, $high = null ) ;
	
	// Normalizes a double value to fall into the specified limits
	public function		Normalize		( $value, $low, $high ) ;
    }


// Tells whether the implementation provides true or pseudo random numbers
interface   ITrueRandomProvider		{}
interface   IPseudoRandomProvider	{} 


// Indicates that the random number provider has quotas
interface   IQuotaLimitedRandomProvider 
   {
	// Updates the value of the remaining quota
	public function  UpdateRemainingQuota	( ) ;
	
    }


/*==============================================================================================================

    RandomProvider -
        Base class for random number providers.

  ==============================================================================================================*/
abstract class  RandomProvider		extends		Object
					implements	IRandomProvider 
   {
	// .ini file containing the description of providers to be registered
	const		RANDOM_PROVIDER_FILE		=  "thrak://Data/RandomProviders.ini" ;
	
	// Provider name
	protected		$Name ;
	
	// List of registered providers
	protected static	$Providers		=  [] ;
	protected static	$DefaultNamespace	=  false ;
	
	// Min and max values that can be generated by this provider
	protected		$MinValue, 
				$MaxValue ;
	// Remaining quota ; set to PHP_INT_MAX for pseudo-random number generators
	protected		$RemainingQuota		=  PHP_INT_MAX ;
	
	
	/*==============================================================================================================
	
	    Constructor -
	        Instanciates a random value provider object.
	
	  ==============================================================================================================*/
	public function  __construct ( $name )
	   {
		parent::__construct ( ) ;
		
		$this -> Name	=  $name ;
		
		// Derived class must implement either the ITrueRandomProvider or IPseudoNumberProvider interface
		if  ( ! is_a ( $this, '\Thrak\Security\Random\ITrueRandomProvider' )  &&
		      ! is_a ( $this, '\Thrak\Security\Random\IPseudoRandomProvider' ) )
			error ( new \Thrak\System\BadDerivedClassInitializationException ( "Class " . get_called_class ( ) . 
				" should implement either the ITrueRandomProvider or IPseudoRandomProvider interface." ) ) ;
		
		// Load default providers, as specified in the Thrak://Data/RandomProviders.ini file
		if  ( ! self::$Providers )
			self::RegisterDefaultProviders ( ) ;
	    }
	
	
	/*==============================================================================================================
	
	    NAME
	        GetInstance - Instanciates a random number generator.
	
	    PROTOTYPE
	        $generator	=  RandomProvider::GetInstance ( $provider_name ) ;
	
	    DESCRIPTION
	        Instanciates a random number generator having the specified provider name or alias.
	
	    PARAMETERS
	        $provider_name (string) -
	                Random number generator name, alias or title.
	
	    RETURN VALUE
	        Returns a RandomProvider object of the specified type.
	
	  ==============================================================================================================*/
	public static function  GetInstance ( $provider_name )
	   {
		$provider	=  self::GetProvider ( $provider_name ) ;
		
		// Complain if specified provider name is not defined
		if  ( ! $provider )
			error ( new \Thrak\System\RuntimeException ( "Invalid random number provider name '$provider_name'." ) ) ;
		
		// Load it if needed
		if  ( ! $provider [ 'loaded' ] )
		   {
			require_once ( $provider [ 'classfile' ] ) ;
			
			if  ( ! class_exists ( $provider [ 'classname' ] ) )
				error ( new \Thrak\System\RuntimeException ( "Random provider class '{$provider [ 'classfile' ]}' does not exist." ) ) ;
			
			if  ( ! is_subclass_of ( $provider [ 'classname' ], "\\Thrak\\Security\\Random\\RandomProvider" ) )
				error ( new \Thrak\System\RuntimeException ( "Random provider class '{$provider [ 'classfile' ]}' must inherit " .
						"from class '\\Thrak\\Security\\Random\\RandomProvider'." ) ) ;
			
			// Say that the class has been loaded
			$provider [ 'loaded' ]	=  true ;
		    }
		
		// Instanciate the class and return the result
		$result		=  new  $provider [ 'classname' ] ;
		
		return ( $result ) ;
	    }
	
	
	/*==============================================================================================================
	
	    GetProvider -
	        Returns the description of the specified provider, or false if it does not exist.
	
	  ==============================================================================================================*/
	public static function  &GetProvider ( $name )
	   {
		// Load default providers, as specified in the Thrak://Data/RandomProviders.ini file
		if  ( ! self::$Providers )
			self::RegisterDefaultProviders ( ) ;

		// Search for the specified random number provider
		$found	=  false ;
		$count	=  count ( self::$Providers ) ;
		
		for  ( $i = 0 ; $i  <  $count ; $i ++ )
		   {
			$provider	=  self::$Providers [$i] ;
			
			if  ( ! strcasecmp ( $provider [ 'provider' ], $name ) )
			   {
				$found		=  true ;
				break ;
			    }
			
			foreach  ( $provider [ 'names' ]  as  $provider_name )
			   {
				if  ( ! strcasecmp ( $provider_name, $name ) )
				   {
					$found		=  true ;
					break 2 ;
				    }
			    }
		    }
		
		if  ( $found )
			return self::$Providers [$i] ;
		else
			return ( false ) ;
	    }

	
	/*==============================================================================================================
	
	    GetProviders -
	        Returns the list of random number providers.
	
	  ==============================================================================================================*/
	public static function  GetProviders ( )
	   {
		if  ( ! self::$Providers )
			self::RegisterDefaultProviders ( ) ;
		
		return ( self::$Providers ) ; 
	    }
	

	/*==============================================================================================================
	
	    NAME
	        RegisterDefaultProviders - Registers the providers described in a .ini file.
	
	    PROTOTYPE
	        RandomProvider::RegisterDefaultProviders ( ) ;
	
	    DESCRIPTION
	        Registers the providers described in the file thrak://Data/RandomProviders.ini. The contents of this file
		is described below :
	  
	 	- [Settings] section :
	 		Contains general settings :
	 		- Namespace :
	 			The default namespace for classes described in each [provider] section.
	  
	 	- [Providers] section :
	 		Contains the list of providers. Each entry is a key whose value is the name of a section further
	 		providing the description of the random number provider.
	  
	 	- ['provider name'] sections :
	 		Each section gives information about a random number provider. It can contain the following keys :
	 		- Name :
	 			List of comma-separated provider name and aliases. This is the list of names authorized
	 			by the GetInstance() method.
	  
	 		- Class :
	 			PHP class name for this provider. If no namespace is provided, then the default namespace
	 			specified in the 'Namespace' key of the [Settings] section will be used.
	  
	 		- File :
	 			Source filename containing the provider class.
	 		
	 	The following RandomProvider.ini file defines a random number provider named 'Standard Provider', which
	 	can be specified as 'standard', 'std' or 'rand' to the GetInstance() method.
	 	The namespace of the provider class is \Thrak\Security\Random, since no namespace has been specified in
	 	the 'Class' key of the [Standard Provider] section :
	  
		[Settings]
		Namespace	=  Thrak\Security\Random

		[Providers]
		Standard 	=  Standard provider

		[Standard provider]
		Name 		=  standard, std, rand
		Class 		=  StandardRandomProvider
		File 		=  thrak://PHP/Library/Security/RandomProviders/StandardRandomProvider.phpclass
	
	  ==============================================================================================================*/
	protected static function  RegisterDefaultProviders ( )
	   {
		// Don't register twice
		if  ( self::$Providers )
			return ;
		
		// Complain if random providers description file does not exist
		$real_path	=   Path::RealPath ( self::RANDOM_PROVIDER_FILE ) ;
		
		if  ( ! file_exists ( self::RANDOM_PROVIDER_FILE ) )
			error ( new \Thrak\System\FileNotFoundException ( "Random providers file \"$real_path\" " .
					"does not exist." ) ) ;
		
		// Load .ini file 
		$inifile	=  IniFile::LoadFromFile ( $real_path ) ;
		
		// [Settings] / Namespace key
		$value		=  $inifile -> GetKey ( 'Settings', 'Namespace' ) ;
		
		if  ( $value )
		   {
			if  ( String::EndsWith ( $value, '\\' ) )
				$value	=  substr ( $value, 0, strlen ( $value ) - 1 ) ;
			
			self::$DefaultNamespace		=  $value ;
		    }
		
		// Get section names defined in the [Providers] section
		$providers	=  $inifile -> GetKeys ( 'Providers' ) ;
		
		if  ( ! $providers )
			error ( new \Thrak\System\RuntimeException ( "Empty or missing [Providers] section in file \"$real_path\"" ) ) ;
		
		foreach  ( $providers  as  $provider_name => $provider_section )
		   {
			// Get the Name entry
			$value		=  $inifile -> GetKey ( $provider_section, 'Name' ) ;
			
			if  ( ! $value ) 
				error ( new \Thrak\System\RuntimeException ( "The 'Name' key of the [$provider_section] section does not exists " .
						"in file \"$real_path\"" ) ) ;
			
			$names	=  string::ExplodeAndTrim ( ',', $value ) ;

			if  ( ! count ( $names ) ) 
				error ( new \Thrak\System\RuntimeException ( "The 'Name' key of the [$provider_section] section does not specify " .
						"any valid name in file \"$real_path\"" ) ) ;
			
			// Get the 'Class' entry
			$value	=  $inifile -> GetKey ( $provider_section, 'Class' ) ;
			
			if  ( ! $value ) 
				error ( new \Thrak\System\RuntimeException ( "The 'Class' key of the [$provider_section] section does not exists " .
						"in file \"$real_path\"" ) ) ;
			
			$parts	=  explode ( '\\', $value ) ;
			
			if  ( count ( $parts )  ==  1 )
			   {
				if (  self::$DefaultNamespace )
					$value	=  self::$DefaultNamespace . '\\' . $value ;
			    }
			
			$classname	=  $value ;
			
			// Get the 'File' entry
			$value	=  $inifile -> GetKey ( $provider_section, 'File' ) ;
			
			if  ( ! $value ) 
				error ( new \Thrak\System\RuntimeException ( "The 'File' key of the [$provider_section] section does not exists " .
						"in file \"$real_path\"" ) ) ;
			
			if  ( ! file_exists ( $value ) )
				error ( new \Thrak\System\RuntimeException ( "The file \"$value\", specified in the 'File' key of the [$provider_section] " .
						"section does not exists in file \"$real_path\"" ) ) ;
			
			$classfile	=  $value ;
			
			// Official name
			$value		=  $inifile -> GetKey ( $provider_section, 'OfficialName' ) ;
			
			if  ( $value )
				$official_name	=  $value ;
			else
				$official_name	=  $names [0] ;
			
			// Description
			$value		=  $inifile -> GetKey ( $provider_section, 'Description' ) ;
			
			if  ( $value )
				$description	=  $value ;
			else
				$description	=  '*** UNSPECIFIED ***' ;
			
			// All data collected, register the provider
			self::RegisterProvider ( $provider_section, $official_name, $names, $description, $classname, $classfile, true ) ;
		    }
	    }
	
	
	/*==============================================================================================================
	
	    NAME
	        RegisterProvider - Registers a random number provider.
	
	    PROTOTYPE
	        RandomProvider::RegisterProvider ( $provider_title, $official_name, $names, $description, $classname, 
	 						$classfile = null, $delayed_load = true ) ;
	
	    DESCRIPTION
	        Registers a random number provider.
	
	    PARAMETERS
		$provider_title (string) -
			Official name of random number provider. Used for informational purposes only.
	 
		$official_name (string) -
	 		Official name for this provider. If null, the first element of the $names array will be used.
	  
	        $names (string or array of strings) -
	                Name and aliases for this random number provider. This name must be specified to the GetInstance()
	 		method.
	 
	 	$description (string) -
	 		Provider description.
	  
	 	$classname (string) -
	 		Name of the class to register, which can include a namespace.
	  
	 	$classfile (string) -
	 		If specified, indicates the path of the file to be loaded which contains the specified class.
	 		If not specified, then the class is considered to be already loaded.
	  
	 	$delayed_load (boolean) -
	 		When true and a class file has been specified, the loading will be delayed until a first call
	 		to the GetInstance() method.
	
	  ==============================================================================================================*/
	public static function  RegisterProvider ( $provider_title, $official_name, $names, $description, $classname, $classfile = null, $delayed_load = true )
	   {
		// Always process arrays of names
		if  ( ! is_array ( $names ) )
			$names	=  [ $names ] ;
		
		// If no official specified, choose the first name
		if  ( ! $official_name )
			$official_name	=  $names [0] ;
		// Otherwise, add this official name to the list of names, if not present
		else
		   {
			$found		=  false ;
			
			foreach  ( $names  as  $name )
			   {
				if  ( ! strcasecmp ( $name, $official_name ) )
				   {
					$found		=  true ;
					break ;
				    }	
			    }
			
			if  ( ! $found )
				$names []	=  $official_name ;
		    }
		
		// Verify that the specified name and aliases do not already exist
		foreach  ( self::$Providers  as  $provider )
		   {
			foreach  ( $provider [ 'names' ]  as  $provider_name )
			   {
				foreach  ( $names  as  $name )
				   {
					if  ( ! strcasecmp ( $provider_name, $name ) )
						error ( new \Thrak\System\RuntimeException ( "Alias '$name' for random number provider '$provider_title' is " .
							" already defined by provider {$provider [ 'title' ]}." ) ) ;
				    }
			    }
		    }
		
		// If a class file has been specified, ensure that it exists
		$loaded		=  false ;
		
		if  ( $classfile )
		   {
			if  ( ! file_exists ( $classfile ) )
				error ( new \Thrak\System\FileNotFoundException ( "Class file \"$classfile\" for random number provider '$provider_title' " .
						"does not exist." ) ) ;
			
			// If no delayed load, check that the class exists
			if  ( ! $delayed_load )
			   {
				require_once ( $classfile ) ;
				
				if  ( ! class_exists ( $classname ) )
					error ( new \Thrak\System\RuntimeException ( "Class '$classname' for random number provider '$provider_title' does not exist." ) ) ;
				
				$loaded		=  true ;
			    }
		    }
		// Otherwise, the class must already have been loaded
		else if  ( ! $delayed_load )
		   {	
			if  (  ! class_exists ( $classname ) )
				error ( new \Thrak\System\RuntimeException ( "Class '$classname' for random number provider '$provider_title' does not exist." ) ) ;
		    }
		// Check if the class was already loaded
		else if  ( class_exists ( $classname ) )
			$loaded		=  true ;
		
		// Add this new entry to the list of providers
		self::$Providers []	= 
		   [
			'provider'	=>  $provider_title,
			'official-name'	=>  $official_name,
			'names'		=>  $names,
			'description'	=>  $description,
			'classname'	=>  $classname,
			'classfile'	=>  $classfile,
			'loaded'	=>  $loaded
		    ] ;
	    }
	
	
	/*==============================================================================================================
	
		IRandomProvider interface implementation.
	
	  ==============================================================================================================*/

	// Get min/max values
	public function  GetMinValue ( )
	   { return ( $this -> MinValue ) ; }
	
	public function  GetMaxValue ( )
	   { return ( $this -> MaxValue ) ; }
	
	// Get official provider name
	public function  GetName ( )
	   { return ( $this -> Name ) ; }
	
	// Get remaining count of random numbers available
	public function  GetRemainingQuota ( )
	   { return ( $this -> RemainingQuota ) ; }
	
	// Determines if the provider is a true or pseudo random number provider
	public function  IsTrueRandomProvider ( )
	   { return ( is_a ( $this, '\Thrak\Security\Random\ITrueRandomProvider' ) ) ; }
	
	public function  IsPseudoRandomProvider ( )
	   { return ( is_a ( $this, '\Thrak\Security\Random\IPseudoRandomProvider' ) ) ; }
	
	// Determines if the provider has quotas
	public function  IsQuotaLimitedRandomProvider ( )
	   { return ( is_a ( $this, '\Thrak\Security\Random\IQuotaLimitedRandomProvider' ) ) ; }
	
	// Returns next random value
	public abstract function  Next		( $count = 1, $low = null, $high = null ) ;
	
	// Randomizes the number generator (may not be implemented by all derived classes)
	public abstract function  Randomize	( $seed = null ) ;
	
	
	/*==============================================================================================================
	
	    Normalize -
	        Normalizes a double value to fall between the specified low/high limits.
	
	  ==============================================================================================================*/
	public function  Normalize  ( $value, $low, $high )
	   {
		if  ( $low  ===  null  ||  $low  <  $this -> MinValue )
			$low	=  $this -> MinValue ;
		
		if  ( $high  ===  null  ||  $high  >  $this -> MaxValue )
			$high	=  $this -> MaxValue ;
		
		if  ( $value  <=  $low  ||  $value  >  $high )
		   {
			$value		=  ( double ) $value ;
			$low		=  ( double ) $low ;
			$high		=  ( double ) $high ;

			if  ( $value  <  0 )
			   {
				$tmp	=  $low ;
				$low	=  $high ;
				$high	=  $tmp ;
				//$value	=  abs ( $value ) ;
			    }
			
			return ( $low + ( $value % ( $high - $low + 1 ) ) ) ;
		    }
		else
			return ( ( double ) $value ) ;
	    }
	
	
	/*==============================================================================================================
	
	    TestDistributions -
	        A simple test to get the distribution of random numbers within a given range.
	
	  ==============================================================================================================*/
	public function  TestDistribution ( $count, $low, $high, $seed = null, &$returned_values = null )
	   {
		$this -> Randomize ( $seed ) ;
		
		$numbers	=  $this -> Next ( $count, $low, $high ) ;
		$values		=  [] ;
		
		for  ( $i = $low ; $i <= $high ; $i ++ )
			$values [$i]	=  0 ;
		
		foreach  ( $numbers  as  $number )
			$values [ $number ] ++ ;
		
		$result		=  
		   [ 
			'name'		=>  $this -> GetName ( ),
			'min'		=>  [ 'values' => null, 'occurrences' => PHP_INT_MAX ], 
			'max'		=>  [ 'values' => null, 'occurrences' => - PHP_INT_MAX ], 
			'average'	=>  [ 'values' => Math::Average  ( $numbers ), 'occurrences' => Math::Average  ( $values ) ],
			'variance'	=>  [ 'values' => Math::Variance ( $numbers ), 'occurrences' => Math::Variance ( $values ) ],
			'occurrences'	=>  $values,
			'numbers'	=>  $numbers
		    ] ;

		foreach  ( $values  as  $number => $value )
		   {
			if  ( $value  <  $result [ 'min' ] [ 'occurrences' ] )
			   {
				$result [ 'min' ] [ 'values' ]		=  $number ;
				$result [ 'min' ] [ 'occurrences' ]	=  $value ;
			    }
			else if  ( $value  >  $result [ 'max' ] [ 'occurrences' ] )
			   {
				$result [ 'max' ] [ 'values' ]		=  $number ;
				$result [ 'max' ] [ 'occurrences' ]	=  $value ;
			    }
		    }
		
		if  ( $returned_values  !==  null )
			$returned_values	=  $values ;
		
		return ( $result ) ;
	    }
    }
