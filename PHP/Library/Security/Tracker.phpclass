<?php
/**************************************************************************************************************

    NAME
        Tracker.php

    DESCRIPTION
        Abstract base classes for data trackers.


    AUTHOR
        Christian Vigh, 11/2015.

    HISTORY
    [Version : 1.0]	[Date : 2015/11/03]     [Author : CV]
        Initial version.

    [Version : 1.0.1]	[Date : 2015/11/10]     [Author : CV]
	. Added the TrackerStringStore class.

    [Version : 1.0.2]   [Date : 2016/01/14]     [Author : CV]
	. Handled the new htta_tracking_buffer_id field.
	. Changed the Track() method to return the id of the row inserted into the tracking_buffer table

 **************************************************************************************************************/
namespace 	Thrak\Security ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

use 	Thrak\System\Object ;
use     Thrak\Types\String ;
use	Thrak\Database\Tables\StringStore ;


/*==============================================================================================================

    Tracker class -
        Abstract base class for data trackers.

  ==============================================================================================================*/
abstract class  Tracker		extends  Object
   {
	// Tracking buffer table
	const	TABLE_TRACKING_BUFFER		=  'thrak_logs.tracking_buffer' ;
	const	TABLE_TRACKING_STRING_STORE	=  'thrak_logs.string_store' ;

	// String store associated to this Tracker class
	static public		$StringStore ;
	// Database object
	public			$Database ;


	/*--------------------------------------------------------------------------------------------------------------

	    Constructor -
		Initialize the string store table.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $string_store_table = self::TABLE_TRACKING_STRING_STORE, $db = null )
	   {
		global		$Database ;

		parent::__construct ( ) ;

		if  ( ! $string_store_table )
			$string_store_table	=  self::TABLE_TRACKING_STRING_STORE ;

		self::$StringStore	=  new TrackerStringStore ( $string_store_table, 'Tracking string store table', $db ) ;
		$this -> Database	=  ( $db ) ?  $db : $Database ;
	    }


	/*--------------------------------------------------------------------------------------------------------------

	    Track -
		Performs the real data tracking job.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	abstract function  Track ( ) ;
    }



/*==============================================================================================================

    BufferedTracker class -
        Abstract base class for data trackers that use buffering, ie raw data will be written in a buffer table
	until it is processed by an external batch.
	Buffered trackers must implement the GetRawData() abstract class.

  ==============================================================================================================*/
abstract class  BufferedTracker		extends  Tracker
   {
	protected	$BatchProcessedRows ;


	public function  __construct ( $string_store_table = null, $db = null )
	   {
		parent::__construct ( $string_store_table, $db ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------

	    Track -
		Inserts raw data into the buffer table, to be processed later by the BatchProcess() method.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Track ( )
	   {
		$argv	=  func_get_args ( ) ;
		$type	=  ( count ( $argv ) ) ?  $argv [0] : 0 ;
		$db	=  $this -> Database ;
		$data	=  $db -> Escape ( $this -> GetRawData ( ) ) ;
		$query	=  "INSERT INTO " . self::TABLE_TRACKING_BUFFER . " SET data = '$data', type = $type" ;
		$db -> Execute ( $query ) ;

		return ( $db -> GetLastInsertId ( ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------

	    GetRawData -
		Implemented by derived classes. Must return the raw data to be written to the buffer table.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	protected abstract function  GetRawData ( ) ;


	/*--------------------------------------------------------------------------------------------------------------

	    BatchProcess -
		Batch processes the unprocessed records in the buffer table.
		Returns the number of processed rows.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  BatchProcess ( )
	   {
		$table	=  self::TABLE_TRACKING_BUFFER ;
		$db	=  $this -> Database ;

		$this -> BatchProcessStart ( ) ;

		// "lock" the records to be processed in the table buffer, by setting the "processed" column to 1
		$db -> Execute ( "UPDATE $table SET processed = 1" ) ;

		// Now select them - other processes are free to add new records, they will ignored here but they will 
		// be processed by the next batch run
		$rs	=  $db -> Execute ( "SELECT id, data FROM $table WHERE processed = 1" ) ;

		while  ( $row = $db -> GetNextRow ( $rs ) )
		   {
			$this -> BatchProcessRow ( $row [ 'data' ], $row [ 'id' ] ) ;
			$this -> BatchProcessedRows ++ ;
		    }

		// "unlock" the records (they are simply deleted once processed)
		$db -> Execute  ( "DELETE $table FROM $table WHERE processed = 1" ) ;

		$this -> BatchProcessEnd ( ) ;

		return ( $this -> BatchProcessedRows ) ;
	    }


	protected function  BatchProcessStart ( )
	   {
		$this -> BatchProcessedRows	=  0 ;
	    }

	protected function  BatchProcessEnd ( )
	   { }


	protected function  BatchOptimize ( )
	   {
		$this -> Database -> Execute ( "OPTIMIZE TABLE " . self::TABLE_TRACKING_BUFFER ) ;
	    }

	protected abstract function  BatchProcessRow ( $data, $id ) ;
    }



/*==============================================================================================================

    UnbufferedTracker class -
        Abstract base class for data trackers that don't use buffering.
	Unbuffered trackers must implement the Insert() abstract class.

  ==============================================================================================================*/
abstract class  UnbufferedTracker	extends  Tracker
   {
	public function  __construct ( $string_store_table = null, $db = null )
	   {
		parent::__construct ( $string_store_table, $db ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------

	    Track -
		Just calls the Insert() function, which must be implemented by derived classes.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Track ( )
	   {
		return ( call_user_func_array ( [ $this, 'Log' ], func_get_args ( ) ) ) ;
	    }


	/*--------------------------------------------------------------------------------------------------------------

	    Log -
		Logs data in a log table. To be implemented by derived classes.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	abstract protected function  Log ( ) ;
     }


/*==============================================================================================================

    TrackerStringStore -
        A string store for tracking data.

  ==============================================================================================================*/
class  TrackerStringStore		extends  StringStore 
   {
	// String store type constants
	const	STRING_STORE_URL			=  1 ;
	const	STRING_STORE_QUERY			=  2 ;
	const	STRING_STORE_LOCAL_IP			=  3 ;
	const	STRING_STORE_REMOTE_IP			=  4 ;
	const	STRING_STORE_SERVER_KEY			=  5 ;
	const	STRING_STORE_SERVER_VALUE		=  6 ;
	const	STRING_STORE_GET_ARRAY			=  7 ;
	const   STRING_STORE_POST_ARRAY			=  8 ;
	const	STRING_STORE_FILES_ARRAY		=  9 ;
	const	STRING_STORE_COOKIE_ARRAY		=  10 ;
	const	STRING_STORE_SESSION_ARRAY		=  11 ;
	const   STRING_STORE_EMAIL			=  12 ;

	// Additional string store constants that may be used from within stored procedures
	const	STRING_STORE_MYSQL_CLIENT_USER		=  1000 ;
	const	STRING_STORE_MYSQL_AUTHENTICATED_USER	=  1001 ;


	public function  __construct ( $table, $comment = '', $db = null )
	   {
		parent::__construct ( $table, $comment, 1024 * 1024, 0, $db ) ;
	    }
    }