<?php
/**************************************************************************************************************

    NAME
        RequestSecurer.php

    DESCRIPTION
        A class for protecting against DOS, CSS and other types of hackings.
	The RequestSecurer class will look for the following entries in the 'Security' site configuration class :

	- 'verify' :
		When set to true, the default verifications apply (blacklisted domains or ips, ips sending too 
		much http requests).
		This parameter can be set activate/unactivate the 'verify-domain', 'verify-ip' and 
		'verify-frequency' settings.

	- 'verify-domain' :
		When true, the referrer domain name is checked against blacklisted domains.
		
	- 'verify-ip' :
		When true, the referrer ip is checked against blacklisted ips
	
	- 'verify-frequency' :
		When true, the frequency of http requests coming from the same ip is verified.
		If frequency is too high, the originator will be blacklisted.
		This entry is a set of associative arrays whose entry define the frequency parameters :
		
		- 'count' :
			Number of authorized http requests.
		- 'interval' :
			Interval, in seconds, during which the end-user is allowed at most 'count' http requests.
		- 'duration' :
			Specifies the number of seconds an IP address will remain blocked if it issues more than 
			'count' http request within 'interval' seconds.
			
		The principle is simple : if more than 'count' connections of the same IP address occur within 
		'interval'  seconds, then this IP will be blocked during 'duration' seconds.
		If no appropriate entry is found in this array, the IP address will be blocked forever.
	- 'send-mail-on-failure' :
		When true, a mail is sent when a verification has failed (ie, the incoming requester is blacklisted
		or has issued too many requests). The default is false.
	- 'mail-recipient' :
		Address that will receive notification mails upon failure. If not specified, the Site/errors-recipient
		entry then Site/webmaster-recipient entry will be used.
	- 'shutdown-time' :
		Time to wait in seconds before a response is sent back to the requester.
	- 'shutdown-redirect-to' :
		The page to redirect to when an attack attempt has been detected.
		If no page is specified, an empty page will be generated.
	
    AUTHOR
        Christian Vigh, 10/2014.

    NOTES
	The RequestSecurer class is not intended to be used outside the Thrak library bootstrap code.
	The security settings are disabled by default. You must explicitly define them in the site configuration
	file.
	
    HISTORY
    [Version : 1.0]    [Date : 2014/01/20]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Security ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ;

// Used namespaces & objects
use 		Thrak\System\Object 		as  Object ;
use		Thrak\IO\Path			as  Path ;
use		Thrak\Types\String		as  String ;
use		Thrak\Types\String\Convert	as  Convert ;


/*==============================================================================================================

    RequestSecurer -
        Provides a means for protecting against various types of attacks.

  ==============================================================================================================*/
class	RequestSecurer		extends  Object
   {
	// True to verify if the referrer domain name is not blacklisted
	public		$VerifyDomain		=  false ;
	// True if referrer IP addressed is to be checked against blacklisted IPs
	public		$VerifyIp		=  false ;
	// True if referrer IP connections frequency is to be checked
	public		$VerifyFrequency	=  false ;
	// Frequency settings
	public		$Frequencies		=  array ( ) ;
	// Request time (equals to $_SERVER [ 'REQUEST_TIME_FLOAT' ] if available)
	public		$RequestTime ;	
	// When true, a mail will be sent to $MailRecipient
	public		$SendMailsOnFailure	=  false ;
	// Recipient of mails sent by the verification routine
	public		$MailRecipient		=  null ;
	// Sleep that number of seconds when a potential attack is detected...
	public		$ShutdownSleepTime	=  0 ;
	// ... and page to redirect to 
	public		$ShutdownRedirectTo	=  null ;
	// Requester IP address
	public		$RequesterIp ;
	
	
	/*==============================================================================================================
	
	    CONSTRUCTOR
	        Builds a RequestSecurer instance and loads the security settings defined for the site.
		
	    PROTOTYPE
		$securer	=  new  RequestSecurer ( ) ;
		
	  ==============================================================================================================*/
	 public function  __construct ( )
	    {
		global		$Configuration ;
		
		
		parent::__construct ( ) ;
		
		// Get requester IP
		$this -> RequesterIp	=  Convert::StringToIPV4DWord ( $_SERVER [ 'REMOTE_ADDR' ] )  ;
		
		// Log requester data
		$this -> LogRequesterData ( ) ;

		// Get security settings
		$settings		=  $Configuration -> Get ( 'Security' ) ;
		
		// Get request time
		$this -> RequestTime	=  ( isset ( $_SERVER [ 'REQUEST_TIME_FLOAT' ] ) ) ?
						$_SERVER [ 'REQUEST_TIME_FLOAT' ] : $_SERVER [ 'REQUEST_TIME' ] ;
		
		// Get verification options
		if  ( isset ( $settings [ 'verify-domain' ] )  &&  $settings [ 'verify-domain' ] ) 
			$this -> VerifyDomain		=  $settings [ 'verify-domain' ] ;
			
		if  ( isset ( $settings [ 'verify-ip' ] )  &&  $settings [ 'verify-ip' ] ) 
			$this -> VerifyIp		=  $settings [ 'verify-ip' ] ;
		
		if  ( isset ( $settings [ 'verify-frequency' ] )  &&  $settings [ 'verify-frequency' ] ) 
			$this -> VerifyFrequency	=  $settings [ 'verify-frequency' ] ;
			
		if  ( isset ( $settings [ 'verify' ] ) )
		   {
			$this -> VerifyDomain		= 
			$this -> VerifyIp		=
			$this -> VerifyFrequency	=  $settings [ 'verify' ] ;
		    }
		    
		// Shutdown options
		if  ( isset ( $settings [ 'shutdown-time' ] ) )
			$this -> ShutdownTime		=  $settings [ 'shutdown-time' ] ;
			
		if  ( isset ( $settings [ 'shutdown-redirect-to' ] ) )
			$this -> ShutdownRedirectTo	=  $settings [ 'shutdown-redirect-to' ] ;
		    
		// Get frequencies and sort them by ascending duration
		$usort	=  function ( $a, $b )
		  {
			return ( $a [ 'interval' ] - $b [ 'interval' ] ) ;
		   } ;
		   
		$frequencies	=  $settings [ 'frequencies' ] ;
		
		usort ( $frequencies, $usort ) ;
		$this -> Frequencies	=  $frequencies ;
		
		// Mail recipient stuff
		if  ( isset ( $settings [ 'send-mail-on-failure' ] )  &&  $settings [ 'send-mail-on-failure' ] )
		   {
			if  ( isset ( $settings [ 'mail-recipient' ] ) )
				$mail	=  $settings [ 'mail-recipient' ] ;
				
			if  ( ! $mail )
				$mail	=  $Configuration -> Get ( 'Site/errors-recipient' ) ;
				
			if  ( ! $mail )
				$mail	=  $Configuration -> Get ( 'Site/webmaster-recipient' ) ;
				
			if  ( $mail )
			   {
				$this -> SendMailOnFailure	=  true ;
				$this -> MailRecipient		=  $mail ;
			    }
		    }
	     }

	     
	/*==============================================================================================================

		Private methods.
	
	  ==============================================================================================================*/
	  
	// __blacklist_log -
	//	Logs requester data when a possible attack has been detected.
	private function  __blacklist_log ( $type, $id, $data )
	   {
		global	$Database ;

		// Log fixed row data
		$now	=  time ( ) ;
		$query	=  "
				INSERT DELAYED INTO thrak_blacklist_log
				SET
					blal_entry_type		=  '$type',
					blal_entry_id		=  $id,
					blal_etry_time		=  $now
			   " ;
		$Database -> Execute ( ) ;
		
		// The variable format data
		$serialized_data	=  $Database -> QuoteValue ( serialize ( $data ) ) ;
		$query			=  "
						INSERT DELAYED INTO thrak_blacklist_variable_log
						SET
							blavl_blacklist_id	=  $id,
							blavl_data		=  '$serialized_data' 
					   " ;
		$Database -> Execute ( $query ) ;
	    }
	    
	  
	// __get_requester_data -
	//	Returns an array containing all the data that could be possibly collected from the requester.
	private function  __get_requester_data ( )
	   {
		$data	=  array 
		   (
			'$_SERVER'	=>  $_SERVER,
			'$_GET'		=>  $_GET,
			'$_POST'	=>  $_POST,
			'$_REQUEST'	=>  $_REQUEST,
			'$_FILES'	=>  $_FILES,
			'$_COOKIE'	=>  $_COOKIE
		    ) ;
		    
		return ( $data ) ;
	    }

	    
	// __shutdown -
	//	Shutdown process, when a potential attack has been detected 
	private function  __shutdown ( )
	   {
		// Sleep the time needed for sleeping and potentially discourage an attacker
		if  ( $this -> ShutdownTime  >  0 )
			sleep ( $this -> ShutdownTime ) ;
			
		// Redirect to a configured paged
		@ob_clean ( ) ;
		
		if   ( $this -> ShutdownRedirectTo )
			header ( "Location : " . $this -> RedirectTo ) ;
		else
			echo " " ;
	    }
	    

	/*==============================================================================================================
	
	    NAME
	        Verify - runs securization checkings.
	
	    PROTOTYPE
	        RequestSecurer::Verify ( ) ;
	
	    DESCRIPTION
	        Runs the following checks :
		- Checks if the requesting domain is not blacklisted
		- Checks if the requesting IP is not blacklisted
		- Verifies the frequency of connections from the current referrer IP address
	
	  ==============================================================================================================*/
	public function  Verify ( )
	   {
		$this -> VerifyBlacklistedDomain	( ) ;
		$this -> VerifyBLacklistedIp		( ) ;
		$this -> VerifyFrequency		( ) ;
	    }
	    
	    
	/*==============================================================================================================
	
	    NAME
	        VerifyBlacklistedDomain - Verifies if a domain name is blacklisted.
	
	    PROTOTYPE
	        $securer -> VerifyBlacklistedDomain ( ) ;
	
	    DESCRIPTION
	        Verify if the requester domain's name is not blacklisted.
	
	    NOTES
	        This option should not be activated because it requires to issue a reverse-DNS request, which may take
		seconds to complete.
	
	  ==============================================================================================================*/
	public function  VerifyBlacklistedDomain ( )
	   { 
		if  ( ! $this -> VerifyDomain )
			return ( true ) ;
		

	     }
	     
	
	/*==============================================================================================================
	
	    NAME
	        VerifyBlacklistedIp - Verifies if an IP is blacklisted.
	
	    PROTOTYPE
	        $securer -> VerifyIp ( ) ;
	
	    DESCRIPTION
	        Verifies that the IP address specified by $_SERVER [ 'REMOTE_ADDR' ] does not belong to the list of
		blacklisted addresses.
		
	    NOTES
	        This function never returns if the IP address is blacklisted ; otherwise it returns true.
	
	  ==============================================================================================================*/
	public function  VerifyBlacklistedIp ( )
	   {
		// Return if we are not on the duty of verifying caller IP.
		if  ( ! $this -> VerifyIp )
			return ( true ) ;
			
		global	$Database, $Log ;
		
		// Get the caller IP V4 address, as an unsigned DWORD.
		$ip	=  $this -> RequesterIp ;
		
		// Check if we have this IP in the database, with a blacklist expiration time that puts us far ahead in the future
		$query	=  "
				SELECT *
				FROM thrak_blacklisted_ips
				WHERE
					blai_ip 	=  $ip  AND
					blai_time + blai_duration > UNIX_TIMESTAMP( NOW( ) )
			   " ; 
		$iprow	=  $Database -> LoadRow ( $query ) ;
		
		// IP not found : stop the verifications here.
		if  ( ! $iprow )
			return ( true ) ;
			
		// IP found : we first need to update its starting time
		$now		=  time ( ) ;
		$query		=  "
					UPDATE thrak_blacklisted_ips
					SET
						blai_time	=  $now
					WHERE
						blai_ip = $ip
				   " ;
		$Database -> Execute ( $query ) ;
		
		// Then log this event into the blacklist history table
		$data			=  $this -> __get_requester_data ( ) ;
		$data [ 'table' ]	=  'thrak_blacklisted_ips' ;
		$data [ 'table-row' ]	=  $iprow ;
		$this -> __blacklist_log ( 'ip', $iprow [ 'blai_id' ], $data ) ;
		
		// Then log to the thrak history log. 
		$Log -> Write ( "Blacklisted ip $ip tried to connect ; last seen time = " .
					date ( 'Y-m-d H:i:s', $iprow [ 'blai_time' ] ) . ", grace period = {$iprow [ 'time' ]} seconds." ) ;
					
		// Perform the shutdown process
		$this -> __shutdown ( ) ;
	    }
	    
	
	/*==============================================================================================================
	
	    NAME
	        VerifyFrequency - Verifies that the requester did not connect too many times.
	
	    PROTOTYPE
	        $securer -> VerifyFrequency ( ) ;
	
	    DESCRIPTION
	        Verifies that the requester has not issued to many connection requests during near past, and remains in
		the authorized ranges, as defined in the Security/verify-frequency entry of the Configuration object.
	
	  ==============================================================================================================*/
	public function  VerifyFrequency ( )
	   {
		if  ( ! $this -> VerifyFrequency )
			return ( true ) ;
	    }
	    
	    
	/*==============================================================================================================
	
	    NAME
	        LogRequesterData - Logs minimal data about a safe requester.
	
	    PROTOTYPE
	       $securer -> LogRequesterData ( ) ;
	
	    DESCRIPTION
	        Logs requester data, such as IP address, browser information, etc.
	
	  ==============================================================================================================*/
	public function  LogRequesterData ( )
	   {
	    }
    }