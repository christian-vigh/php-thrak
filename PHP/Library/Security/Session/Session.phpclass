<?php
/**************************************************************************************************************

    NAME
        Session.php

    DESCRIPTION
        A class to enforce session security.

    AUTHOR
        Christian Vigh, 10/2013.

    HISTORY
    [Version : 1.0]    [Date : 2013/10/29]     [Author : CV]
        Initial version.

 **************************************************************************************************************/
namespace 	Thrak\Security ;

defined ( '__THRAK_SETUP__' ) or die ( "This file cannot be accessed directly." ) ; 


// Used namespaces & objects
use 	Thrak\System\Object ;
use	Thrak\IO\Path ;
use	Thrak\Types\String ;

class  SessionException			extends  \Thrak\System\RuntimeException		{} ;


/*==============================================================================================================

    Session class -
        Provides security enforcements to session management.

  ==============================================================================================================*/
class	Session		extends		Object
			implements	\ArrayAccess, \Countable, \Iterator
   {
	// Variables related to session creation
	const		SESSION_INITIAL_START	=  '__SIS__' ;		// Set to true if the current session has just be created
	const		SESSION_START_TIME	=  '__STS__' ;		// Session start time
	
	// Is session started ?
	protected	$Started		=  false ;
	// Session ID
	protected	$SessionId		=  null ;
	// Session data
	protected	$SessionData ;
	// Session start/stop time
	protected	$StartTime		=  0 ;
	protected	$EndTime		=  0 ;
	
	
	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Constructor - Creates a Session object.
	 
	    PROTOTYPE
	        $Session	=  new  Session ( $start = null ) ;
	 
	    DESCRIPTION
	        Creates a session object.
	 
	    PARAMETERS
	        $start (boolean) -
	                When specified, indicates whether the session should be opened or not. If not specified, then
			the Session/autostart parameter of the site configuration file will be used.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __construct ( $start = null )
	   {
		global		$Configuration ;
		
		
		parent::__construct ( ) ;
		
		if  ( $start  ===  null )
		   {
			$start_value	=  $Configuration -> Get ( 'Session/autostart' ) ;
		
			if  ( $start_value  !==  null )
				$start	=  $start_value ;
		    }
		
		if  ( $start )
			$this -> Open ( ) ;
	    }
	

	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Open - Opens a session.
	 
	    PROTOTYPE
	        $Session -> Open ( ) ;
	 
	    DESCRIPTION
	        Opens the Session object. The $_SESSION array can later be accessed either using array keys or object
		properties.

		For example :

			$Session [ 'language' ] 

		is equivalent to :

			$Session -> language ;
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Open ( )
	   {
		// Warn if session already started
		if  ( $this -> Started )
		   {
			warning ( new SessionException ( "Session already started" ) ) ;
			return ;
		    }

		// Start the session and make an internal reference to the $_SESSION array
		session_start ( ) ;
		$this -> SessionData	=  &$_SESSION ;
		
		// A little bit of processing to determine whether the session has been started for the first time,
		// or if it has been reopened since the last http request
		if  ( isset ( $this -> SessionData [ self::SESSION_INITIAL_START ] ) )
		   {
			$this -> SessionData [ self::SESSION_INITIAL_START ]	=  false ;
			$this -> StartTime					=  $this -> SessionData [ self::SESSION_START_TIME ] ;
		    }
		else
		   {
			$this -> SessionData [ self::SESSION_INITIAL_START ]	=  true ;
			$this -> SessionData [ self::SESSION_START_TIME    ]	=
			$this -> StartTime					=  microtime ( true ) ;
		     }
			
		$this -> Started	=  true ;
		$this -> SessionId	=  session_id ( ) ;
	    }
	
	
	/*--------------------------------------------------------------------------------------------------------------
	 
	    NAME
	        Close - Closes a session.
	 
	    PROTOTYPE
	        $Session -> Close ( $redirect_to = null ) ;
	 
	    DESCRIPTION
	        Closes a session and reset all the superglobals.
	 
	    PARAMETERS
	        $redirect_to (string) -
	                If specified, the user will be redirected to the specified url after session closing.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Close ( $redirect_to = null )
	   {
		// Safety checks : a session must be started in order to close it...
		if  ( ! $this -> Started )
		   {
			warning ( new SessionException ( "No session started" ) ) ;
			return ;
		    }
		
		// Reset superglobals
		$_GET  		=  [] ;
		$_POST 		=  [] ;
		$_REQUEST 	=  [] ;
		$_FILES		=  [] ;
		$_COOKIE	=  [] ;
		
		// Destroy the session
		session_destroy ( ) ;
		$this -> EndTime	=  microtime ( true ) ;
		
		// Keep internal data consistent with current session state
		$this -> Started	=  false ;		// No session started
		$this -> SessionId	=  null ;		// And thus, no associated session id
		$this -> SessionData	=  [] ;			// Reset the $_SESSION superglobal ($SessionData is only a reference to this array)

		// Clean output buffer
		@ob_end_clean ( ) ;
		@ob_start ( ) ;

		// Redirect to the specified page, if any was specified
		if  ( $redirect_to )
		   {
			header ( "Location: $redirect_to" ) ;
			exit ;
		    }
	    }
	
	
	/*--------------------------------------------------------------------------------------------------------------
	 
	    GetDuration -
		Retrieves the current session opening duration.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  GetDuration ( $as_float = false )
	   {
		if  ( $this -> StartTime )
		   {
			$delta	 =  ( $this -> EndTime ) ?  $this -> EndTime : time ( ) ;
			$delta  -=  $this -> StartTime ;
			
			if  ( $as_float )
				return ( Convert::ToTimeString ( $delta ) ) ;
			else
				return ( $delta ) ;
		    }
		else
			return ( ( $as_float ) ?  0 : '' ) ;
	    }
	
	
	/*--------------------------------------------------------------------------------------------------------------
	 
	    GetEndTime -
		Returns the session end time, if it has been previously closed.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  GetEndTime ( )
	   { return ( $this -> EndTime ) ; }
	
	
	/*--------------------------------------------------------------------------------------------------------------
	 
	    GetSessionId -
		Returns the current session id.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  GetSessionId ( )
	   { return ( $this -> SessionId ) ; }
	
	
	/*--------------------------------------------------------------------------------------------------------------
	 
	    GetStartTime -
		Returns the current session starting time.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  GetStartTime ( )
	   { return ( $this -> StartTime ) ; }
	
	
	/*--------------------------------------------------------------------------------------------------------------
	 
	    IsNew -
		Checks if the session has just been created or if it simply was an existing session reopening.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  IsNew ( )
	   { 
		return ( isset ( $this -> SessionData )  &&  
			 isset ( $this -> SessionData [ self::SESSION_INITIAL_START ] )  &&  
			 $this -> SessionData [ self::SESSION_INITIAL_START ] ) ; 
	    }
	
 
	/*--------------------------------------------------------------------------------------------------------------
	 
	    IsStarted -
		Indicates if the current session is opened.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  IsStarted ( )
	   { return ( $this -> Started ) ; }


	/*--------------------------------------------------------------------------------------------------------------
	 
		Magic functions that allow accessing $_SESSION array items as object variables.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  __get ( $member )
	   { return ( $this -> offsetGet ( $member ) ) ; }


	public function  __set ( $member, $value )
	   { $this -> offsetSet ( $member, $value ) ; }



	/**************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 ******                                  INTERFACES IMPLEMENTATIONS                                      ******
	 ******                                                                                                  ******
	 ******                                                                                                  ******
	 **************************************************************************************************************
	 **************************************************************************************************************
	 **************************************************************************************************************/


	/*--------------------------------------------------------------------------------------------------------------
	 
		Countable interface.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  Count ( )
	   {
		return ( count ( $this -> SessionData ) ) ;
	    }

	/*--------------------------------------------------------------------------------------------------------------
	 
		ArrayAccess interface.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	public function  offsetExists ( $offset )
	   { return ( isset ( $this -> SessionData [ $offset ] ) ) ; }


	public function  offsetGet ( $offset )
	   { return ( $this -> SessionData [ $offset ] ) ; }


	public function  offsetSet ( $offset, $member ) 
	   { $this -> SessionData [ $offset ] = $member ; }


	public function  offsetUnset ( $offset )
	   { unset ( $this -> SessionData [ $offset ] ) ; }


	/*--------------------------------------------------------------------------------------------------------------
	 
		Iterator interface.
	 
	 *-------------------------------------------------------------------------------------------------------------*/
	private		$IteratorKeys ;
	private		$IteratorIndex ;


	public function  rewind ( )
	   { 
		$this -> IteratorKeys	=  array_keys ( $this -> SessionData ) ;
		$this -> IteratorIndex	=  0 ;
	    }


	public function  key ( )
	   { return ( $this -> IteratorKeys [ $this -> IteratorIndex ] ) ; }


	public function  valid ( )
	   { return ( isset ( $this -> IteratorKeys [ $this -> IteratorIndex ] ) ) ; }


	public function  next ( )
	   { $this -> IteratorIndex ++ ; }


	public function  current ( )
	   { return ( $this -> IteratorKeys [ $this -> IteratorIndex ] ) ; }

    }